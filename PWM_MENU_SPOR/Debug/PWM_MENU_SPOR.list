
PWM_MENU_SPOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006190  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  080062a0  080062a0  000162a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800670c  0800670c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800670c  0800670c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800670c  0800670c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006710  08006710  00016710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  200001dc  080068f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080068f0  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086ae  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001793  00000000  00000000  000288b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018311  00000000  00000000  0002b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae48  00000000  00000000  00043751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089787  00000000  00000000  0004e599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7d20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c08  00000000  00000000  000d7d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006288 	.word	0x08006288

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006288 	.word	0x08006288

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <Delay>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "lcd.h"
	
void Delay(uint32_t nCount)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000a90:	e002      	b.n	8000a98 <Delay+0x10>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f9      	bne.n	8000a92 <Delay+0xa>
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <lcd_delay>:
void lcd_delay(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
	Delay(2000);
 8000aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab2:	f7ff ffe9 	bl	8000a88 <Delay>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000ac6:	4b57      	ldr	r3, [pc, #348]	; (8000c24 <lcd_cmd+0x168>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	615a      	str	r2, [r3, #20]
	
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000acc:	4b55      	ldr	r3, [pc, #340]	; (8000c24 <lcd_cmd+0x168>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000ad2:	4b54      	ldr	r3, [pc, #336]	; (8000c24 <lcd_cmd+0x168>)
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000ad8:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <lcd_cmd+0x168>)
 8000ada:	2220      	movs	r2, #32
 8000adc:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000ade:	4b51      	ldr	r3, [pc, #324]	; (8000c24 <lcd_cmd+0x168>)
 8000ae0:	2240      	movs	r2, #64	; 0x40
 8000ae2:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000ae4:	4b4f      	ldr	r3, [pc, #316]	; (8000c24 <lcd_cmd+0x168>)
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	615a      	str	r2, [r3, #20]
	
	lcd_delay();
 8000aea:	f7ff ffde 	bl	8000aaa <lcd_delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <lcd_cmd+0x168>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	4a4c      	ldr	r2, [pc, #304]	; (8000c24 <lcd_cmd+0x168>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	60d3      	str	r3, [r2, #12]
		
	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <lcd_cmd+0x50>
 8000b04:	4b47      	ldr	r3, [pc, #284]	; (8000c24 <lcd_cmd+0x168>)
 8000b06:	2210      	movs	r2, #16
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	e003      	b.n	8000b14 <lcd_cmd+0x58>
 8000b0c:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <lcd_cmd+0x168>)
 8000b0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b12:	611a      	str	r2, [r3, #16]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 0320 	and.w	r3, r3, #32
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <lcd_cmd+0x6a>
 8000b1e:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <lcd_cmd+0x168>)
 8000b20:	2220      	movs	r2, #32
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	e003      	b.n	8000b2e <lcd_cmd+0x72>
 8000b26:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <lcd_cmd+0x168>)
 8000b28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b2c:	611a      	str	r2, [r3, #16]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <lcd_cmd+0x84>
 8000b38:	4b3a      	ldr	r3, [pc, #232]	; (8000c24 <lcd_cmd+0x168>)
 8000b3a:	2240      	movs	r2, #64	; 0x40
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	e003      	b.n	8000b48 <lcd_cmd+0x8c>
 8000b40:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <lcd_cmd+0x168>)
 8000b42:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b46:	611a      	str	r2, [r3, #16]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da03      	bge.n	8000b58 <lcd_cmd+0x9c>
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <lcd_cmd+0x168>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	e003      	b.n	8000b60 <lcd_cmd+0xa4>
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <lcd_cmd+0x168>)
 8000b5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b5e:	611a      	str	r2, [r3, #16]
	
	lcd_delay();
 8000b60:	f7ff ffa3 	bl	8000aaa <lcd_delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <lcd_cmd+0x168>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <lcd_cmd+0x168>)
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <lcd_cmd+0x168>)
 8000b72:	2220      	movs	r2, #32
 8000b74:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000b76:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <lcd_cmd+0x168>)
 8000b78:	2240      	movs	r2, #64	; 0x40
 8000b7a:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <lcd_cmd+0x168>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	615a      	str	r2, [r3, #20]
	
	lcd_delay();
 8000b82:	f7ff ff92 	bl	8000aaa <lcd_delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <lcd_cmd+0x168>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <lcd_cmd+0x168>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	60d3      	str	r3, [r2, #12]
	
	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <lcd_cmd+0xe8>
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <lcd_cmd+0x168>)
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	e003      	b.n	8000bac <lcd_cmd+0xf0>
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <lcd_cmd+0x168>)
 8000ba6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000baa:	611a      	str	r2, [r3, #16]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <lcd_cmd+0x102>
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <lcd_cmd+0x168>)
 8000bb8:	2220      	movs	r2, #32
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	e003      	b.n	8000bc6 <lcd_cmd+0x10a>
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <lcd_cmd+0x168>)
 8000bc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bc4:	611a      	str	r2, [r3, #16]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <lcd_cmd+0x11c>
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <lcd_cmd+0x168>)
 8000bd2:	2240      	movs	r2, #64	; 0x40
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	e003      	b.n	8000be0 <lcd_cmd+0x124>
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <lcd_cmd+0x168>)
 8000bda:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bde:	611a      	str	r2, [r3, #16]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <lcd_cmd+0x136>
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <lcd_cmd+0x168>)
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	e003      	b.n	8000bfa <lcd_cmd+0x13e>
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <lcd_cmd+0x168>)
 8000bf4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bf8:	611a      	str	r2, [r3, #16]

	lcd_delay();
 8000bfa:	f7ff ff56 	bl	8000aaa <lcd_delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <lcd_cmd+0x168>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <lcd_cmd+0x168>)
 8000c06:	2210      	movs	r2, #16
 8000c08:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <lcd_cmd+0x168>)
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <lcd_cmd+0x168>)
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000c16:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <lcd_cmd+0x168>)
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	615a      	str	r2, [r3, #20]
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40010800 	.word	0x40010800

08000c28 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000c32:	4b59      	ldr	r3, [pc, #356]	; (8000d98 <lcd_char_cp+0x170>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	4a58      	ldr	r2, [pc, #352]	; (8000d98 <lcd_char_cp+0x170>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	60d3      	str	r3, [r2, #12]
	
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000c3e:	4b56      	ldr	r3, [pc, #344]	; (8000d98 <lcd_char_cp+0x170>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000c44:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <lcd_char_cp+0x170>)
 8000c46:	2210      	movs	r2, #16
 8000c48:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <lcd_char_cp+0x170>)
 8000c4c:	2220      	movs	r2, #32
 8000c4e:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000c50:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <lcd_char_cp+0x170>)
 8000c52:	2240      	movs	r2, #64	; 0x40
 8000c54:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <lcd_char_cp+0x170>)
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	615a      	str	r2, [r3, #20]
	
	lcd_delay();
 8000c5c:	f7ff ff25 	bl	8000aaa <lcd_delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000c60:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <lcd_char_cp+0x170>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	4a4c      	ldr	r2, [pc, #304]	; (8000d98 <lcd_char_cp+0x170>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	60d3      	str	r3, [r2, #12]
		
	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <lcd_char_cp+0x56>
 8000c76:	4b48      	ldr	r3, [pc, #288]	; (8000d98 <lcd_char_cp+0x170>)
 8000c78:	2210      	movs	r2, #16
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	e003      	b.n	8000c86 <lcd_char_cp+0x5e>
 8000c7e:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <lcd_char_cp+0x170>)
 8000c80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c84:	611a      	str	r2, [r3, #16]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 0320 	and.w	r3, r3, #32
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <lcd_char_cp+0x70>
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <lcd_char_cp+0x170>)
 8000c92:	2220      	movs	r2, #32
 8000c94:	611a      	str	r2, [r3, #16]
 8000c96:	e003      	b.n	8000ca0 <lcd_char_cp+0x78>
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <lcd_char_cp+0x170>)
 8000c9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c9e:	611a      	str	r2, [r3, #16]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <lcd_char_cp+0x8a>
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <lcd_char_cp+0x170>)
 8000cac:	2240      	movs	r2, #64	; 0x40
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	e003      	b.n	8000cba <lcd_char_cp+0x92>
 8000cb2:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <lcd_char_cp+0x170>)
 8000cb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cb8:	611a      	str	r2, [r3, #16]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da03      	bge.n	8000cca <lcd_char_cp+0xa2>
 8000cc2:	4b35      	ldr	r3, [pc, #212]	; (8000d98 <lcd_char_cp+0x170>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	e003      	b.n	8000cd2 <lcd_char_cp+0xaa>
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <lcd_char_cp+0x170>)
 8000ccc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cd0:	611a      	str	r2, [r3, #16]
	
	lcd_delay();
 8000cd2:	f7ff feea 	bl	8000aaa <lcd_delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <lcd_char_cp+0x170>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <lcd_char_cp+0x170>)
 8000cde:	2210      	movs	r2, #16
 8000ce0:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <lcd_char_cp+0x170>)
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <lcd_char_cp+0x170>)
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <lcd_char_cp+0x170>)
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	615a      	str	r2, [r3, #20]
	
	lcd_delay();
 8000cf4:	f7ff fed9 	bl	8000aaa <lcd_delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <lcd_char_cp+0x170>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	4a26      	ldr	r2, [pc, #152]	; (8000d98 <lcd_char_cp+0x170>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	60d3      	str	r3, [r2, #12]
	
	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <lcd_char_cp+0xee>
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <lcd_char_cp+0x170>)
 8000d10:	2210      	movs	r2, #16
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	e003      	b.n	8000d1e <lcd_char_cp+0xf6>
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <lcd_char_cp+0x170>)
 8000d18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d1c:	611a      	str	r2, [r3, #16]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <lcd_char_cp+0x108>
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <lcd_char_cp+0x170>)
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	e003      	b.n	8000d38 <lcd_char_cp+0x110>
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <lcd_char_cp+0x170>)
 8000d32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d36:	611a      	str	r2, [r3, #16]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <lcd_char_cp+0x122>
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <lcd_char_cp+0x170>)
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	e003      	b.n	8000d52 <lcd_char_cp+0x12a>
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <lcd_char_cp+0x170>)
 8000d4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d50:	611a      	str	r2, [r3, #16]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <lcd_char_cp+0x13c>
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <lcd_char_cp+0x170>)
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	e003      	b.n	8000d6c <lcd_char_cp+0x144>
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <lcd_char_cp+0x170>)
 8000d66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d6a:	611a      	str	r2, [r3, #16]

	lcd_delay();
 8000d6c:	f7ff fe9d 	bl	8000aaa <lcd_delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <lcd_char_cp+0x170>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <lcd_char_cp+0x170>)
 8000d78:	2210      	movs	r2, #16
 8000d7a:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <lcd_char_cp+0x170>)
 8000d7e:	2220      	movs	r2, #32
 8000d80:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <lcd_char_cp+0x170>)
 8000d84:	2240      	movs	r2, #64	; 0x40
 8000d86:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <lcd_char_cp+0x170>)
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	615a      	str	r2, [r3, #20]
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40010800 	.word	0x40010800

08000d9c <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000da4:	e008      	b.n	8000db8 <lcd_out_cp+0x1c>
	{
		lcd_delay();
 8000da6:	f7ff fe80 	bl	8000aaa <lcd_delay>
		lcd_char_cp(*out_char++);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff38 	bl	8000c28 <lcd_char_cp>
	while(*out_char)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1f2      	bne.n	8000da6 <lcd_out_cp+0xa>
	}
	lcd_delay();
 8000dc0:	f7ff fe73 	bl	8000aaa <lcd_delay>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <lcd_init>:


void lcd_init(char bits, char font, char lines)
{		
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	71bb      	strb	r3, [r7, #6]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000dde:	20fa      	movs	r0, #250	; 0xfa
 8000de0:	f000 fe82 	bl	8001ae8 <HAL_Delay>
	lcd_cmd(_RETURN_HOME);
 8000de4:	2002      	movs	r0, #2
 8000de6:	f7ff fe69 	bl	8000abc <lcd_cmd>
    HAL_Delay(50);
 8000dea:	2032      	movs	r0, #50	; 0x32
 8000dec:	f000 fe7c 	bl	8001ae8 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	797b      	ldrb	r3, [r7, #5]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe59 	bl	8000abc <lcd_cmd>
    HAL_Delay(50);
 8000e0a:	2032      	movs	r0, #50	; 0x32
 8000e0c:	f000 fe6c 	bl	8001ae8 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000e10:	2006      	movs	r0, #6
 8000e12:	f7ff fe53 	bl	8000abc <lcd_cmd>
    HAL_Delay(50);
 8000e16:	2032      	movs	r0, #50	; 0x32
 8000e18:	f000 fe66 	bl	8001ae8 <HAL_Delay>
    lcd_cmd(0x0E);
 8000e1c:	200e      	movs	r0, #14
 8000e1e:	f7ff fe4d 	bl	8000abc <lcd_cmd>
    HAL_Delay(50);
 8000e22:	2032      	movs	r0, #50	; 0x32
 8000e24:	f000 fe60 	bl	8001ae8 <HAL_Delay>
    lcd_cmd(0x0C);
 8000e28:	200c      	movs	r0, #12
 8000e2a:	f7ff fe47 	bl	8000abc <lcd_cmd>
    HAL_Delay(50);
 8000e2e:	2032      	movs	r0, #50	; 0x32
 8000e30:	f000 fe5a 	bl	8001ae8 <HAL_Delay>
    lcd_cmd(0x01);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff fe41 	bl	8000abc <lcd_cmd>
    HAL_Delay(100);
 8000e3a:	2064      	movs	r0, #100	; 0x64
 8000e3c:	f000 fe54 	bl	8001ae8 <HAL_Delay>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{	
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d106      	bne.n	8000e6c <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	337f      	adds	r3, #127	; 0x7f
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe29 	bl	8000abc <lcd_cmd>
 8000e6a:	e008      	b.n	8000e7e <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d105      	bne.n	8000e7e <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	3b41      	subs	r3, #65	; 0x41
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe1f 	bl	8000abc <lcd_cmd>
	} 
	HAL_Delay(2);
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f000 fe32 	bl	8001ae8 <HAL_Delay>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	603a      	str	r2, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000e9c:	79ba      	ldrb	r2, [r7, #6]
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ffd0 	bl	8000e48 <lcd_gotoxy>
	lcd_out_cp(out_char);
 8000ea8:	6838      	ldr	r0, [r7, #0]
 8000eaa:	f7ff ff77 	bl	8000d9c <lcd_out_cp>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <lcd_clear>:
void lcd_clear(void) {
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
    
	lcd_cmd(_CLEAR);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f7ff fdfe 	bl	8000abc <lcd_cmd>
    HAL_Delay(5);
 8000ec0:	2005      	movs	r0, #5
 8000ec2:	f000 fe11 	bl	8001ae8 <HAL_Delay>
    
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 fda8 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 faa4 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 fba0 	bl	800161c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000edc:	f000 fae6 	bl	80014ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff ff71 	bl	8000dcc <lcd_init>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	48af      	ldr	r0, [pc, #700]	; (80011ac <main+0x2e0>)
 8000eee:	f001 fd47 	bl	8002980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	48ad      	ldr	r0, [pc, #692]	; (80011ac <main+0x2e0>)
 8000ef6:	f001 fd43 	bl	8002980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000efa:	2108      	movs	r1, #8
 8000efc:	48ab      	ldr	r0, [pc, #684]	; (80011ac <main+0x2e0>)
 8000efe:	f001 fd3f 	bl	8002980 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,parlaklik1);
 8000f02:	4bab      	ldr	r3, [pc, #684]	; (80011b0 <main+0x2e4>)
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	4ba9      	ldr	r3, [pc, #676]	; (80011ac <main+0x2e0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,parlaklik2);
 8000f0c:	4ba9      	ldr	r3, [pc, #676]	; (80011b4 <main+0x2e8>)
 8000f0e:	881a      	ldrh	r2, [r3, #0]
 8000f10:	4ba6      	ldr	r3, [pc, #664]	; (80011ac <main+0x2e0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,parlaklik3);
 8000f16:	4ba8      	ldr	r3, [pc, #672]	; (80011b8 <main+0x2ec>)
 8000f18:	881a      	ldrh	r2, [r3, #0]
 8000f1a:	4ba4      	ldr	r3, [pc, #656]	; (80011ac <main+0x2e0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	63da      	str	r2, [r3, #60]	; 0x3c
	  //AYARLAR
	  HAL_GPIO_WritePin(GPIOA, MENULED_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f26:	48a5      	ldr	r0, [pc, #660]	; (80011bc <main+0x2f0>)
 8000f28:	f001 f881 	bl	800202e <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000f2c:	20c8      	movs	r0, #200	; 0xc8
 8000f2e:	f000 fddb 	bl	8001ae8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, MENULED_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f38:	48a0      	ldr	r0, [pc, #640]	; (80011bc <main+0x2f0>)
 8000f3a:	f001 f878 	bl	800202e <HAL_GPIO_WritePin>
	  lcd_clear();
 8000f3e:	f7ff ffba 	bl	8000eb6 <lcd_clear>
	  lcd_print(1,1,"      MENU");
 8000f42:	4a9f      	ldr	r2, [pc, #636]	; (80011c0 <main+0x2f4>)
 8000f44:	2101      	movs	r1, #1
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff ffa0 	bl	8000e8c <lcd_print>
	  HAL_Delay(500);
 8000f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f50:	f000 fdca 	bl	8001ae8 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB, buton2_Pin))
 8000f54:	2110      	movs	r1, #16
 8000f56:	489b      	ldr	r0, [pc, #620]	; (80011c4 <main+0x2f8>)
 8000f58:	f001 f852 	bl	8002000 <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 823f 	beq.w	80013e2 <main+0x516>
	  {
		          HAL_Delay(200);
 8000f64:	20c8      	movs	r0, #200	; 0xc8
 8000f66:	f000 fdbf 	bl	8001ae8 <HAL_Delay>
		          sayac1=1;
 8000f6a:	4b97      	ldr	r3, [pc, #604]	; (80011c8 <main+0x2fc>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	801a      	strh	r2, [r3, #0]


	  }

	           while(sayac1==1)
 8000f70:	e237      	b.n	80013e2 <main+0x516>
	           {

		          lcd_clear();
 8000f72:	f7ff ffa0 	bl	8000eb6 <lcd_clear>
		  		  lcd_print(1,1, "    AYARLAR");
 8000f76:	4a95      	ldr	r2, [pc, #596]	; (80011cc <main+0x300>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff ff86 	bl	8000e8c <lcd_print>
		  		  lcd_print(2,1, " LED1 LED2 LED3 ");
 8000f80:	4a93      	ldr	r2, [pc, #588]	; (80011d0 <main+0x304>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff ff81 	bl	8000e8c <lcd_print>
                  HAL_Delay(500);
 8000f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8e:	f000 fdab 	bl	8001ae8 <HAL_Delay>
                  if(HAL_GPIO_ReadPin(GPIOB, buton2_Pin))
 8000f92:	2110      	movs	r1, #16
 8000f94:	488b      	ldr	r0, [pc, #556]	; (80011c4 <main+0x2f8>)
 8000f96:	f001 f833 	bl	8002000 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <main+0xe0>
                  	  {
                  		          HAL_Delay(200);
 8000fa0:	20c8      	movs	r0, #200	; 0xc8
 8000fa2:	f000 fda1 	bl	8001ae8 <HAL_Delay>
                  		          sayac1=0;
 8000fa6:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <main+0x2fc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	801a      	strh	r2, [r3, #0]
                  	  }

		  		if(HAL_GPIO_ReadPin(GPIOB, buton3_Pin))
 8000fac:	2120      	movs	r1, #32
 8000fae:	4885      	ldr	r0, [pc, #532]	; (80011c4 <main+0x2f8>)
 8000fb0:	f001 f826 	bl	8002000 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <main+0x100>
		  			  {
		  				     HAL_Delay(200);
 8000fba:	20c8      	movs	r0, #200	; 0xc8
 8000fbc:	f000 fd94 	bl	8001ae8 <HAL_Delay>
		  				     sayac2++;
 8000fc0:	4b84      	ldr	r3, [pc, #528]	; (80011d4 <main+0x308>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b82      	ldr	r3, [pc, #520]	; (80011d4 <main+0x308>)
 8000fca:	801a      	strh	r2, [r3, #0]
		  			  }

		  		if(HAL_GPIO_ReadPin(GPIOB, buton1_Pin))
 8000fcc:	2108      	movs	r1, #8
 8000fce:	487d      	ldr	r0, [pc, #500]	; (80011c4 <main+0x2f8>)
 8000fd0:	f001 f816 	bl	8002000 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80a0 	beq.w	800111c <main+0x250>
		  			  {
		  				  	 HAL_Delay(200);
 8000fdc:	20c8      	movs	r0, #200	; 0xc8
 8000fde:	f000 fd83 	bl	8001ae8 <HAL_Delay>
		  				  	 sayac2--;
 8000fe2:	4b7c      	ldr	r3, [pc, #496]	; (80011d4 <main+0x308>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b7a      	ldr	r3, [pc, #488]	; (80011d4 <main+0x308>)
 8000fec:	801a      	strh	r2, [r3, #0]
		  			  }


		  		 while(sayac2 == 1)
 8000fee:	e095      	b.n	800111c <main+0x250>
		  		 {
		  					  		if(HAL_GPIO_ReadPin(GPIOB, buton3_Pin))
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	4874      	ldr	r0, [pc, #464]	; (80011c4 <main+0x2f8>)
 8000ff4:	f001 f804 	bl	8002000 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d008      	beq.n	8001010 <main+0x144>
		  					  			  {
		  					  				     HAL_Delay(200);
 8000ffe:	20c8      	movs	r0, #200	; 0xc8
 8001000:	f000 fd72 	bl	8001ae8 <HAL_Delay>
		  					  				     sayac2++;
 8001004:	4b73      	ldr	r3, [pc, #460]	; (80011d4 <main+0x308>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b71      	ldr	r3, [pc, #452]	; (80011d4 <main+0x308>)
 800100e:	801a      	strh	r2, [r3, #0]
		  					  			  }

		  					  		if(HAL_GPIO_ReadPin(GPIOB, buton1_Pin))
 8001010:	2108      	movs	r1, #8
 8001012:	486c      	ldr	r0, [pc, #432]	; (80011c4 <main+0x2f8>)
 8001014:	f000 fff4 	bl	8002000 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d008      	beq.n	8001030 <main+0x164>
		  					  			  {
		  					  				  	 HAL_Delay(200);
 800101e:	20c8      	movs	r0, #200	; 0xc8
 8001020:	f000 fd62 	bl	8001ae8 <HAL_Delay>
		  					  				  	 sayac2--;
 8001024:	4b6b      	ldr	r3, [pc, #428]	; (80011d4 <main+0x308>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <main+0x308>)
 800102e:	801a      	strh	r2, [r3, #0]
		  					  			  }

		  			  HAL_Delay(200);
 8001030:	20c8      	movs	r0, #200	; 0xc8
 8001032:	f000 fd59 	bl	8001ae8 <HAL_Delay>
		  			  lcd_clear();
 8001036:	f7ff ff3e 	bl	8000eb6 <lcd_clear>
		  			  lcd_print(1,1, "    AYARLAR");
 800103a:	4a64      	ldr	r2, [pc, #400]	; (80011cc <main+0x300>)
 800103c:	2101      	movs	r1, #1
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff ff24 	bl	8000e8c <lcd_print>
		  			  lcd_print(2,1, "     >LED1< ");
 8001044:	4a64      	ldr	r2, [pc, #400]	; (80011d8 <main+0x30c>)
 8001046:	2101      	movs	r1, #1
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff ff1f 	bl	8000e8c <lcd_print>
		  			  HAL_Delay(500);
 800104e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001052:	f000 fd49 	bl	8001ae8 <HAL_Delay>
		  			  if(HAL_GPIO_ReadPin(GPIOB, buton2_Pin))
 8001056:	2110      	movs	r1, #16
 8001058:	485a      	ldr	r0, [pc, #360]	; (80011c4 <main+0x2f8>)
 800105a:	f000 ffd1 	bl	8002000 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d057      	beq.n	8001114 <main+0x248>
		  			  {
		  				HAL_Delay(250);
 8001064:	20fa      	movs	r0, #250	; 0xfa
 8001066:	f000 fd3f 	bl	8001ae8 <HAL_Delay>
		  				sayac3=1 ;
 800106a:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <main+0x310>)
 800106c:	2201      	movs	r2, #1
 800106e:	801a      	strh	r2, [r3, #0]
		  			  }

		  			  while(sayac3 ==1 )
 8001070:	e050      	b.n	8001114 <main+0x248>
		  			  {
		  				if(HAL_GPIO_ReadPin(GPIOB, buton3_Pin))
 8001072:	2120      	movs	r1, #32
 8001074:	4853      	ldr	r0, [pc, #332]	; (80011c4 <main+0x2f8>)
 8001076:	f000 ffc3 	bl	8002000 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00d      	beq.n	800109c <main+0x1d0>
		  						  			  {
                         HAL_Delay(200);
 8001080:	20c8      	movs	r0, #200	; 0xc8
 8001082:	f000 fd31 	bl	8001ae8 <HAL_Delay>
                          parlaklik1++;
 8001086:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <main+0x2e4>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b48      	ldr	r3, [pc, #288]	; (80011b0 <main+0x2e4>)
 8001090:	801a      	strh	r2, [r3, #0]
                          __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,parlaklik1);
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <main+0x2e4>)
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	4b45      	ldr	r3, [pc, #276]	; (80011ac <main+0x2e0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
		  						  			  }

		  						  		if(HAL_GPIO_ReadPin(GPIOB, buton1_Pin))
 800109c:	2108      	movs	r1, #8
 800109e:	4849      	ldr	r0, [pc, #292]	; (80011c4 <main+0x2f8>)
 80010a0:	f000 ffae 	bl	8002000 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00d      	beq.n	80010c6 <main+0x1fa>
		  						  				  			  {
		  						  				  				HAL_Delay(200);
 80010aa:	20c8      	movs	r0, #200	; 0xc8
 80010ac:	f000 fd1c 	bl	8001ae8 <HAL_Delay>
		  						  				  				parlaklik1--;
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <main+0x2e4>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <main+0x2e4>)
 80010ba:	801a      	strh	r2, [r3, #0]
		  						  				  			    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,parlaklik1);
 80010bc:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <main+0x2e4>)
 80010be:	881a      	ldrh	r2, [r3, #0]
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <main+0x2e0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
		  						  				  			  }
		  						  	if(HAL_GPIO_ReadPin(GPIOB, buton2_Pin))
 80010c6:	2110      	movs	r1, #16
 80010c8:	483e      	ldr	r0, [pc, #248]	; (80011c4 <main+0x2f8>)
 80010ca:	f000 ff99 	bl	8002000 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <main+0x21a>
		  						  			  			  {
		  						  			  				HAL_Delay(250);
 80010d4:	20fa      	movs	r0, #250	; 0xfa
 80010d6:	f000 fd07 	bl	8001ae8 <HAL_Delay>
		  						  			  				sayac3=0;
 80010da:	4b40      	ldr	r3, [pc, #256]	; (80011dc <main+0x310>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
		  						  			  				sayac2=0;
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <main+0x308>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]
		  						  			  			  }

		  						  		  					  sprintf(line1,"SET= %d",parlaklik1);
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <main+0x2e4>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	493c      	ldr	r1, [pc, #240]	; (80011e0 <main+0x314>)
 80010ee:	483d      	ldr	r0, [pc, #244]	; (80011e4 <main+0x318>)
 80010f0:	f002 fe50 	bl	8003d94 <siprintf>
		  						  		  					  lcd_clear();
 80010f4:	f7ff fedf 	bl	8000eb6 <lcd_clear>
		  						  		  					  lcd_print(1,1,line1);
 80010f8:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <main+0x318>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fec5 	bl	8000e8c <lcd_print>
		  						  		  					  lcd_print(2,1,"     P W M");
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <main+0x31c>)
 8001104:	2101      	movs	r1, #1
 8001106:	2002      	movs	r0, #2
 8001108:	f7ff fec0 	bl	8000e8c <lcd_print>
                                                              HAL_Delay(500);
 800110c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001110:	f000 fcea 	bl	8001ae8 <HAL_Delay>
		  			  while(sayac3 ==1 )
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <main+0x310>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d0aa      	beq.n	8001072 <main+0x1a6>
		  		 while(sayac2 == 1)
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <main+0x308>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	f43f af65 	beq.w	8000ff0 <main+0x124>
		  			  }
		  		    }
		  		while(sayac2 == 2)
 8001126:	e0b8      	b.n	800129a <main+0x3ce>
		  				  		 {
		  					  		if(HAL_GPIO_ReadPin(GPIOB, buton3_Pin))
 8001128:	2120      	movs	r1, #32
 800112a:	4826      	ldr	r0, [pc, #152]	; (80011c4 <main+0x2f8>)
 800112c:	f000 ff68 	bl	8002000 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <main+0x27c>
		  					  			  {
		  					  				     HAL_Delay(200);
 8001136:	20c8      	movs	r0, #200	; 0xc8
 8001138:	f000 fcd6 	bl	8001ae8 <HAL_Delay>
		  					  				     sayac2++;
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <main+0x308>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <main+0x308>)
 8001146:	801a      	strh	r2, [r3, #0]
		  					  			  }

		  					  		if(HAL_GPIO_ReadPin(GPIOB, buton1_Pin))
 8001148:	2108      	movs	r1, #8
 800114a:	481e      	ldr	r0, [pc, #120]	; (80011c4 <main+0x2f8>)
 800114c:	f000 ff58 	bl	8002000 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d008      	beq.n	8001168 <main+0x29c>
		  					  			  {
		  					  				  	 HAL_Delay(200);
 8001156:	20c8      	movs	r0, #200	; 0xc8
 8001158:	f000 fcc6 	bl	8001ae8 <HAL_Delay>
		  					  				  	 sayac2--;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <main+0x308>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <main+0x308>)
 8001166:	801a      	strh	r2, [r3, #0]
		  					  			  }

		  			                  HAL_Delay(200);
 8001168:	20c8      	movs	r0, #200	; 0xc8
 800116a:	f000 fcbd 	bl	8001ae8 <HAL_Delay>
		  				  			  lcd_clear();
 800116e:	f7ff fea2 	bl	8000eb6 <lcd_clear>
		  				  			  lcd_print(1,1, "    AYARLAR");
 8001172:	4a16      	ldr	r2, [pc, #88]	; (80011cc <main+0x300>)
 8001174:	2101      	movs	r1, #1
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff fe88 	bl	8000e8c <lcd_print>
		  				  			  lcd_print(2,1, "     >LED2< ");
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <main+0x320>)
 800117e:	2101      	movs	r1, #1
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff fe83 	bl	8000e8c <lcd_print>
		  				  			  HAL_Delay(500);
 8001186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118a:	f000 fcad 	bl	8001ae8 <HAL_Delay>
		  				  			  if(HAL_GPIO_ReadPin(GPIOB, buton2_Pin))
 800118e:	2110      	movs	r1, #16
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <main+0x2f8>)
 8001192:	f000 ff35 	bl	8002000 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d07a      	beq.n	8001292 <main+0x3c6>
		  				  			  {
		  				  				HAL_Delay(250);
 800119c:	20fa      	movs	r0, #250	; 0xfa
 800119e:	f000 fca3 	bl	8001ae8 <HAL_Delay>
		  				  				sayac3=1 ;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <main+0x310>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	801a      	strh	r2, [r3, #0]
		  				  			  }

		  				  			  while(sayac3 ==1 )
 80011a8:	e073      	b.n	8001292 <main+0x3c6>
 80011aa:	bf00      	nop
 80011ac:	20000218 	.word	0x20000218
 80011b0:	20000260 	.word	0x20000260
 80011b4:	20000262 	.word	0x20000262
 80011b8:	20000264 	.word	0x20000264
 80011bc:	40010800 	.word	0x40010800
 80011c0:	080062a0 	.word	0x080062a0
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	20000266 	.word	0x20000266
 80011cc:	080062ac 	.word	0x080062ac
 80011d0:	080062b8 	.word	0x080062b8
 80011d4:	20000268 	.word	0x20000268
 80011d8:	080062cc 	.word	0x080062cc
 80011dc:	2000026a 	.word	0x2000026a
 80011e0:	080062dc 	.word	0x080062dc
 80011e4:	200001f8 	.word	0x200001f8
 80011e8:	080062e4 	.word	0x080062e4
 80011ec:	080062f0 	.word	0x080062f0
		  				  			  {
		  				  				if(HAL_GPIO_ReadPin(GPIOB, buton3_Pin))
 80011f0:	2120      	movs	r1, #32
 80011f2:	487f      	ldr	r0, [pc, #508]	; (80013f0 <main+0x524>)
 80011f4:	f000 ff04 	bl	8002000 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00d      	beq.n	800121a <main+0x34e>
		  				  						  			  {
		  		                         HAL_Delay(200);
 80011fe:	20c8      	movs	r0, #200	; 0xc8
 8001200:	f000 fc72 	bl	8001ae8 <HAL_Delay>
		  		                          parlaklik2++;
 8001204:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <main+0x528>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b79      	ldr	r3, [pc, #484]	; (80013f4 <main+0x528>)
 800120e:	801a      	strh	r2, [r3, #0]
		  		                          __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,parlaklik2);
 8001210:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <main+0x528>)
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	4b78      	ldr	r3, [pc, #480]	; (80013f8 <main+0x52c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	639a      	str	r2, [r3, #56]	; 0x38
		  				  						  			  }

		  				  						  		if(HAL_GPIO_ReadPin(GPIOB, buton1_Pin))
 800121a:	2108      	movs	r1, #8
 800121c:	4874      	ldr	r0, [pc, #464]	; (80013f0 <main+0x524>)
 800121e:	f000 feef 	bl	8002000 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00d      	beq.n	8001244 <main+0x378>
		  				  						  				  			  {
		  				  						  				  				HAL_Delay(200);
 8001228:	20c8      	movs	r0, #200	; 0xc8
 800122a:	f000 fc5d 	bl	8001ae8 <HAL_Delay>
		  				  						  				  				parlaklik2--;
 800122e:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <main+0x528>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <main+0x528>)
 8001238:	801a      	strh	r2, [r3, #0]
		  				  						  				  			    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,parlaklik2);
 800123a:	4b6e      	ldr	r3, [pc, #440]	; (80013f4 <main+0x528>)
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	4b6e      	ldr	r3, [pc, #440]	; (80013f8 <main+0x52c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
		  				  						  				  			  }
		  				  						  	if(HAL_GPIO_ReadPin(GPIOB, buton2_Pin))
 8001244:	2110      	movs	r1, #16
 8001246:	486a      	ldr	r0, [pc, #424]	; (80013f0 <main+0x524>)
 8001248:	f000 feda 	bl	8002000 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <main+0x398>
		  				  						  			  			  {
		  				  						  			  				HAL_Delay(250);
 8001252:	20fa      	movs	r0, #250	; 0xfa
 8001254:	f000 fc48 	bl	8001ae8 <HAL_Delay>
		  				  						  			  				sayac3=0;
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <main+0x530>)
 800125a:	2200      	movs	r2, #0
 800125c:	801a      	strh	r2, [r3, #0]
		  				  						  			  				sayac2=0;
 800125e:	4b68      	ldr	r3, [pc, #416]	; (8001400 <main+0x534>)
 8001260:	2200      	movs	r2, #0
 8001262:	801a      	strh	r2, [r3, #0]
		  				  						  			  			  }

		  				  						  		  					  sprintf(line1,"SET= %d",parlaklik2);
 8001264:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <main+0x528>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4966      	ldr	r1, [pc, #408]	; (8001404 <main+0x538>)
 800126c:	4866      	ldr	r0, [pc, #408]	; (8001408 <main+0x53c>)
 800126e:	f002 fd91 	bl	8003d94 <siprintf>
		  				  						  		  					  lcd_clear();
 8001272:	f7ff fe20 	bl	8000eb6 <lcd_clear>
		  				  						  		  					  lcd_print(1,1,line1);
 8001276:	4a64      	ldr	r2, [pc, #400]	; (8001408 <main+0x53c>)
 8001278:	2101      	movs	r1, #1
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff fe06 	bl	8000e8c <lcd_print>
		  				  						  		  					  lcd_print(2,1,"     P W M");
 8001280:	4a62      	ldr	r2, [pc, #392]	; (800140c <main+0x540>)
 8001282:	2101      	movs	r1, #1
 8001284:	2002      	movs	r0, #2
 8001286:	f7ff fe01 	bl	8000e8c <lcd_print>
		  		                                                              HAL_Delay(500);
 800128a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128e:	f000 fc2b 	bl	8001ae8 <HAL_Delay>
		  				  			  while(sayac3 ==1 )
 8001292:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <main+0x530>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d0aa      	beq.n	80011f0 <main+0x324>
		  		while(sayac2 == 2)
 800129a:	4b59      	ldr	r3, [pc, #356]	; (8001400 <main+0x534>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	f43f af42 	beq.w	8001128 <main+0x25c>
		  				  			  }
		  				  		 }
		  		while(sayac2 == 3)
 80012a4:	e098      	b.n	80013d8 <main+0x50c>
		  				  				  		 {
		  					  		if(HAL_GPIO_ReadPin(GPIOB, buton3_Pin))
 80012a6:	2120      	movs	r1, #32
 80012a8:	4851      	ldr	r0, [pc, #324]	; (80013f0 <main+0x524>)
 80012aa:	f000 fea9 	bl	8002000 <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <main+0x3fa>
		  					  			  {
		  					  				     HAL_Delay(200);
 80012b4:	20c8      	movs	r0, #200	; 0xc8
 80012b6:	f000 fc17 	bl	8001ae8 <HAL_Delay>
		  					  				     sayac2++;
 80012ba:	4b51      	ldr	r3, [pc, #324]	; (8001400 <main+0x534>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <main+0x534>)
 80012c4:	801a      	strh	r2, [r3, #0]
		  					  			  }

		  					  		if(HAL_GPIO_ReadPin(GPIOB, buton1_Pin))
 80012c6:	2108      	movs	r1, #8
 80012c8:	4849      	ldr	r0, [pc, #292]	; (80013f0 <main+0x524>)
 80012ca:	f000 fe99 	bl	8002000 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <main+0x41a>
		  					  			  {
		  					  				  	 HAL_Delay(200);
 80012d4:	20c8      	movs	r0, #200	; 0xc8
 80012d6:	f000 fc07 	bl	8001ae8 <HAL_Delay>
		  					  				  	 sayac2--;
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <main+0x534>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	3b01      	subs	r3, #1
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <main+0x534>)
 80012e4:	801a      	strh	r2, [r3, #0]
		  					  			  }

		  			                                  HAL_Delay(200);
 80012e6:	20c8      	movs	r0, #200	; 0xc8
 80012e8:	f000 fbfe 	bl	8001ae8 <HAL_Delay>
		  				  				  			  lcd_clear();
 80012ec:	f7ff fde3 	bl	8000eb6 <lcd_clear>
		  				  				  			  lcd_print(1,1, "    AYARLAR");
 80012f0:	4a47      	ldr	r2, [pc, #284]	; (8001410 <main+0x544>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff fdc9 	bl	8000e8c <lcd_print>
		  				  				  			  lcd_print(2,1, "     >LED3< ");
 80012fa:	4a46      	ldr	r2, [pc, #280]	; (8001414 <main+0x548>)
 80012fc:	2101      	movs	r1, #1
 80012fe:	2002      	movs	r0, #2
 8001300:	f7ff fdc4 	bl	8000e8c <lcd_print>
		  				  				  			  HAL_Delay(500);
 8001304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001308:	f000 fbee 	bl	8001ae8 <HAL_Delay>
		  				  				  			  if(HAL_GPIO_ReadPin(GPIOB, buton2_Pin))
 800130c:	2110      	movs	r1, #16
 800130e:	4838      	ldr	r0, [pc, #224]	; (80013f0 <main+0x524>)
 8001310:	f000 fe76 	bl	8002000 <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d05a      	beq.n	80013d0 <main+0x504>
		  				  				  			  {
		  				  				  				HAL_Delay(250);
 800131a:	20fa      	movs	r0, #250	; 0xfa
 800131c:	f000 fbe4 	bl	8001ae8 <HAL_Delay>
		  				  				  				sayac3=1 ;
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <main+0x530>)
 8001322:	2201      	movs	r2, #1
 8001324:	801a      	strh	r2, [r3, #0]
		  				  				  			  }

		  				  				  			  while(sayac3 ==1 )
 8001326:	e053      	b.n	80013d0 <main+0x504>
		  				  				  			  {
		  				  				  				if(HAL_GPIO_ReadPin(GPIOB, buton3_Pin))
 8001328:	2120      	movs	r1, #32
 800132a:	4831      	ldr	r0, [pc, #196]	; (80013f0 <main+0x524>)
 800132c:	f000 fe68 	bl	8002000 <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00d      	beq.n	8001352 <main+0x486>
		  				  				  						  			  {
		  				  		                         HAL_Delay(200);
 8001336:	20c8      	movs	r0, #200	; 0xc8
 8001338:	f000 fbd6 	bl	8001ae8 <HAL_Delay>
		  				  		                          parlaklik3++;
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <main+0x54c>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <main+0x54c>)
 8001346:	801a      	strh	r2, [r3, #0]
		  				  		                          __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,parlaklik3);
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <main+0x54c>)
 800134a:	881a      	ldrh	r2, [r3, #0]
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <main+0x52c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	63da      	str	r2, [r3, #60]	; 0x3c
		  				  				  						  			  }

		  				  				  						  		if(HAL_GPIO_ReadPin(GPIOB, buton1_Pin))
 8001352:	2108      	movs	r1, #8
 8001354:	4826      	ldr	r0, [pc, #152]	; (80013f0 <main+0x524>)
 8001356:	f000 fe53 	bl	8002000 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00d      	beq.n	800137c <main+0x4b0>
		  				  				  						  				  			  {
		  				  				  						  				  				HAL_Delay(200);
 8001360:	20c8      	movs	r0, #200	; 0xc8
 8001362:	f000 fbc1 	bl	8001ae8 <HAL_Delay>
		  				  				  						  				  				parlaklik3--;
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <main+0x54c>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	3b01      	subs	r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <main+0x54c>)
 8001370:	801a      	strh	r2, [r3, #0]
		  				  				  						  				  			    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,parlaklik3);
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <main+0x54c>)
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <main+0x52c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
		  				  				  						  				  			  }
		  				  				  						  	if(HAL_GPIO_ReadPin(GPIOB, buton2_Pin))
 800137c:	2110      	movs	r1, #16
 800137e:	481c      	ldr	r0, [pc, #112]	; (80013f0 <main+0x524>)
 8001380:	f000 fe3e 	bl	8002000 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <main+0x4d0>
		  				  				  						  			  			  {
		  				  				  						  			  				HAL_Delay(250);
 800138a:	20fa      	movs	r0, #250	; 0xfa
 800138c:	f000 fbac 	bl	8001ae8 <HAL_Delay>
		  				  				  						  			  				sayac3=0;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <main+0x530>)
 8001392:	2200      	movs	r2, #0
 8001394:	801a      	strh	r2, [r3, #0]
		  				  				  						  			  				sayac2=0;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <main+0x534>)
 8001398:	2200      	movs	r2, #0
 800139a:	801a      	strh	r2, [r3, #0]
		  				  				  						  			  			  }
		  				  				  						  	                          sayac2=0;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <main+0x534>)
 800139e:	2200      	movs	r2, #0
 80013a0:	801a      	strh	r2, [r3, #0]
		  				  				  						  		  					  sprintf(line1,"SET= %d",parlaklik3);
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <main+0x54c>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4916      	ldr	r1, [pc, #88]	; (8001404 <main+0x538>)
 80013aa:	4817      	ldr	r0, [pc, #92]	; (8001408 <main+0x53c>)
 80013ac:	f002 fcf2 	bl	8003d94 <siprintf>
		  				  				  						  		  					  lcd_clear();
 80013b0:	f7ff fd81 	bl	8000eb6 <lcd_clear>
		  				  				  						  		  					  lcd_print(1,1,line1);
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <main+0x53c>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fd67 	bl	8000e8c <lcd_print>
		  				  				  						  		  					  lcd_print(2,1,"     P W M");
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <main+0x540>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	2002      	movs	r0, #2
 80013c4:	f7ff fd62 	bl	8000e8c <lcd_print>
		  				  		                                                              HAL_Delay(500);
 80013c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013cc:	f000 fb8c 	bl	8001ae8 <HAL_Delay>
		  				  				  			  while(sayac3 ==1 )
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <main+0x530>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d0a7      	beq.n	8001328 <main+0x45c>
		  		while(sayac2 == 3)
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <main+0x534>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	f43f af62 	beq.w	80012a6 <main+0x3da>
	           while(sayac1==1)
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <main+0x550>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	f43f adc3 	beq.w	8000f72 <main+0xa6>
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,parlaklik1);
 80013ec:	e589      	b.n	8000f02 <main+0x36>
 80013ee:	bf00      	nop
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	20000262 	.word	0x20000262
 80013f8:	20000218 	.word	0x20000218
 80013fc:	2000026a 	.word	0x2000026a
 8001400:	20000268 	.word	0x20000268
 8001404:	080062dc 	.word	0x080062dc
 8001408:	200001f8 	.word	0x200001f8
 800140c:	080062e4 	.word	0x080062e4
 8001410:	080062ac 	.word	0x080062ac
 8001414:	08006300 	.word	0x08006300
 8001418:	20000264 	.word	0x20000264
 800141c:	20000266 	.word	0x20000266

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	; 0x40
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	2228      	movs	r2, #40	; 0x28
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f002 f848 	bl	80034c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800145e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fdf9 	bl	8002060 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001474:	f000 f938 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2302      	movs	r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f001 f866 	bl	8002564 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800149e:	f000 f923 	bl	80016e8 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3740      	adds	r7, #64	; 0x40
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b096      	sub	sp, #88	; 0x58
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2220      	movs	r2, #32
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 ffed 	bl	80034c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ea:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <MX_TIM1_Init+0x168>)
 80014ec:	4a4a      	ldr	r2, [pc, #296]	; (8001618 <MX_TIM1_Init+0x16c>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 80014f0:	4b48      	ldr	r3, [pc, #288]	; (8001614 <MX_TIM1_Init+0x168>)
 80014f2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b46      	ldr	r3, [pc, #280]	; (8001614 <MX_TIM1_Init+0x168>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80014fe:	4b45      	ldr	r3, [pc, #276]	; (8001614 <MX_TIM1_Init+0x168>)
 8001500:	2263      	movs	r2, #99	; 0x63
 8001502:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <MX_TIM1_Init+0x168>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <MX_TIM1_Init+0x168>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <MX_TIM1_Init+0x168>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001516:	483f      	ldr	r0, [pc, #252]	; (8001614 <MX_TIM1_Init+0x168>)
 8001518:	f001 f98a 	bl	8002830 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001522:	f000 f8e1 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800152c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001530:	4619      	mov	r1, r3
 8001532:	4838      	ldr	r0, [pc, #224]	; (8001614 <MX_TIM1_Init+0x168>)
 8001534:	f001 fb84 	bl	8002c40 <HAL_TIM_ConfigClockSource>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800153e:	f000 f8d3 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001542:	4834      	ldr	r0, [pc, #208]	; (8001614 <MX_TIM1_Init+0x168>)
 8001544:	f001 f9c3 	bl	80028ce <HAL_TIM_PWM_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800154e:	f000 f8cb 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800155a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800155e:	4619      	mov	r1, r3
 8001560:	482c      	ldr	r0, [pc, #176]	; (8001614 <MX_TIM1_Init+0x168>)
 8001562:	f001 fed5 	bl	8003310 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800156c:	f000 f8bc 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001570:	2360      	movs	r3, #96	; 0x60
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	481f      	ldr	r0, [pc, #124]	; (8001614 <MX_TIM1_Init+0x168>)
 8001596:	f001 fa95 	bl	8002ac4 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015a0:	f000 f8a2 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	2204      	movs	r2, #4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4819      	ldr	r0, [pc, #100]	; (8001614 <MX_TIM1_Init+0x168>)
 80015ae:	f001 fa89 	bl	8002ac4 <HAL_TIM_PWM_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015b8:	f000 f896 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	2208      	movs	r2, #8
 80015c2:	4619      	mov	r1, r3
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <MX_TIM1_Init+0x168>)
 80015c6:	f001 fa7d 	bl	8002ac4 <HAL_TIM_PWM_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80015d0:	f000 f88a 	bl	80016e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <MX_TIM1_Init+0x168>)
 80015f8:	f001 fee8 	bl	80033cc <HAL_TIMEx_ConfigBreakDeadTime>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001602:	f000 f871 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <MX_TIM1_Init+0x168>)
 8001608:	f000 f8c4 	bl	8001794 <HAL_TIM_MspPostInit>

}
 800160c:	bf00      	nop
 800160e:	3758      	adds	r7, #88	; 0x58
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000218 	.word	0x20000218
 8001618:	40012c00 	.word	0x40012c00

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a29      	ldr	r2, [pc, #164]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <MX_GPIO_Init+0xc0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <MX_GPIO_Init+0xc0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a23      	ldr	r2, [pc, #140]	; (80016dc <MX_GPIO_Init+0xc0>)
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_GPIO_Init+0xc0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_GPIO_Init+0xc0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <MX_GPIO_Init+0xc0>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001690:	2200      	movs	r2, #0
 8001692:	f640 01f6 	movw	r1, #2294	; 0x8f6
 8001696:	4812      	ldr	r0, [pc, #72]	; (80016e0 <MX_GPIO_Init+0xc4>)
 8001698:	f000 fcc9 	bl	800202e <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|MENULED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin MENULED_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 800169c:	f640 03f6 	movw	r3, #2294	; 0x8f6
 80016a0:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin|MENULED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	480a      	ldr	r0, [pc, #40]	; (80016e0 <MX_GPIO_Init+0xc4>)
 80016b6:	f000 fb1f 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buton1_Pin buton2_Pin buton3_Pin */
  GPIO_InitStruct.Pin = buton1_Pin|buton2_Pin|buton3_Pin;
 80016ba:	2338      	movs	r3, #56	; 0x38
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_GPIO_Init+0xc8>)
 80016ce:	f000 fb13 	bl	8001cf8 <HAL_GPIO_Init>

}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010800 	.word	0x40010800
 80016e4:	40010c00 	.word	0x40010c00

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_MspInit+0x5c>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a14      	ldr	r2, [pc, #80]	; (8001750 <HAL_MspInit+0x5c>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_MspInit+0x5c>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_MspInit+0x5c>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_MspInit+0x5c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_MspInit+0x5c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_MspInit+0x60>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_MspInit+0x60>)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_TIM_Base_MspInit+0x34>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d10b      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_TIM_Base_MspInit+0x38>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_TIM_Base_MspInit+0x38>)
 8001770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001774:	6193      	str	r3, [r2, #24]
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_TIM_Base_MspInit+0x38>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40012c00 	.word	0x40012c00
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_TIM_MspPostInit+0x5c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d118      	bne.n	80017e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_TIM_MspPostInit+0x60>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_TIM_MspPostInit+0x60>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_TIM_MspPostInit+0x60>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 80017cc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_TIM_MspPostInit+0x64>)
 80017e2:	f000 fa89 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012c00 	.word	0x40012c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010800 	.word	0x40010800

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f935 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}

0800184a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <_kill>:

int _kill(int pid, int sig)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001862:	f001 fe05 	bl	8003470 <__errno>
 8001866:	4603      	mov	r3, r0
 8001868:	2216      	movs	r2, #22
 800186a:	601a      	str	r2, [r3, #0]
  return -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_exit>:

void _exit (int status)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ffe7 	bl	8001858 <_kill>
  while (1) {}    /* Make sure we hang here */
 800188a:	e7fe      	b.n	800188a <_exit+0x12>

0800188c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e00a      	b.n	80018b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189e:	f3af 8000 	nop.w
 80018a2:	4601      	mov	r1, r0
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60ba      	str	r2, [r7, #8]
 80018aa:	b2ca      	uxtb	r2, r1
 80018ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbf0      	blt.n	800189e <_read+0x12>
  }

  return len;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	e009      	b.n	80018ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbf1      	blt.n	80018d8 <_write+0x12>
  }
  return len;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_close>:

int _close(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001924:	605a      	str	r2, [r3, #4]
  return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <_isatty>:

int _isatty(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
	...

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f001 fd6e 	bl	8003470 <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20005000 	.word	0x20005000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	2000026c 	.word	0x2000026c
 80019c8:	20000288 	.word	0x20000288

080019cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019da:	490d      	ldr	r1, [pc, #52]	; (8001a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f0:	4c0a      	ldr	r4, [pc, #40]	; (8001a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019fe:	f7ff ffe5 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f001 fd3b 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a06:	f7ff fa61 	bl	8000ecc <main>
  bx lr
 8001a0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a14:	08006714 	.word	0x08006714
  ldr r2, =_sbss
 8001a18:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a1c:	20000284 	.word	0x20000284

08001a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC1_2_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_Init+0x28>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_Init+0x28>)
 8001a2e:	f043 0310 	orr.w	r3, r3, #16
 8001a32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f92b 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	200f      	movs	r0, #15
 8001a3c:	f000 f808 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff fe58 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f935 	bl	8001cde <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f90b 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_IncTick+0x1c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x20>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20000270 	.word	0x20000270

08001ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <HAL_GetTick+0x10>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000270 	.word	0x20000270

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffe0 	bl	8001ad4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff90 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff49 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff5e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff90 	bl	8001be8 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5f 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffb0 	bl	8001c4c <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	e169      	b.n	8001fe0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8158 	bne.w	8001fda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a9a      	ldr	r2, [pc, #616]	; (8001f98 <HAL_GPIO_Init+0x2a0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d05e      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d34:	4a98      	ldr	r2, [pc, #608]	; (8001f98 <HAL_GPIO_Init+0x2a0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d875      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d3a:	4a98      	ldr	r2, [pc, #608]	; (8001f9c <HAL_GPIO_Init+0x2a4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d058      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d40:	4a96      	ldr	r2, [pc, #600]	; (8001f9c <HAL_GPIO_Init+0x2a4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d86f      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d46:	4a96      	ldr	r2, [pc, #600]	; (8001fa0 <HAL_GPIO_Init+0x2a8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d052      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d4c:	4a94      	ldr	r2, [pc, #592]	; (8001fa0 <HAL_GPIO_Init+0x2a8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d869      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d52:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <HAL_GPIO_Init+0x2ac>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d04c      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d58:	4a92      	ldr	r2, [pc, #584]	; (8001fa4 <HAL_GPIO_Init+0x2ac>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d863      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d5e:	4a92      	ldr	r2, [pc, #584]	; (8001fa8 <HAL_GPIO_Init+0x2b0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d046      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d64:	4a90      	ldr	r2, [pc, #576]	; (8001fa8 <HAL_GPIO_Init+0x2b0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d85d      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d82a      	bhi.n	8001dc4 <HAL_GPIO_Init+0xcc>
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d859      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <HAL_GPIO_Init+0x80>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001df3 	.word	0x08001df3
 8001d7c:	08001dcd 	.word	0x08001dcd
 8001d80:	08001ddf 	.word	0x08001ddf
 8001d84:	08001e21 	.word	0x08001e21
 8001d88:	08001e27 	.word	0x08001e27
 8001d8c:	08001e27 	.word	0x08001e27
 8001d90:	08001e27 	.word	0x08001e27
 8001d94:	08001e27 	.word	0x08001e27
 8001d98:	08001e27 	.word	0x08001e27
 8001d9c:	08001e27 	.word	0x08001e27
 8001da0:	08001e27 	.word	0x08001e27
 8001da4:	08001e27 	.word	0x08001e27
 8001da8:	08001e27 	.word	0x08001e27
 8001dac:	08001e27 	.word	0x08001e27
 8001db0:	08001e27 	.word	0x08001e27
 8001db4:	08001e27 	.word	0x08001e27
 8001db8:	08001e27 	.word	0x08001e27
 8001dbc:	08001dd5 	.word	0x08001dd5
 8001dc0:	08001de9 	.word	0x08001de9
 8001dc4:	4a79      	ldr	r2, [pc, #484]	; (8001fac <HAL_GPIO_Init+0x2b4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dca:	e02c      	b.n	8001e26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	623b      	str	r3, [r7, #32]
          break;
 8001dd2:	e029      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e024      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	3308      	adds	r3, #8
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e01f      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	330c      	adds	r3, #12
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e01a      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e013      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	611a      	str	r2, [r3, #16]
          break;
 8001e12:	e009      	b.n	8001e28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e14:	2308      	movs	r3, #8
 8001e16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	615a      	str	r2, [r3, #20]
          break;
 8001e1e:	e003      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          break;
 8001e26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d801      	bhi.n	8001e32 <HAL_GPIO_Init+0x13a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	e001      	b.n	8001e36 <HAL_GPIO_Init+0x13e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d802      	bhi.n	8001e44 <HAL_GPIO_Init+0x14c>
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	e002      	b.n	8001e4a <HAL_GPIO_Init+0x152>
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	3b08      	subs	r3, #8
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	210f      	movs	r1, #15
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	6a39      	ldr	r1, [r7, #32]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	431a      	orrs	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80b1 	beq.w	8001fda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e78:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <HAL_GPIO_Init+0x2b8>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x2b8>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_GPIO_Init+0x2b8>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e90:	4a48      	ldr	r2, [pc, #288]	; (8001fb4 <HAL_GPIO_Init+0x2bc>)
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a40      	ldr	r2, [pc, #256]	; (8001fb8 <HAL_GPIO_Init+0x2c0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <HAL_GPIO_Init+0x1ec>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3f      	ldr	r2, [pc, #252]	; (8001fbc <HAL_GPIO_Init+0x2c4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_GPIO_Init+0x1e8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0x1e4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3d      	ldr	r2, [pc, #244]	; (8001fc4 <HAL_GPIO_Init+0x2cc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_GPIO_Init+0x1e0>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001ed8:	2304      	movs	r3, #4
 8001eda:	e004      	b.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	f002 0203 	and.w	r2, r2, #3
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	4093      	lsls	r3, r2
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef6:	492f      	ldr	r1, [pc, #188]	; (8001fb4 <HAL_GPIO_Init+0x2bc>)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	492c      	ldr	r1, [pc, #176]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4928      	ldr	r1, [pc, #160]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f38:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	491e      	ldr	r1, [pc, #120]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4918      	ldr	r1, [pc, #96]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4914      	ldr	r1, [pc, #80]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d021      	beq.n	8001fcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
 8001f94:	e021      	b.n	8001fda <HAL_GPIO_Init+0x2e2>
 8001f96:	bf00      	nop
 8001f98:	10320000 	.word	0x10320000
 8001f9c:	10310000 	.word	0x10310000
 8001fa0:	10220000 	.word	0x10220000
 8001fa4:	10210000 	.word	0x10210000
 8001fa8:	10120000 	.word	0x10120000
 8001fac:	10110000 	.word	0x10110000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	40010c00 	.word	0x40010c00
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40011400 	.word	0x40011400
 8001fc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_GPIO_Init+0x304>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4909      	ldr	r1, [pc, #36]	; (8001ffc <HAL_GPIO_Init+0x304>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3301      	adds	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f47f ae8e 	bne.w	8001d0c <HAL_GPIO_Init+0x14>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	372c      	adds	r7, #44	; 0x2c
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	807b      	strh	r3, [r7, #2]
 800203a:	4613      	mov	r3, r2
 800203c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203e:	787b      	ldrb	r3, [r7, #1]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002044:	887a      	ldrh	r2, [r7, #2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800204a:	e003      	b.n	8002054 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800204c:	887b      	ldrh	r3, [r7, #2]
 800204e:	041a      	lsls	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
	...

08002060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e272      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8087 	beq.w	800218e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002080:	4b92      	ldr	r3, [pc, #584]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b04      	cmp	r3, #4
 800208a:	d00c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800208c:	4b8f      	ldr	r3, [pc, #572]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	d112      	bne.n	80020be <HAL_RCC_OscConfig+0x5e>
 8002098:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d10b      	bne.n	80020be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a6:	4b89      	ldr	r3, [pc, #548]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d06c      	beq.n	800218c <HAL_RCC_OscConfig+0x12c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d168      	bne.n	800218c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e24c      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x76>
 80020c8:	4b80      	ldr	r3, [pc, #512]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a7f      	ldr	r2, [pc, #508]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e02e      	b.n	8002134 <HAL_RCC_OscConfig+0xd4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x98>
 80020de:	4b7b      	ldr	r3, [pc, #492]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7a      	ldr	r2, [pc, #488]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b78      	ldr	r3, [pc, #480]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a77      	ldr	r2, [pc, #476]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e01d      	b.n	8002134 <HAL_RCC_OscConfig+0xd4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0xbc>
 8002102:	4b72      	ldr	r3, [pc, #456]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a71      	ldr	r2, [pc, #452]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0xd4>
 800211c:	4b6b      	ldr	r3, [pc, #428]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a6a      	ldr	r2, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b68      	ldr	r3, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a67      	ldr	r2, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fcca 	bl	8001ad4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fcc6 	bl	8001ad4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e200      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0xe4>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fcb6 	bl	8001ad4 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fcb2 	bl	8001ad4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1ec      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x10c>
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d063      	beq.n	8002262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d11c      	bne.n	80021ec <HAL_RCC_OscConfig+0x18c>
 80021b2:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d116      	bne.n	80021ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_RCC_OscConfig+0x176>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e1c0      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4939      	ldr	r1, [pc, #228]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	e03a      	b.n	8002262 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f4:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7ff fc6b 	bl	8001ad4 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7ff fc67 	bl	8001ad4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1a1      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4927      	ldr	r1, [pc, #156]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fc4a 	bl	8001ad4 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002244:	f7ff fc46 	bl	8001ad4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e180      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03a      	beq.n	80022e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d019      	beq.n	80022aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_RCC_OscConfig+0x274>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff fc2a 	bl	8001ad4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff fc26 	bl	8001ad4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e160      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f000 faa6 	bl	80027f4 <RCC_Delay>
 80022a8:	e01c      	b.n	80022e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_RCC_OscConfig+0x274>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b0:	f7ff fc10 	bl	8001ad4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b6:	e00f      	b.n	80022d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff fc0c 	bl	8001ad4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d908      	bls.n	80022d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e146      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	42420000 	.word	0x42420000
 80022d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	4b92      	ldr	r3, [pc, #584]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e9      	bne.n	80022b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a6 	beq.w	800243e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a87      	ldr	r2, [pc, #540]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	61d3      	str	r3, [r2, #28]
 800230e:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b82      	ldr	r3, [pc, #520]	; (8002528 <HAL_RCC_OscConfig+0x4c8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232a:	4b7f      	ldr	r3, [pc, #508]	; (8002528 <HAL_RCC_OscConfig+0x4c8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7e      	ldr	r2, [pc, #504]	; (8002528 <HAL_RCC_OscConfig+0x4c8>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7ff fbcd 	bl	8001ad4 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7ff fbc9 	bl	8001ad4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e103      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	4b75      	ldr	r3, [pc, #468]	; (8002528 <HAL_RCC_OscConfig+0x4c8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x312>
 8002364:	4b6f      	ldr	r3, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a6e      	ldr	r2, [pc, #440]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	e02d      	b.n	80023ce <HAL_RCC_OscConfig+0x36e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x334>
 800237a:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6213      	str	r3, [r2, #32]
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a66      	ldr	r2, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	e01c      	b.n	80023ce <HAL_RCC_OscConfig+0x36e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d10c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x356>
 800239c:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a60      	ldr	r2, [pc, #384]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6213      	str	r3, [r2, #32]
 80023a8:	4b5e      	ldr	r3, [pc, #376]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a5d      	ldr	r2, [pc, #372]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	e00b      	b.n	80023ce <HAL_RCC_OscConfig+0x36e>
 80023b6:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a5a      	ldr	r2, [pc, #360]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	4b58      	ldr	r3, [pc, #352]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d015      	beq.n	8002402 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d6:	f7ff fb7d 	bl	8001ad4 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff fb79 	bl	8001ad4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0b1      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ee      	beq.n	80023de <HAL_RCC_OscConfig+0x37e>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7ff fb67 	bl	8001ad4 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7ff fb63 	bl	8001ad4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e09b      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ee      	bne.n	800240a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002432:	4b3c      	ldr	r3, [pc, #240]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a3b      	ldr	r2, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8087 	beq.w	8002556 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d061      	beq.n	8002518 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d146      	bne.n	80024ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b33      	ldr	r3, [pc, #204]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7ff fb37 	bl	8001ad4 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff fb33 	bl	8001ad4 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e06d      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d108      	bne.n	80024a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4921      	ldr	r1, [pc, #132]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a4:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a19      	ldr	r1, [r3, #32]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	430b      	orrs	r3, r1
 80024b6:	491b      	ldr	r1, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7ff fb07 	bl	8001ad4 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7ff fb03 	bl	8001ad4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e03d      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x46a>
 80024e8:	e035      	b.n	8002556 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff faf0 	bl	8001ad4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7ff faec 	bl	8001ad4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e026      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x498>
 8002516:	e01e      	b.n	8002556 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e019      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
 800252c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_OscConfig+0x500>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	429a      	cmp	r2, r3
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0d0      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b6a      	ldr	r3, [pc, #424]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d910      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b67      	ldr	r3, [pc, #412]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 0207 	bic.w	r2, r3, #7
 800258e:	4965      	ldr	r1, [pc, #404]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0b8      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c0:	4b59      	ldr	r3, [pc, #356]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a58      	ldr	r2, [pc, #352]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	494d      	ldr	r1, [pc, #308]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d040      	beq.n	8002684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d115      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e07f      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e073      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06b      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4936      	ldr	r1, [pc, #216]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002654:	f7ff fa3e 	bl	8001ad4 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	e00a      	b.n	8002672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265c:	f7ff fa3a 	bl	8001ad4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e053      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 020c 	and.w	r2, r3, #12
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	429a      	cmp	r2, r3
 8002682:	d1eb      	bne.n	800265c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d210      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0207 	bic.w	r2, r3, #7
 800269a:	4922      	ldr	r1, [pc, #136]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e032      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4916      	ldr	r1, [pc, #88]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	490e      	ldr	r1, [pc, #56]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f2:	f000 f821 	bl	8002738 <HAL_RCC_GetSysClockFreq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	490a      	ldr	r1, [pc, #40]	; (800272c <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	5ccb      	ldrb	r3, [r1, r3]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a09      	ldr	r2, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1cc>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1d0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f99c 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40022000 	.word	0x40022000
 8002728:	40021000 	.word	0x40021000
 800272c:	08006320 	.word	0x08006320
 8002730:	20000000 	.word	0x20000000
 8002734:	20000004 	.word	0x20000004

08002738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002738:	b490      	push	{r4, r7}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002740:	1d3c      	adds	r4, r7, #4
 8002742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002748:	f240 2301 	movw	r3, #513	; 0x201
 800274c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x40>
 8002772:	2b08      	cmp	r3, #8
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x46>
 8002776:	e02b      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800277a:	623b      	str	r3, [r7, #32]
      break;
 800277c:	e02b      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3328      	adds	r3, #40	; 0x28
 8002788:	443b      	add	r3, r7
 800278a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800278e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d012      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	0c5b      	lsrs	r3, r3, #17
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	3328      	adds	r3, #40	; 0x28
 80027a6:	443b      	add	r3, r7
 80027a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80027b2:	fb03 f202 	mul.w	r2, r3, r2
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	e004      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	623b      	str	r3, [r7, #32]
      break;
 80027ce:	e002      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80027d2:	623b      	str	r3, [r7, #32]
      break;
 80027d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027d6:	6a3b      	ldr	r3, [r7, #32]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc90      	pop	{r4, r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	08006310 	.word	0x08006310
 80027e8:	40021000 	.word	0x40021000
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	003d0900 	.word	0x003d0900

080027f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <RCC_Delay+0x34>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <RCC_Delay+0x38>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0a5b      	lsrs	r3, r3, #9
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002810:	bf00      	nop
  }
  while (Delay --);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	60fa      	str	r2, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f9      	bne.n	8002810 <RCC_Delay+0x1c>
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	20000000 	.word	0x20000000
 800282c:	10624dd3 	.word	0x10624dd3

08002830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e041      	b.n	80028c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe ff7e 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 faaa 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e041      	b.n	8002964 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f839 	bl	800296c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2202      	movs	r2, #2
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f000 fa5b 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
	...

08002980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_TIM_PWM_Start+0x24>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e022      	b.n	80029ea <HAL_TIM_PWM_Start+0x6a>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d109      	bne.n	80029be <HAL_TIM_PWM_Start+0x3e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	e015      	b.n	80029ea <HAL_TIM_PWM_Start+0x6a>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d109      	bne.n	80029d8 <HAL_TIM_PWM_Start+0x58>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e008      	b.n	80029ea <HAL_TIM_PWM_Start+0x6a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e05e      	b.n	8002ab0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d104      	bne.n	8002a02 <HAL_TIM_PWM_Start+0x82>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a00:	e013      	b.n	8002a2a <HAL_TIM_PWM_Start+0xaa>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d104      	bne.n	8002a12 <HAL_TIM_PWM_Start+0x92>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a10:	e00b      	b.n	8002a2a <HAL_TIM_PWM_Start+0xaa>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_PWM_Start+0xa2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	e003      	b.n	8002a2a <HAL_TIM_PWM_Start+0xaa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fc48 	bl	80032c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_TIM_PWM_Start+0x138>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d107      	bne.n	8002a52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_TIM_PWM_Start+0x138>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_TIM_PWM_Start+0xfa>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a64:	d009      	beq.n	8002a7a <HAL_TIM_PWM_Start+0xfa>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a14      	ldr	r2, [pc, #80]	; (8002abc <HAL_TIM_PWM_Start+0x13c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_TIM_PWM_Start+0xfa>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <HAL_TIM_PWM_Start+0x140>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d111      	bne.n	8002a9e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d010      	beq.n	8002aae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	e007      	b.n	8002aae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800

08002ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0ac      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	f200 809f 	bhi.w	8002c2c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b29 	.word	0x08002b29
 8002af8:	08002c2d 	.word	0x08002c2d
 8002afc:	08002c2d 	.word	0x08002c2d
 8002b00:	08002c2d 	.word	0x08002c2d
 8002b04:	08002b69 	.word	0x08002b69
 8002b08:	08002c2d 	.word	0x08002c2d
 8002b0c:	08002c2d 	.word	0x08002c2d
 8002b10:	08002c2d 	.word	0x08002c2d
 8002b14:	08002bab 	.word	0x08002bab
 8002b18:	08002c2d 	.word	0x08002c2d
 8002b1c:	08002c2d 	.word	0x08002c2d
 8002b20:	08002c2d 	.word	0x08002c2d
 8002b24:	08002beb 	.word	0x08002beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f9ac 	bl	8002e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0208 	orr.w	r2, r2, #8
 8002b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6999      	ldr	r1, [r3, #24]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	619a      	str	r2, [r3, #24]
      break;
 8002b66:	e062      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f9f2 	bl	8002f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6999      	ldr	r1, [r3, #24]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	021a      	lsls	r2, r3, #8
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	619a      	str	r2, [r3, #24]
      break;
 8002ba8:	e041      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fa3b 	bl	800302c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0208 	orr.w	r2, r2, #8
 8002bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0204 	bic.w	r2, r2, #4
 8002bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69d9      	ldr	r1, [r3, #28]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	61da      	str	r2, [r3, #28]
      break;
 8002be8:	e021      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fa85 	bl	8003100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69d9      	ldr	r1, [r3, #28]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	021a      	lsls	r2, r3, #8
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	61da      	str	r2, [r3, #28]
      break;
 8002c2a:	e000      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_ConfigClockSource+0x18>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0b3      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x180>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c90:	d03e      	beq.n	8002d10 <HAL_TIM_ConfigClockSource+0xd0>
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	f200 8087 	bhi.w	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	f000 8085 	beq.w	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	d87f      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002ca8:	2b70      	cmp	r3, #112	; 0x70
 8002caa:	d01a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0xa2>
 8002cac:	2b70      	cmp	r3, #112	; 0x70
 8002cae:	d87b      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cb0:	2b60      	cmp	r3, #96	; 0x60
 8002cb2:	d050      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x116>
 8002cb4:	2b60      	cmp	r3, #96	; 0x60
 8002cb6:	d877      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cb8:	2b50      	cmp	r3, #80	; 0x50
 8002cba:	d03c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0xf6>
 8002cbc:	2b50      	cmp	r3, #80	; 0x50
 8002cbe:	d873      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d058      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x136>
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d86f      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cc8:	2b30      	cmp	r3, #48	; 0x30
 8002cca:	d064      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x156>
 8002ccc:	2b30      	cmp	r3, #48	; 0x30
 8002cce:	d86b      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d060      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x156>
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d867      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x156>
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d05a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ce0:	e062      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f000 faca 	bl	800328a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	609a      	str	r2, [r3, #8]
      break;
 8002d0e:	e04e      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f000 fab3 	bl	800328a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d32:	609a      	str	r2, [r3, #8]
      break;
 8002d34:	e03b      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 fa2a 	bl	800319c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2150      	movs	r1, #80	; 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fa81 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002d54:	e02b      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 fa48 	bl	80031f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2160      	movs	r1, #96	; 0x60
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fa71 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002d74:	e01b      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 fa0a 	bl	800319c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fa61 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002d94:	e00b      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f000 fa58 	bl	8003256 <TIM_ITRx_SetConfig>
        break;
 8002da6:	e002      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <TIM_Base_SetConfig+0xbc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a25      	ldr	r2, [pc, #148]	; (8002e88 <TIM_Base_SetConfig+0xc0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <TIM_Base_SetConfig+0xbc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <TIM_Base_SetConfig+0xc0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d103      	bne.n	8002e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	615a      	str	r2, [r3, #20]
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800

08002e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0201 	bic.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f023 0302 	bic.w	r3, r3, #2
 8002ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <TIM_OC1_SetConfig+0xc8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10c      	bne.n	8002f02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0308 	bic.w	r3, r3, #8
 8002eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <TIM_OC1_SetConfig+0xc8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d111      	bne.n	8002f2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	621a      	str	r2, [r3, #32]
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40012c00 	.word	0x40012c00

08002f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0210 	bic.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0320 	bic.w	r3, r3, #32
 8002fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <TIM_OC2_SetConfig+0xd0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10d      	bne.n	8002fd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a14      	ldr	r2, [pc, #80]	; (8003028 <TIM_OC2_SetConfig+0xd0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d113      	bne.n	8003004 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	621a      	str	r2, [r3, #32]
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40012c00 	.word	0x40012c00

0800302c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <TIM_OC3_SetConfig+0xd0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10d      	bne.n	80030a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <TIM_OC3_SetConfig+0xd0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d113      	bne.n	80030d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	621a      	str	r2, [r3, #32]
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40012c00 	.word	0x40012c00

08003100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800314a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	031b      	lsls	r3, r3, #12
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <TIM_OC4_SetConfig+0x98>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d109      	bne.n	8003174 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	019b      	lsls	r3, r3, #6
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	40012c00 	.word	0x40012c00

0800319c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 030a 	bic.w	r3, r3, #10
 80031d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f023 0210 	bic.w	r2, r3, #16
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	031b      	lsls	r3, r3, #12
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	621a      	str	r2, [r3, #32]
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	f043 0307 	orr.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800328a:	b480      	push	{r7}
 800328c:	b087      	sub	sp, #28
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	021a      	lsls	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2201      	movs	r2, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003324:	2302      	movs	r3, #2
 8003326:	e046      	b.n	80033b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00e      	beq.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003374:	d009      	beq.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a10      	ldr	r2, [pc, #64]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10c      	bne.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4313      	orrs	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800

080033cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e03d      	b.n	8003464 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <__errno>:
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <__errno+0x8>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000000c 	.word	0x2000000c

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	2600      	movs	r6, #0
 8003480:	4d0c      	ldr	r5, [pc, #48]	; (80034b4 <__libc_init_array+0x38>)
 8003482:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003484:	1b64      	subs	r4, r4, r5
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	42a6      	cmp	r6, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	f002 fefc 	bl	8006288 <_init>
 8003490:	2600      	movs	r6, #0
 8003492:	4d0a      	ldr	r5, [pc, #40]	; (80034bc <__libc_init_array+0x40>)
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <__libc_init_array+0x44>)
 8003496:	1b64      	subs	r4, r4, r5
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	42a6      	cmp	r6, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a4:	4798      	blx	r3
 80034a6:	3601      	adds	r6, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ae:	4798      	blx	r3
 80034b0:	3601      	adds	r6, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	0800670c 	.word	0x0800670c
 80034b8:	0800670c 	.word	0x0800670c
 80034bc:	0800670c 	.word	0x0800670c
 80034c0:	08006710 	.word	0x08006710

080034c4 <memset>:
 80034c4:	4603      	mov	r3, r0
 80034c6:	4402      	add	r2, r0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	f803 1b01 	strb.w	r1, [r3], #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <__cvt>:
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034da:	461f      	mov	r7, r3
 80034dc:	bfbb      	ittet	lt
 80034de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80034e2:	461f      	movlt	r7, r3
 80034e4:	2300      	movge	r3, #0
 80034e6:	232d      	movlt	r3, #45	; 0x2d
 80034e8:	b088      	sub	sp, #32
 80034ea:	4614      	mov	r4, r2
 80034ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034f0:	7013      	strb	r3, [r2, #0]
 80034f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80034f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80034f8:	f023 0820 	bic.w	r8, r3, #32
 80034fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003500:	d005      	beq.n	800350e <__cvt+0x3a>
 8003502:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003506:	d100      	bne.n	800350a <__cvt+0x36>
 8003508:	3501      	adds	r5, #1
 800350a:	2302      	movs	r3, #2
 800350c:	e000      	b.n	8003510 <__cvt+0x3c>
 800350e:	2303      	movs	r3, #3
 8003510:	aa07      	add	r2, sp, #28
 8003512:	9204      	str	r2, [sp, #16]
 8003514:	aa06      	add	r2, sp, #24
 8003516:	e9cd a202 	strd	sl, r2, [sp, #8]
 800351a:	e9cd 3500 	strd	r3, r5, [sp]
 800351e:	4622      	mov	r2, r4
 8003520:	463b      	mov	r3, r7
 8003522:	f000 fce5 	bl	8003ef0 <_dtoa_r>
 8003526:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800352a:	4606      	mov	r6, r0
 800352c:	d102      	bne.n	8003534 <__cvt+0x60>
 800352e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003530:	07db      	lsls	r3, r3, #31
 8003532:	d522      	bpl.n	800357a <__cvt+0xa6>
 8003534:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003538:	eb06 0905 	add.w	r9, r6, r5
 800353c:	d110      	bne.n	8003560 <__cvt+0x8c>
 800353e:	7833      	ldrb	r3, [r6, #0]
 8003540:	2b30      	cmp	r3, #48	; 0x30
 8003542:	d10a      	bne.n	800355a <__cvt+0x86>
 8003544:	2200      	movs	r2, #0
 8003546:	2300      	movs	r3, #0
 8003548:	4620      	mov	r0, r4
 800354a:	4639      	mov	r1, r7
 800354c:	f7fd fa2c 	bl	80009a8 <__aeabi_dcmpeq>
 8003550:	b918      	cbnz	r0, 800355a <__cvt+0x86>
 8003552:	f1c5 0501 	rsb	r5, r5, #1
 8003556:	f8ca 5000 	str.w	r5, [sl]
 800355a:	f8da 3000 	ldr.w	r3, [sl]
 800355e:	4499      	add	r9, r3
 8003560:	2200      	movs	r2, #0
 8003562:	2300      	movs	r3, #0
 8003564:	4620      	mov	r0, r4
 8003566:	4639      	mov	r1, r7
 8003568:	f7fd fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800356c:	b108      	cbz	r0, 8003572 <__cvt+0x9e>
 800356e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003572:	2230      	movs	r2, #48	; 0x30
 8003574:	9b07      	ldr	r3, [sp, #28]
 8003576:	454b      	cmp	r3, r9
 8003578:	d307      	bcc.n	800358a <__cvt+0xb6>
 800357a:	4630      	mov	r0, r6
 800357c:	9b07      	ldr	r3, [sp, #28]
 800357e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003580:	1b9b      	subs	r3, r3, r6
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	b008      	add	sp, #32
 8003586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	9107      	str	r1, [sp, #28]
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e7f0      	b.n	8003574 <__cvt+0xa0>

08003592 <__exponent>:
 8003592:	4603      	mov	r3, r0
 8003594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003596:	2900      	cmp	r1, #0
 8003598:	f803 2b02 	strb.w	r2, [r3], #2
 800359c:	bfb6      	itet	lt
 800359e:	222d      	movlt	r2, #45	; 0x2d
 80035a0:	222b      	movge	r2, #43	; 0x2b
 80035a2:	4249      	neglt	r1, r1
 80035a4:	2909      	cmp	r1, #9
 80035a6:	7042      	strb	r2, [r0, #1]
 80035a8:	dd2b      	ble.n	8003602 <__exponent+0x70>
 80035aa:	f10d 0407 	add.w	r4, sp, #7
 80035ae:	46a4      	mov	ip, r4
 80035b0:	270a      	movs	r7, #10
 80035b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80035b6:	460a      	mov	r2, r1
 80035b8:	46a6      	mov	lr, r4
 80035ba:	fb07 1516 	mls	r5, r7, r6, r1
 80035be:	2a63      	cmp	r2, #99	; 0x63
 80035c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80035c4:	4631      	mov	r1, r6
 80035c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80035ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80035ce:	dcf0      	bgt.n	80035b2 <__exponent+0x20>
 80035d0:	3130      	adds	r1, #48	; 0x30
 80035d2:	f1ae 0502 	sub.w	r5, lr, #2
 80035d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80035da:	4629      	mov	r1, r5
 80035dc:	1c44      	adds	r4, r0, #1
 80035de:	4561      	cmp	r1, ip
 80035e0:	d30a      	bcc.n	80035f8 <__exponent+0x66>
 80035e2:	f10d 0209 	add.w	r2, sp, #9
 80035e6:	eba2 020e 	sub.w	r2, r2, lr
 80035ea:	4565      	cmp	r5, ip
 80035ec:	bf88      	it	hi
 80035ee:	2200      	movhi	r2, #0
 80035f0:	4413      	add	r3, r2
 80035f2:	1a18      	subs	r0, r3, r0
 80035f4:	b003      	add	sp, #12
 80035f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003600:	e7ed      	b.n	80035de <__exponent+0x4c>
 8003602:	2330      	movs	r3, #48	; 0x30
 8003604:	3130      	adds	r1, #48	; 0x30
 8003606:	7083      	strb	r3, [r0, #2]
 8003608:	70c1      	strb	r1, [r0, #3]
 800360a:	1d03      	adds	r3, r0, #4
 800360c:	e7f1      	b.n	80035f2 <__exponent+0x60>
	...

08003610 <_printf_float>:
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	b091      	sub	sp, #68	; 0x44
 8003616:	460c      	mov	r4, r1
 8003618:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800361c:	4616      	mov	r6, r2
 800361e:	461f      	mov	r7, r3
 8003620:	4605      	mov	r5, r0
 8003622:	f001 fa53 	bl	8004acc <_localeconv_r>
 8003626:	6803      	ldr	r3, [r0, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	9309      	str	r3, [sp, #36]	; 0x24
 800362c:	f7fc fd90 	bl	8000150 <strlen>
 8003630:	2300      	movs	r3, #0
 8003632:	930e      	str	r3, [sp, #56]	; 0x38
 8003634:	f8d8 3000 	ldr.w	r3, [r8]
 8003638:	900a      	str	r0, [sp, #40]	; 0x28
 800363a:	3307      	adds	r3, #7
 800363c:	f023 0307 	bic.w	r3, r3, #7
 8003640:	f103 0208 	add.w	r2, r3, #8
 8003644:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003648:	f8d4 b000 	ldr.w	fp, [r4]
 800364c:	f8c8 2000 	str.w	r2, [r8]
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003658:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800365c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003660:	930b      	str	r3, [sp, #44]	; 0x2c
 8003662:	f04f 32ff 	mov.w	r2, #4294967295
 8003666:	4640      	mov	r0, r8
 8003668:	4b9c      	ldr	r3, [pc, #624]	; (80038dc <_printf_float+0x2cc>)
 800366a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800366c:	f7fd f9ce 	bl	8000a0c <__aeabi_dcmpun>
 8003670:	bb70      	cbnz	r0, 80036d0 <_printf_float+0xc0>
 8003672:	f04f 32ff 	mov.w	r2, #4294967295
 8003676:	4640      	mov	r0, r8
 8003678:	4b98      	ldr	r3, [pc, #608]	; (80038dc <_printf_float+0x2cc>)
 800367a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800367c:	f7fd f9a8 	bl	80009d0 <__aeabi_dcmple>
 8003680:	bb30      	cbnz	r0, 80036d0 <_printf_float+0xc0>
 8003682:	2200      	movs	r2, #0
 8003684:	2300      	movs	r3, #0
 8003686:	4640      	mov	r0, r8
 8003688:	4651      	mov	r1, sl
 800368a:	f7fd f997 	bl	80009bc <__aeabi_dcmplt>
 800368e:	b110      	cbz	r0, 8003696 <_printf_float+0x86>
 8003690:	232d      	movs	r3, #45	; 0x2d
 8003692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003696:	4b92      	ldr	r3, [pc, #584]	; (80038e0 <_printf_float+0x2d0>)
 8003698:	4892      	ldr	r0, [pc, #584]	; (80038e4 <_printf_float+0x2d4>)
 800369a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800369e:	bf94      	ite	ls
 80036a0:	4698      	movls	r8, r3
 80036a2:	4680      	movhi	r8, r0
 80036a4:	2303      	movs	r3, #3
 80036a6:	f04f 0a00 	mov.w	sl, #0
 80036aa:	6123      	str	r3, [r4, #16]
 80036ac:	f02b 0304 	bic.w	r3, fp, #4
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	4633      	mov	r3, r6
 80036b4:	4621      	mov	r1, r4
 80036b6:	4628      	mov	r0, r5
 80036b8:	9700      	str	r7, [sp, #0]
 80036ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80036bc:	f000 f9d4 	bl	8003a68 <_printf_common>
 80036c0:	3001      	adds	r0, #1
 80036c2:	f040 8090 	bne.w	80037e6 <_printf_float+0x1d6>
 80036c6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ca:	b011      	add	sp, #68	; 0x44
 80036cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d0:	4642      	mov	r2, r8
 80036d2:	4653      	mov	r3, sl
 80036d4:	4640      	mov	r0, r8
 80036d6:	4651      	mov	r1, sl
 80036d8:	f7fd f998 	bl	8000a0c <__aeabi_dcmpun>
 80036dc:	b148      	cbz	r0, 80036f2 <_printf_float+0xe2>
 80036de:	f1ba 0f00 	cmp.w	sl, #0
 80036e2:	bfb8      	it	lt
 80036e4:	232d      	movlt	r3, #45	; 0x2d
 80036e6:	4880      	ldr	r0, [pc, #512]	; (80038e8 <_printf_float+0x2d8>)
 80036e8:	bfb8      	it	lt
 80036ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80036ee:	4b7f      	ldr	r3, [pc, #508]	; (80038ec <_printf_float+0x2dc>)
 80036f0:	e7d3      	b.n	800369a <_printf_float+0x8a>
 80036f2:	6863      	ldr	r3, [r4, #4]
 80036f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	d142      	bne.n	8003782 <_printf_float+0x172>
 80036fc:	2306      	movs	r3, #6
 80036fe:	6063      	str	r3, [r4, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	9206      	str	r2, [sp, #24]
 8003704:	aa0e      	add	r2, sp, #56	; 0x38
 8003706:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800370a:	aa0d      	add	r2, sp, #52	; 0x34
 800370c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003710:	9203      	str	r2, [sp, #12]
 8003712:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003716:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	6863      	ldr	r3, [r4, #4]
 800371e:	4642      	mov	r2, r8
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4628      	mov	r0, r5
 8003724:	4653      	mov	r3, sl
 8003726:	910b      	str	r1, [sp, #44]	; 0x2c
 8003728:	f7ff fed4 	bl	80034d4 <__cvt>
 800372c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800372e:	4680      	mov	r8, r0
 8003730:	2947      	cmp	r1, #71	; 0x47
 8003732:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003734:	d108      	bne.n	8003748 <_printf_float+0x138>
 8003736:	1cc8      	adds	r0, r1, #3
 8003738:	db02      	blt.n	8003740 <_printf_float+0x130>
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	4299      	cmp	r1, r3
 800373e:	dd40      	ble.n	80037c2 <_printf_float+0x1b2>
 8003740:	f1a9 0902 	sub.w	r9, r9, #2
 8003744:	fa5f f989 	uxtb.w	r9, r9
 8003748:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800374c:	d81f      	bhi.n	800378e <_printf_float+0x17e>
 800374e:	464a      	mov	r2, r9
 8003750:	3901      	subs	r1, #1
 8003752:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003756:	910d      	str	r1, [sp, #52]	; 0x34
 8003758:	f7ff ff1b 	bl	8003592 <__exponent>
 800375c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800375e:	4682      	mov	sl, r0
 8003760:	1813      	adds	r3, r2, r0
 8003762:	2a01      	cmp	r2, #1
 8003764:	6123      	str	r3, [r4, #16]
 8003766:	dc02      	bgt.n	800376e <_printf_float+0x15e>
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	07d2      	lsls	r2, r2, #31
 800376c:	d501      	bpl.n	8003772 <_printf_float+0x162>
 800376e:	3301      	adds	r3, #1
 8003770:	6123      	str	r3, [r4, #16]
 8003772:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003776:	2b00      	cmp	r3, #0
 8003778:	d09b      	beq.n	80036b2 <_printf_float+0xa2>
 800377a:	232d      	movs	r3, #45	; 0x2d
 800377c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003780:	e797      	b.n	80036b2 <_printf_float+0xa2>
 8003782:	2947      	cmp	r1, #71	; 0x47
 8003784:	d1bc      	bne.n	8003700 <_printf_float+0xf0>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ba      	bne.n	8003700 <_printf_float+0xf0>
 800378a:	2301      	movs	r3, #1
 800378c:	e7b7      	b.n	80036fe <_printf_float+0xee>
 800378e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003792:	d118      	bne.n	80037c6 <_printf_float+0x1b6>
 8003794:	2900      	cmp	r1, #0
 8003796:	6863      	ldr	r3, [r4, #4]
 8003798:	dd0b      	ble.n	80037b2 <_printf_float+0x1a2>
 800379a:	6121      	str	r1, [r4, #16]
 800379c:	b913      	cbnz	r3, 80037a4 <_printf_float+0x194>
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	07d0      	lsls	r0, r2, #31
 80037a2:	d502      	bpl.n	80037aa <_printf_float+0x19a>
 80037a4:	3301      	adds	r3, #1
 80037a6:	440b      	add	r3, r1
 80037a8:	6123      	str	r3, [r4, #16]
 80037aa:	f04f 0a00 	mov.w	sl, #0
 80037ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80037b0:	e7df      	b.n	8003772 <_printf_float+0x162>
 80037b2:	b913      	cbnz	r3, 80037ba <_printf_float+0x1aa>
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	07d2      	lsls	r2, r2, #31
 80037b8:	d501      	bpl.n	80037be <_printf_float+0x1ae>
 80037ba:	3302      	adds	r3, #2
 80037bc:	e7f4      	b.n	80037a8 <_printf_float+0x198>
 80037be:	2301      	movs	r3, #1
 80037c0:	e7f2      	b.n	80037a8 <_printf_float+0x198>
 80037c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80037c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037c8:	4299      	cmp	r1, r3
 80037ca:	db05      	blt.n	80037d8 <_printf_float+0x1c8>
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	6121      	str	r1, [r4, #16]
 80037d0:	07d8      	lsls	r0, r3, #31
 80037d2:	d5ea      	bpl.n	80037aa <_printf_float+0x19a>
 80037d4:	1c4b      	adds	r3, r1, #1
 80037d6:	e7e7      	b.n	80037a8 <_printf_float+0x198>
 80037d8:	2900      	cmp	r1, #0
 80037da:	bfcc      	ite	gt
 80037dc:	2201      	movgt	r2, #1
 80037de:	f1c1 0202 	rsble	r2, r1, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	e7e0      	b.n	80037a8 <_printf_float+0x198>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	055a      	lsls	r2, r3, #21
 80037ea:	d407      	bmi.n	80037fc <_printf_float+0x1ec>
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	4642      	mov	r2, r8
 80037f0:	4631      	mov	r1, r6
 80037f2:	4628      	mov	r0, r5
 80037f4:	47b8      	blx	r7
 80037f6:	3001      	adds	r0, #1
 80037f8:	d12b      	bne.n	8003852 <_printf_float+0x242>
 80037fa:	e764      	b.n	80036c6 <_printf_float+0xb6>
 80037fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003800:	f240 80dd 	bls.w	80039be <_printf_float+0x3ae>
 8003804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003808:	2200      	movs	r2, #0
 800380a:	2300      	movs	r3, #0
 800380c:	f7fd f8cc 	bl	80009a8 <__aeabi_dcmpeq>
 8003810:	2800      	cmp	r0, #0
 8003812:	d033      	beq.n	800387c <_printf_float+0x26c>
 8003814:	2301      	movs	r3, #1
 8003816:	4631      	mov	r1, r6
 8003818:	4628      	mov	r0, r5
 800381a:	4a35      	ldr	r2, [pc, #212]	; (80038f0 <_printf_float+0x2e0>)
 800381c:	47b8      	blx	r7
 800381e:	3001      	adds	r0, #1
 8003820:	f43f af51 	beq.w	80036c6 <_printf_float+0xb6>
 8003824:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003828:	429a      	cmp	r2, r3
 800382a:	db02      	blt.n	8003832 <_printf_float+0x222>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	07d8      	lsls	r0, r3, #31
 8003830:	d50f      	bpl.n	8003852 <_printf_float+0x242>
 8003832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003836:	4631      	mov	r1, r6
 8003838:	4628      	mov	r0, r5
 800383a:	47b8      	blx	r7
 800383c:	3001      	adds	r0, #1
 800383e:	f43f af42 	beq.w	80036c6 <_printf_float+0xb6>
 8003842:	f04f 0800 	mov.w	r8, #0
 8003846:	f104 091a 	add.w	r9, r4, #26
 800384a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800384c:	3b01      	subs	r3, #1
 800384e:	4543      	cmp	r3, r8
 8003850:	dc09      	bgt.n	8003866 <_printf_float+0x256>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	079b      	lsls	r3, r3, #30
 8003856:	f100 8102 	bmi.w	8003a5e <_printf_float+0x44e>
 800385a:	68e0      	ldr	r0, [r4, #12]
 800385c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800385e:	4298      	cmp	r0, r3
 8003860:	bfb8      	it	lt
 8003862:	4618      	movlt	r0, r3
 8003864:	e731      	b.n	80036ca <_printf_float+0xba>
 8003866:	2301      	movs	r3, #1
 8003868:	464a      	mov	r2, r9
 800386a:	4631      	mov	r1, r6
 800386c:	4628      	mov	r0, r5
 800386e:	47b8      	blx	r7
 8003870:	3001      	adds	r0, #1
 8003872:	f43f af28 	beq.w	80036c6 <_printf_float+0xb6>
 8003876:	f108 0801 	add.w	r8, r8, #1
 800387a:	e7e6      	b.n	800384a <_printf_float+0x23a>
 800387c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800387e:	2b00      	cmp	r3, #0
 8003880:	dc38      	bgt.n	80038f4 <_printf_float+0x2e4>
 8003882:	2301      	movs	r3, #1
 8003884:	4631      	mov	r1, r6
 8003886:	4628      	mov	r0, r5
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <_printf_float+0x2e0>)
 800388a:	47b8      	blx	r7
 800388c:	3001      	adds	r0, #1
 800388e:	f43f af1a 	beq.w	80036c6 <_printf_float+0xb6>
 8003892:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003896:	4313      	orrs	r3, r2
 8003898:	d102      	bne.n	80038a0 <_printf_float+0x290>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	07d9      	lsls	r1, r3, #31
 800389e:	d5d8      	bpl.n	8003852 <_printf_float+0x242>
 80038a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038a4:	4631      	mov	r1, r6
 80038a6:	4628      	mov	r0, r5
 80038a8:	47b8      	blx	r7
 80038aa:	3001      	adds	r0, #1
 80038ac:	f43f af0b 	beq.w	80036c6 <_printf_float+0xb6>
 80038b0:	f04f 0900 	mov.w	r9, #0
 80038b4:	f104 0a1a 	add.w	sl, r4, #26
 80038b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038ba:	425b      	negs	r3, r3
 80038bc:	454b      	cmp	r3, r9
 80038be:	dc01      	bgt.n	80038c4 <_printf_float+0x2b4>
 80038c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038c2:	e794      	b.n	80037ee <_printf_float+0x1de>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4652      	mov	r2, sl
 80038c8:	4631      	mov	r1, r6
 80038ca:	4628      	mov	r0, r5
 80038cc:	47b8      	blx	r7
 80038ce:	3001      	adds	r0, #1
 80038d0:	f43f aef9 	beq.w	80036c6 <_printf_float+0xb6>
 80038d4:	f109 0901 	add.w	r9, r9, #1
 80038d8:	e7ee      	b.n	80038b8 <_printf_float+0x2a8>
 80038da:	bf00      	nop
 80038dc:	7fefffff 	.word	0x7fefffff
 80038e0:	08006334 	.word	0x08006334
 80038e4:	08006338 	.word	0x08006338
 80038e8:	08006340 	.word	0x08006340
 80038ec:	0800633c 	.word	0x0800633c
 80038f0:	08006344 	.word	0x08006344
 80038f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038f8:	429a      	cmp	r2, r3
 80038fa:	bfa8      	it	ge
 80038fc:	461a      	movge	r2, r3
 80038fe:	2a00      	cmp	r2, #0
 8003900:	4691      	mov	r9, r2
 8003902:	dc37      	bgt.n	8003974 <_printf_float+0x364>
 8003904:	f04f 0b00 	mov.w	fp, #0
 8003908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800390c:	f104 021a 	add.w	r2, r4, #26
 8003910:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003914:	ebaa 0309 	sub.w	r3, sl, r9
 8003918:	455b      	cmp	r3, fp
 800391a:	dc33      	bgt.n	8003984 <_printf_float+0x374>
 800391c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003920:	429a      	cmp	r2, r3
 8003922:	db3b      	blt.n	800399c <_printf_float+0x38c>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	07da      	lsls	r2, r3, #31
 8003928:	d438      	bmi.n	800399c <_printf_float+0x38c>
 800392a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800392c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800392e:	eba3 020a 	sub.w	r2, r3, sl
 8003932:	eba3 0901 	sub.w	r9, r3, r1
 8003936:	4591      	cmp	r9, r2
 8003938:	bfa8      	it	ge
 800393a:	4691      	movge	r9, r2
 800393c:	f1b9 0f00 	cmp.w	r9, #0
 8003940:	dc34      	bgt.n	80039ac <_printf_float+0x39c>
 8003942:	f04f 0800 	mov.w	r8, #0
 8003946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800394a:	f104 0a1a 	add.w	sl, r4, #26
 800394e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	eba3 0309 	sub.w	r3, r3, r9
 8003958:	4543      	cmp	r3, r8
 800395a:	f77f af7a 	ble.w	8003852 <_printf_float+0x242>
 800395e:	2301      	movs	r3, #1
 8003960:	4652      	mov	r2, sl
 8003962:	4631      	mov	r1, r6
 8003964:	4628      	mov	r0, r5
 8003966:	47b8      	blx	r7
 8003968:	3001      	adds	r0, #1
 800396a:	f43f aeac 	beq.w	80036c6 <_printf_float+0xb6>
 800396e:	f108 0801 	add.w	r8, r8, #1
 8003972:	e7ec      	b.n	800394e <_printf_float+0x33e>
 8003974:	4613      	mov	r3, r2
 8003976:	4631      	mov	r1, r6
 8003978:	4642      	mov	r2, r8
 800397a:	4628      	mov	r0, r5
 800397c:	47b8      	blx	r7
 800397e:	3001      	adds	r0, #1
 8003980:	d1c0      	bne.n	8003904 <_printf_float+0x2f4>
 8003982:	e6a0      	b.n	80036c6 <_printf_float+0xb6>
 8003984:	2301      	movs	r3, #1
 8003986:	4631      	mov	r1, r6
 8003988:	4628      	mov	r0, r5
 800398a:	920b      	str	r2, [sp, #44]	; 0x2c
 800398c:	47b8      	blx	r7
 800398e:	3001      	adds	r0, #1
 8003990:	f43f ae99 	beq.w	80036c6 <_printf_float+0xb6>
 8003994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003996:	f10b 0b01 	add.w	fp, fp, #1
 800399a:	e7b9      	b.n	8003910 <_printf_float+0x300>
 800399c:	4631      	mov	r1, r6
 800399e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039a2:	4628      	mov	r0, r5
 80039a4:	47b8      	blx	r7
 80039a6:	3001      	adds	r0, #1
 80039a8:	d1bf      	bne.n	800392a <_printf_float+0x31a>
 80039aa:	e68c      	b.n	80036c6 <_printf_float+0xb6>
 80039ac:	464b      	mov	r3, r9
 80039ae:	4631      	mov	r1, r6
 80039b0:	4628      	mov	r0, r5
 80039b2:	eb08 020a 	add.w	r2, r8, sl
 80039b6:	47b8      	blx	r7
 80039b8:	3001      	adds	r0, #1
 80039ba:	d1c2      	bne.n	8003942 <_printf_float+0x332>
 80039bc:	e683      	b.n	80036c6 <_printf_float+0xb6>
 80039be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039c0:	2a01      	cmp	r2, #1
 80039c2:	dc01      	bgt.n	80039c8 <_printf_float+0x3b8>
 80039c4:	07db      	lsls	r3, r3, #31
 80039c6:	d537      	bpl.n	8003a38 <_printf_float+0x428>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4642      	mov	r2, r8
 80039cc:	4631      	mov	r1, r6
 80039ce:	4628      	mov	r0, r5
 80039d0:	47b8      	blx	r7
 80039d2:	3001      	adds	r0, #1
 80039d4:	f43f ae77 	beq.w	80036c6 <_printf_float+0xb6>
 80039d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039dc:	4631      	mov	r1, r6
 80039de:	4628      	mov	r0, r5
 80039e0:	47b8      	blx	r7
 80039e2:	3001      	adds	r0, #1
 80039e4:	f43f ae6f 	beq.w	80036c6 <_printf_float+0xb6>
 80039e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039ec:	2200      	movs	r2, #0
 80039ee:	2300      	movs	r3, #0
 80039f0:	f7fc ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80039f4:	b9d8      	cbnz	r0, 8003a2e <_printf_float+0x41e>
 80039f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039f8:	f108 0201 	add.w	r2, r8, #1
 80039fc:	3b01      	subs	r3, #1
 80039fe:	4631      	mov	r1, r6
 8003a00:	4628      	mov	r0, r5
 8003a02:	47b8      	blx	r7
 8003a04:	3001      	adds	r0, #1
 8003a06:	d10e      	bne.n	8003a26 <_printf_float+0x416>
 8003a08:	e65d      	b.n	80036c6 <_printf_float+0xb6>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	464a      	mov	r2, r9
 8003a0e:	4631      	mov	r1, r6
 8003a10:	4628      	mov	r0, r5
 8003a12:	47b8      	blx	r7
 8003a14:	3001      	adds	r0, #1
 8003a16:	f43f ae56 	beq.w	80036c6 <_printf_float+0xb6>
 8003a1a:	f108 0801 	add.w	r8, r8, #1
 8003a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a20:	3b01      	subs	r3, #1
 8003a22:	4543      	cmp	r3, r8
 8003a24:	dcf1      	bgt.n	8003a0a <_printf_float+0x3fa>
 8003a26:	4653      	mov	r3, sl
 8003a28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a2c:	e6e0      	b.n	80037f0 <_printf_float+0x1e0>
 8003a2e:	f04f 0800 	mov.w	r8, #0
 8003a32:	f104 091a 	add.w	r9, r4, #26
 8003a36:	e7f2      	b.n	8003a1e <_printf_float+0x40e>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	4642      	mov	r2, r8
 8003a3c:	e7df      	b.n	80039fe <_printf_float+0x3ee>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	464a      	mov	r2, r9
 8003a42:	4631      	mov	r1, r6
 8003a44:	4628      	mov	r0, r5
 8003a46:	47b8      	blx	r7
 8003a48:	3001      	adds	r0, #1
 8003a4a:	f43f ae3c 	beq.w	80036c6 <_printf_float+0xb6>
 8003a4e:	f108 0801 	add.w	r8, r8, #1
 8003a52:	68e3      	ldr	r3, [r4, #12]
 8003a54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a56:	1a5b      	subs	r3, r3, r1
 8003a58:	4543      	cmp	r3, r8
 8003a5a:	dcf0      	bgt.n	8003a3e <_printf_float+0x42e>
 8003a5c:	e6fd      	b.n	800385a <_printf_float+0x24a>
 8003a5e:	f04f 0800 	mov.w	r8, #0
 8003a62:	f104 0919 	add.w	r9, r4, #25
 8003a66:	e7f4      	b.n	8003a52 <_printf_float+0x442>

08003a68 <_printf_common>:
 8003a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	4616      	mov	r6, r2
 8003a6e:	4699      	mov	r9, r3
 8003a70:	688a      	ldr	r2, [r1, #8]
 8003a72:	690b      	ldr	r3, [r1, #16]
 8003a74:	4607      	mov	r7, r0
 8003a76:	4293      	cmp	r3, r2
 8003a78:	bfb8      	it	lt
 8003a7a:	4613      	movlt	r3, r2
 8003a7c:	6033      	str	r3, [r6, #0]
 8003a7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a82:	460c      	mov	r4, r1
 8003a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a88:	b10a      	cbz	r2, 8003a8e <_printf_common+0x26>
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	6033      	str	r3, [r6, #0]
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	0699      	lsls	r1, r3, #26
 8003a92:	bf42      	ittt	mi
 8003a94:	6833      	ldrmi	r3, [r6, #0]
 8003a96:	3302      	addmi	r3, #2
 8003a98:	6033      	strmi	r3, [r6, #0]
 8003a9a:	6825      	ldr	r5, [r4, #0]
 8003a9c:	f015 0506 	ands.w	r5, r5, #6
 8003aa0:	d106      	bne.n	8003ab0 <_printf_common+0x48>
 8003aa2:	f104 0a19 	add.w	sl, r4, #25
 8003aa6:	68e3      	ldr	r3, [r4, #12]
 8003aa8:	6832      	ldr	r2, [r6, #0]
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	42ab      	cmp	r3, r5
 8003aae:	dc28      	bgt.n	8003b02 <_printf_common+0x9a>
 8003ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ab4:	1e13      	subs	r3, r2, #0
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	bf18      	it	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	0692      	lsls	r2, r2, #26
 8003abe:	d42d      	bmi.n	8003b1c <_printf_common+0xb4>
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ac8:	47c0      	blx	r8
 8003aca:	3001      	adds	r0, #1
 8003acc:	d020      	beq.n	8003b10 <_printf_common+0xa8>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	68e5      	ldr	r5, [r4, #12]
 8003ad2:	f003 0306 	and.w	r3, r3, #6
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	bf18      	it	ne
 8003ada:	2500      	movne	r5, #0
 8003adc:	6832      	ldr	r2, [r6, #0]
 8003ade:	f04f 0600 	mov.w	r6, #0
 8003ae2:	68a3      	ldr	r3, [r4, #8]
 8003ae4:	bf08      	it	eq
 8003ae6:	1aad      	subeq	r5, r5, r2
 8003ae8:	6922      	ldr	r2, [r4, #16]
 8003aea:	bf08      	it	eq
 8003aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bfc4      	itt	gt
 8003af4:	1a9b      	subgt	r3, r3, r2
 8003af6:	18ed      	addgt	r5, r5, r3
 8003af8:	341a      	adds	r4, #26
 8003afa:	42b5      	cmp	r5, r6
 8003afc:	d11a      	bne.n	8003b34 <_printf_common+0xcc>
 8003afe:	2000      	movs	r0, #0
 8003b00:	e008      	b.n	8003b14 <_printf_common+0xac>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4652      	mov	r2, sl
 8003b06:	4649      	mov	r1, r9
 8003b08:	4638      	mov	r0, r7
 8003b0a:	47c0      	blx	r8
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_printf_common+0xb0>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	3501      	adds	r5, #1
 8003b1a:	e7c4      	b.n	8003aa6 <_printf_common+0x3e>
 8003b1c:	2030      	movs	r0, #48	; 0x30
 8003b1e:	18e1      	adds	r1, r4, r3
 8003b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b2a:	4422      	add	r2, r4
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b32:	e7c5      	b.n	8003ac0 <_printf_common+0x58>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4622      	mov	r2, r4
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0e6      	beq.n	8003b10 <_printf_common+0xa8>
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7d9      	b.n	8003afa <_printf_common+0x92>
	...

08003b48 <_printf_i>:
 8003b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	7e0f      	ldrb	r7, [r1, #24]
 8003b4e:	4691      	mov	r9, r2
 8003b50:	2f78      	cmp	r7, #120	; 0x78
 8003b52:	4680      	mov	r8, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	469a      	mov	sl, r3
 8003b58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b5e:	d807      	bhi.n	8003b70 <_printf_i+0x28>
 8003b60:	2f62      	cmp	r7, #98	; 0x62
 8003b62:	d80a      	bhi.n	8003b7a <_printf_i+0x32>
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	f000 80d9 	beq.w	8003d1c <_printf_i+0x1d4>
 8003b6a:	2f58      	cmp	r7, #88	; 0x58
 8003b6c:	f000 80a4 	beq.w	8003cb8 <_printf_i+0x170>
 8003b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b78:	e03a      	b.n	8003bf0 <_printf_i+0xa8>
 8003b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b7e:	2b15      	cmp	r3, #21
 8003b80:	d8f6      	bhi.n	8003b70 <_printf_i+0x28>
 8003b82:	a101      	add	r1, pc, #4	; (adr r1, 8003b88 <_printf_i+0x40>)
 8003b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003b71 	.word	0x08003b71
 8003b94:	08003b71 	.word	0x08003b71
 8003b98:	08003b71 	.word	0x08003b71
 8003b9c:	08003b71 	.word	0x08003b71
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b71 	.word	0x08003b71
 8003ba8:	08003b71 	.word	0x08003b71
 8003bac:	08003b71 	.word	0x08003b71
 8003bb0:	08003b71 	.word	0x08003b71
 8003bb4:	08003d03 	.word	0x08003d03
 8003bb8:	08003c25 	.word	0x08003c25
 8003bbc:	08003ce5 	.word	0x08003ce5
 8003bc0:	08003b71 	.word	0x08003b71
 8003bc4:	08003b71 	.word	0x08003b71
 8003bc8:	08003d25 	.word	0x08003d25
 8003bcc:	08003b71 	.word	0x08003b71
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003b71 	.word	0x08003b71
 8003bdc:	08003ced 	.word	0x08003ced
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	602a      	str	r2, [r5, #0]
 8003be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0a4      	b.n	8003d3e <_printf_i+0x1f6>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	6829      	ldr	r1, [r5, #0]
 8003bf8:	0606      	lsls	r6, r0, #24
 8003bfa:	f101 0304 	add.w	r3, r1, #4
 8003bfe:	d50a      	bpl.n	8003c16 <_printf_i+0xce>
 8003c00:	680e      	ldr	r6, [r1, #0]
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	2e00      	cmp	r6, #0
 8003c06:	da03      	bge.n	8003c10 <_printf_i+0xc8>
 8003c08:	232d      	movs	r3, #45	; 0x2d
 8003c0a:	4276      	negs	r6, r6
 8003c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c10:	230a      	movs	r3, #10
 8003c12:	485e      	ldr	r0, [pc, #376]	; (8003d8c <_printf_i+0x244>)
 8003c14:	e019      	b.n	8003c4a <_printf_i+0x102>
 8003c16:	680e      	ldr	r6, [r1, #0]
 8003c18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c1c:	602b      	str	r3, [r5, #0]
 8003c1e:	bf18      	it	ne
 8003c20:	b236      	sxthne	r6, r6
 8003c22:	e7ef      	b.n	8003c04 <_printf_i+0xbc>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	1d19      	adds	r1, r3, #4
 8003c2a:	6029      	str	r1, [r5, #0]
 8003c2c:	0601      	lsls	r1, r0, #24
 8003c2e:	d501      	bpl.n	8003c34 <_printf_i+0xec>
 8003c30:	681e      	ldr	r6, [r3, #0]
 8003c32:	e002      	b.n	8003c3a <_printf_i+0xf2>
 8003c34:	0646      	lsls	r6, r0, #25
 8003c36:	d5fb      	bpl.n	8003c30 <_printf_i+0xe8>
 8003c38:	881e      	ldrh	r6, [r3, #0]
 8003c3a:	2f6f      	cmp	r7, #111	; 0x6f
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2308      	moveq	r3, #8
 8003c40:	230a      	movne	r3, #10
 8003c42:	4852      	ldr	r0, [pc, #328]	; (8003d8c <_printf_i+0x244>)
 8003c44:	2100      	movs	r1, #0
 8003c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c4a:	6865      	ldr	r5, [r4, #4]
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	bfa8      	it	ge
 8003c50:	6821      	ldrge	r1, [r4, #0]
 8003c52:	60a5      	str	r5, [r4, #8]
 8003c54:	bfa4      	itt	ge
 8003c56:	f021 0104 	bicge.w	r1, r1, #4
 8003c5a:	6021      	strge	r1, [r4, #0]
 8003c5c:	b90e      	cbnz	r6, 8003c62 <_printf_i+0x11a>
 8003c5e:	2d00      	cmp	r5, #0
 8003c60:	d04d      	beq.n	8003cfe <_printf_i+0x1b6>
 8003c62:	4615      	mov	r5, r2
 8003c64:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c68:	fb03 6711 	mls	r7, r3, r1, r6
 8003c6c:	5dc7      	ldrb	r7, [r0, r7]
 8003c6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c72:	4637      	mov	r7, r6
 8003c74:	42bb      	cmp	r3, r7
 8003c76:	460e      	mov	r6, r1
 8003c78:	d9f4      	bls.n	8003c64 <_printf_i+0x11c>
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d10b      	bne.n	8003c96 <_printf_i+0x14e>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	07de      	lsls	r6, r3, #31
 8003c82:	d508      	bpl.n	8003c96 <_printf_i+0x14e>
 8003c84:	6923      	ldr	r3, [r4, #16]
 8003c86:	6861      	ldr	r1, [r4, #4]
 8003c88:	4299      	cmp	r1, r3
 8003c8a:	bfde      	ittt	le
 8003c8c:	2330      	movle	r3, #48	; 0x30
 8003c8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c96:	1b52      	subs	r2, r2, r5
 8003c98:	6122      	str	r2, [r4, #16]
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f8cd a000 	str.w	sl, [sp]
 8003ca4:	aa03      	add	r2, sp, #12
 8003ca6:	f7ff fedf 	bl	8003a68 <_printf_common>
 8003caa:	3001      	adds	r0, #1
 8003cac:	d14c      	bne.n	8003d48 <_printf_i+0x200>
 8003cae:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb2:	b004      	add	sp, #16
 8003cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb8:	4834      	ldr	r0, [pc, #208]	; (8003d8c <_printf_i+0x244>)
 8003cba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003cbe:	6829      	ldr	r1, [r5, #0]
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cc6:	6029      	str	r1, [r5, #0]
 8003cc8:	061d      	lsls	r5, r3, #24
 8003cca:	d514      	bpl.n	8003cf6 <_printf_i+0x1ae>
 8003ccc:	07df      	lsls	r7, r3, #31
 8003cce:	bf44      	itt	mi
 8003cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cd4:	6023      	strmi	r3, [r4, #0]
 8003cd6:	b91e      	cbnz	r6, 8003ce0 <_printf_i+0x198>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	f023 0320 	bic.w	r3, r3, #32
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	e7af      	b.n	8003c44 <_printf_i+0xfc>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f043 0320 	orr.w	r3, r3, #32
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	2378      	movs	r3, #120	; 0x78
 8003cee:	4828      	ldr	r0, [pc, #160]	; (8003d90 <_printf_i+0x248>)
 8003cf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cf4:	e7e3      	b.n	8003cbe <_printf_i+0x176>
 8003cf6:	0659      	lsls	r1, r3, #25
 8003cf8:	bf48      	it	mi
 8003cfa:	b2b6      	uxthmi	r6, r6
 8003cfc:	e7e6      	b.n	8003ccc <_printf_i+0x184>
 8003cfe:	4615      	mov	r5, r2
 8003d00:	e7bb      	b.n	8003c7a <_printf_i+0x132>
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	6826      	ldr	r6, [r4, #0]
 8003d06:	1d18      	adds	r0, r3, #4
 8003d08:	6961      	ldr	r1, [r4, #20]
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	0635      	lsls	r5, r6, #24
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	d501      	bpl.n	8003d16 <_printf_i+0x1ce>
 8003d12:	6019      	str	r1, [r3, #0]
 8003d14:	e002      	b.n	8003d1c <_printf_i+0x1d4>
 8003d16:	0670      	lsls	r0, r6, #25
 8003d18:	d5fb      	bpl.n	8003d12 <_printf_i+0x1ca>
 8003d1a:	8019      	strh	r1, [r3, #0]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	4615      	mov	r5, r2
 8003d20:	6123      	str	r3, [r4, #16]
 8003d22:	e7ba      	b.n	8003c9a <_printf_i+0x152>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	2100      	movs	r1, #0
 8003d28:	1d1a      	adds	r2, r3, #4
 8003d2a:	602a      	str	r2, [r5, #0]
 8003d2c:	681d      	ldr	r5, [r3, #0]
 8003d2e:	6862      	ldr	r2, [r4, #4]
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 fed7 	bl	8004ae4 <memchr>
 8003d36:	b108      	cbz	r0, 8003d3c <_printf_i+0x1f4>
 8003d38:	1b40      	subs	r0, r0, r5
 8003d3a:	6060      	str	r0, [r4, #4]
 8003d3c:	6863      	ldr	r3, [r4, #4]
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	2300      	movs	r3, #0
 8003d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d46:	e7a8      	b.n	8003c9a <_printf_i+0x152>
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	4640      	mov	r0, r8
 8003d4e:	6923      	ldr	r3, [r4, #16]
 8003d50:	47d0      	blx	sl
 8003d52:	3001      	adds	r0, #1
 8003d54:	d0ab      	beq.n	8003cae <_printf_i+0x166>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	079b      	lsls	r3, r3, #30
 8003d5a:	d413      	bmi.n	8003d84 <_printf_i+0x23c>
 8003d5c:	68e0      	ldr	r0, [r4, #12]
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	4298      	cmp	r0, r3
 8003d62:	bfb8      	it	lt
 8003d64:	4618      	movlt	r0, r3
 8003d66:	e7a4      	b.n	8003cb2 <_printf_i+0x16a>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4632      	mov	r2, r6
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	4640      	mov	r0, r8
 8003d70:	47d0      	blx	sl
 8003d72:	3001      	adds	r0, #1
 8003d74:	d09b      	beq.n	8003cae <_printf_i+0x166>
 8003d76:	3501      	adds	r5, #1
 8003d78:	68e3      	ldr	r3, [r4, #12]
 8003d7a:	9903      	ldr	r1, [sp, #12]
 8003d7c:	1a5b      	subs	r3, r3, r1
 8003d7e:	42ab      	cmp	r3, r5
 8003d80:	dcf2      	bgt.n	8003d68 <_printf_i+0x220>
 8003d82:	e7eb      	b.n	8003d5c <_printf_i+0x214>
 8003d84:	2500      	movs	r5, #0
 8003d86:	f104 0619 	add.w	r6, r4, #25
 8003d8a:	e7f5      	b.n	8003d78 <_printf_i+0x230>
 8003d8c:	08006346 	.word	0x08006346
 8003d90:	08006357 	.word	0x08006357

08003d94 <siprintf>:
 8003d94:	b40e      	push	{r1, r2, r3}
 8003d96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d9a:	b500      	push	{lr}
 8003d9c:	b09c      	sub	sp, #112	; 0x70
 8003d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8003da0:	9002      	str	r0, [sp, #8]
 8003da2:	9006      	str	r0, [sp, #24]
 8003da4:	9107      	str	r1, [sp, #28]
 8003da6:	9104      	str	r1, [sp, #16]
 8003da8:	4808      	ldr	r0, [pc, #32]	; (8003dcc <siprintf+0x38>)
 8003daa:	4909      	ldr	r1, [pc, #36]	; (8003dd0 <siprintf+0x3c>)
 8003dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db0:	9105      	str	r1, [sp, #20]
 8003db2:	6800      	ldr	r0, [r0, #0]
 8003db4:	a902      	add	r1, sp, #8
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	f001 fb7e 	bl	80054b8 <_svfiprintf_r>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	9b02      	ldr	r3, [sp, #8]
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	b01c      	add	sp, #112	; 0x70
 8003dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc8:	b003      	add	sp, #12
 8003dca:	4770      	bx	lr
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	ffff0208 	.word	0xffff0208

08003dd4 <quorem>:
 8003dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd8:	6903      	ldr	r3, [r0, #16]
 8003dda:	690c      	ldr	r4, [r1, #16]
 8003ddc:	4607      	mov	r7, r0
 8003dde:	42a3      	cmp	r3, r4
 8003de0:	f2c0 8082 	blt.w	8003ee8 <quorem+0x114>
 8003de4:	3c01      	subs	r4, #1
 8003de6:	f100 0514 	add.w	r5, r0, #20
 8003dea:	f101 0814 	add.w	r8, r1, #20
 8003dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003e08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003e0c:	d331      	bcc.n	8003e72 <quorem+0x9e>
 8003e0e:	f04f 0e00 	mov.w	lr, #0
 8003e12:	4640      	mov	r0, r8
 8003e14:	46ac      	mov	ip, r5
 8003e16:	46f2      	mov	sl, lr
 8003e18:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e1c:	b293      	uxth	r3, r2
 8003e1e:	fb06 e303 	mla	r3, r6, r3, lr
 8003e22:	0c12      	lsrs	r2, r2, #16
 8003e24:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	fb06 e202 	mla	r2, r6, r2, lr
 8003e2e:	ebaa 0303 	sub.w	r3, sl, r3
 8003e32:	f8dc a000 	ldr.w	sl, [ip]
 8003e36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003e3a:	fa1f fa8a 	uxth.w	sl, sl
 8003e3e:	4453      	add	r3, sl
 8003e40:	f8dc a000 	ldr.w	sl, [ip]
 8003e44:	b292      	uxth	r2, r2
 8003e46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003e4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e54:	4581      	cmp	r9, r0
 8003e56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003e5a:	f84c 3b04 	str.w	r3, [ip], #4
 8003e5e:	d2db      	bcs.n	8003e18 <quorem+0x44>
 8003e60:	f855 300b 	ldr.w	r3, [r5, fp]
 8003e64:	b92b      	cbnz	r3, 8003e72 <quorem+0x9e>
 8003e66:	9b01      	ldr	r3, [sp, #4]
 8003e68:	3b04      	subs	r3, #4
 8003e6a:	429d      	cmp	r5, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	d32f      	bcc.n	8003ed0 <quorem+0xfc>
 8003e70:	613c      	str	r4, [r7, #16]
 8003e72:	4638      	mov	r0, r7
 8003e74:	f001 f8d0 	bl	8005018 <__mcmp>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	db25      	blt.n	8003ec8 <quorem+0xf4>
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f04f 0c00 	mov.w	ip, #0
 8003e82:	3601      	adds	r6, #1
 8003e84:	f858 1b04 	ldr.w	r1, [r8], #4
 8003e88:	f8d0 e000 	ldr.w	lr, [r0]
 8003e8c:	b28b      	uxth	r3, r1
 8003e8e:	ebac 0303 	sub.w	r3, ip, r3
 8003e92:	fa1f f28e 	uxth.w	r2, lr
 8003e96:	4413      	add	r3, r2
 8003e98:	0c0a      	lsrs	r2, r1, #16
 8003e9a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ea8:	45c1      	cmp	r9, r8
 8003eaa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003eae:	f840 3b04 	str.w	r3, [r0], #4
 8003eb2:	d2e7      	bcs.n	8003e84 <quorem+0xb0>
 8003eb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003eb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ebc:	b922      	cbnz	r2, 8003ec8 <quorem+0xf4>
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	429d      	cmp	r5, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	d30a      	bcc.n	8003edc <quorem+0x108>
 8003ec6:	613c      	str	r4, [r7, #16]
 8003ec8:	4630      	mov	r0, r6
 8003eca:	b003      	add	sp, #12
 8003ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	3b04      	subs	r3, #4
 8003ed4:	2a00      	cmp	r2, #0
 8003ed6:	d1cb      	bne.n	8003e70 <quorem+0x9c>
 8003ed8:	3c01      	subs	r4, #1
 8003eda:	e7c6      	b.n	8003e6a <quorem+0x96>
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	3b04      	subs	r3, #4
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <quorem+0xf2>
 8003ee4:	3c01      	subs	r4, #1
 8003ee6:	e7eb      	b.n	8003ec0 <quorem+0xec>
 8003ee8:	2000      	movs	r0, #0
 8003eea:	e7ee      	b.n	8003eca <quorem+0xf6>
 8003eec:	0000      	movs	r0, r0
	...

08003ef0 <_dtoa_r>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	461f      	mov	r7, r3
 8003ef8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003efa:	b099      	sub	sp, #100	; 0x64
 8003efc:	4605      	mov	r5, r0
 8003efe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003f02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003f06:	b974      	cbnz	r4, 8003f26 <_dtoa_r+0x36>
 8003f08:	2010      	movs	r0, #16
 8003f0a:	f000 fde3 	bl	8004ad4 <malloc>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	6268      	str	r0, [r5, #36]	; 0x24
 8003f12:	b920      	cbnz	r0, 8003f1e <_dtoa_r+0x2e>
 8003f14:	21ea      	movs	r1, #234	; 0xea
 8003f16:	4ba8      	ldr	r3, [pc, #672]	; (80041b8 <_dtoa_r+0x2c8>)
 8003f18:	48a8      	ldr	r0, [pc, #672]	; (80041bc <_dtoa_r+0x2cc>)
 8003f1a:	f001 fbdd 	bl	80056d8 <__assert_func>
 8003f1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f22:	6004      	str	r4, [r0, #0]
 8003f24:	60c4      	str	r4, [r0, #12]
 8003f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	b151      	cbz	r1, 8003f42 <_dtoa_r+0x52>
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4093      	lsls	r3, r2
 8003f32:	604a      	str	r2, [r1, #4]
 8003f34:	608b      	str	r3, [r1, #8]
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 fe30 	bl	8004b9c <_Bfree>
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	1e3b      	subs	r3, r7, #0
 8003f44:	bfaf      	iteee	ge
 8003f46:	2300      	movge	r3, #0
 8003f48:	2201      	movlt	r2, #1
 8003f4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003f4e:	9305      	strlt	r3, [sp, #20]
 8003f50:	bfa8      	it	ge
 8003f52:	f8c8 3000 	strge.w	r3, [r8]
 8003f56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003f5a:	4b99      	ldr	r3, [pc, #612]	; (80041c0 <_dtoa_r+0x2d0>)
 8003f5c:	bfb8      	it	lt
 8003f5e:	f8c8 2000 	strlt.w	r2, [r8]
 8003f62:	ea33 0309 	bics.w	r3, r3, r9
 8003f66:	d119      	bne.n	8003f9c <_dtoa_r+0xac>
 8003f68:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f74:	4333      	orrs	r3, r6
 8003f76:	f000 857f 	beq.w	8004a78 <_dtoa_r+0xb88>
 8003f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f7c:	b953      	cbnz	r3, 8003f94 <_dtoa_r+0xa4>
 8003f7e:	4b91      	ldr	r3, [pc, #580]	; (80041c4 <_dtoa_r+0x2d4>)
 8003f80:	e022      	b.n	8003fc8 <_dtoa_r+0xd8>
 8003f82:	4b91      	ldr	r3, [pc, #580]	; (80041c8 <_dtoa_r+0x2d8>)
 8003f84:	9303      	str	r3, [sp, #12]
 8003f86:	3308      	adds	r3, #8
 8003f88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	9803      	ldr	r0, [sp, #12]
 8003f8e:	b019      	add	sp, #100	; 0x64
 8003f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f94:	4b8b      	ldr	r3, [pc, #556]	; (80041c4 <_dtoa_r+0x2d4>)
 8003f96:	9303      	str	r3, [sp, #12]
 8003f98:	3303      	adds	r3, #3
 8003f9a:	e7f5      	b.n	8003f88 <_dtoa_r+0x98>
 8003f9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003fa0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2300      	movs	r3, #0
 8003fac:	f7fc fcfc 	bl	80009a8 <__aeabi_dcmpeq>
 8003fb0:	4680      	mov	r8, r0
 8003fb2:	b158      	cbz	r0, 8003fcc <_dtoa_r+0xdc>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8558 	beq.w	8004a72 <_dtoa_r+0xb82>
 8003fc2:	4882      	ldr	r0, [pc, #520]	; (80041cc <_dtoa_r+0x2dc>)
 8003fc4:	6018      	str	r0, [r3, #0]
 8003fc6:	1e43      	subs	r3, r0, #1
 8003fc8:	9303      	str	r3, [sp, #12]
 8003fca:	e7df      	b.n	8003f8c <_dtoa_r+0x9c>
 8003fcc:	ab16      	add	r3, sp, #88	; 0x58
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	ab17      	add	r3, sp, #92	; 0x5c
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003fda:	f001 f8c5 	bl	8005168 <__d2b>
 8003fde:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003fe2:	4683      	mov	fp, r0
 8003fe4:	2c00      	cmp	r4, #0
 8003fe6:	d07f      	beq.n	80040e8 <_dtoa_r+0x1f8>
 8003fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003ffa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003ffe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004002:	2200      	movs	r2, #0
 8004004:	4b72      	ldr	r3, [pc, #456]	; (80041d0 <_dtoa_r+0x2e0>)
 8004006:	f7fc f8af 	bl	8000168 <__aeabi_dsub>
 800400a:	a365      	add	r3, pc, #404	; (adr r3, 80041a0 <_dtoa_r+0x2b0>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f7fc fa62 	bl	80004d8 <__aeabi_dmul>
 8004014:	a364      	add	r3, pc, #400	; (adr r3, 80041a8 <_dtoa_r+0x2b8>)
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f7fc f8a7 	bl	800016c <__adddf3>
 800401e:	4606      	mov	r6, r0
 8004020:	4620      	mov	r0, r4
 8004022:	460f      	mov	r7, r1
 8004024:	f7fc f9ee 	bl	8000404 <__aeabi_i2d>
 8004028:	a361      	add	r3, pc, #388	; (adr r3, 80041b0 <_dtoa_r+0x2c0>)
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f7fc fa53 	bl	80004d8 <__aeabi_dmul>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4630      	mov	r0, r6
 8004038:	4639      	mov	r1, r7
 800403a:	f7fc f897 	bl	800016c <__adddf3>
 800403e:	4606      	mov	r6, r0
 8004040:	460f      	mov	r7, r1
 8004042:	f7fc fcf9 	bl	8000a38 <__aeabi_d2iz>
 8004046:	2200      	movs	r2, #0
 8004048:	4682      	mov	sl, r0
 800404a:	2300      	movs	r3, #0
 800404c:	4630      	mov	r0, r6
 800404e:	4639      	mov	r1, r7
 8004050:	f7fc fcb4 	bl	80009bc <__aeabi_dcmplt>
 8004054:	b148      	cbz	r0, 800406a <_dtoa_r+0x17a>
 8004056:	4650      	mov	r0, sl
 8004058:	f7fc f9d4 	bl	8000404 <__aeabi_i2d>
 800405c:	4632      	mov	r2, r6
 800405e:	463b      	mov	r3, r7
 8004060:	f7fc fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8004064:	b908      	cbnz	r0, 800406a <_dtoa_r+0x17a>
 8004066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800406a:	f1ba 0f16 	cmp.w	sl, #22
 800406e:	d858      	bhi.n	8004122 <_dtoa_r+0x232>
 8004070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004074:	4b57      	ldr	r3, [pc, #348]	; (80041d4 <_dtoa_r+0x2e4>)
 8004076:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc fc9d 	bl	80009bc <__aeabi_dcmplt>
 8004082:	2800      	cmp	r0, #0
 8004084:	d04f      	beq.n	8004126 <_dtoa_r+0x236>
 8004086:	2300      	movs	r3, #0
 8004088:	f10a 3aff 	add.w	sl, sl, #4294967295
 800408c:	930f      	str	r3, [sp, #60]	; 0x3c
 800408e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004090:	1b1c      	subs	r4, r3, r4
 8004092:	1e63      	subs	r3, r4, #1
 8004094:	9309      	str	r3, [sp, #36]	; 0x24
 8004096:	bf49      	itett	mi
 8004098:	f1c4 0301 	rsbmi	r3, r4, #1
 800409c:	2300      	movpl	r3, #0
 800409e:	9306      	strmi	r3, [sp, #24]
 80040a0:	2300      	movmi	r3, #0
 80040a2:	bf54      	ite	pl
 80040a4:	9306      	strpl	r3, [sp, #24]
 80040a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80040a8:	f1ba 0f00 	cmp.w	sl, #0
 80040ac:	db3d      	blt.n	800412a <_dtoa_r+0x23a>
 80040ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80040b4:	4453      	add	r3, sl
 80040b6:	9309      	str	r3, [sp, #36]	; 0x24
 80040b8:	2300      	movs	r3, #0
 80040ba:	930a      	str	r3, [sp, #40]	; 0x28
 80040bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040be:	2b09      	cmp	r3, #9
 80040c0:	f200 808c 	bhi.w	80041dc <_dtoa_r+0x2ec>
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	bfc4      	itt	gt
 80040c8:	3b04      	subgt	r3, #4
 80040ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80040cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040ce:	bfc8      	it	gt
 80040d0:	2400      	movgt	r4, #0
 80040d2:	f1a3 0302 	sub.w	r3, r3, #2
 80040d6:	bfd8      	it	le
 80040d8:	2401      	movle	r4, #1
 80040da:	2b03      	cmp	r3, #3
 80040dc:	f200 808a 	bhi.w	80041f4 <_dtoa_r+0x304>
 80040e0:	e8df f003 	tbb	[pc, r3]
 80040e4:	5b4d4f2d 	.word	0x5b4d4f2d
 80040e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80040ec:	441c      	add	r4, r3
 80040ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	bfc3      	ittte	gt
 80040f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80040fa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80040fe:	fa09 f303 	lslgt.w	r3, r9, r3
 8004102:	f1c3 0320 	rsble	r3, r3, #32
 8004106:	bfc6      	itte	gt
 8004108:	fa26 f000 	lsrgt.w	r0, r6, r0
 800410c:	4318      	orrgt	r0, r3
 800410e:	fa06 f003 	lslle.w	r0, r6, r3
 8004112:	f7fc f967 	bl	80003e4 <__aeabi_ui2d>
 8004116:	2301      	movs	r3, #1
 8004118:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800411c:	3c01      	subs	r4, #1
 800411e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004120:	e76f      	b.n	8004002 <_dtoa_r+0x112>
 8004122:	2301      	movs	r3, #1
 8004124:	e7b2      	b.n	800408c <_dtoa_r+0x19c>
 8004126:	900f      	str	r0, [sp, #60]	; 0x3c
 8004128:	e7b1      	b.n	800408e <_dtoa_r+0x19e>
 800412a:	9b06      	ldr	r3, [sp, #24]
 800412c:	eba3 030a 	sub.w	r3, r3, sl
 8004130:	9306      	str	r3, [sp, #24]
 8004132:	f1ca 0300 	rsb	r3, sl, #0
 8004136:	930a      	str	r3, [sp, #40]	; 0x28
 8004138:	2300      	movs	r3, #0
 800413a:	930e      	str	r3, [sp, #56]	; 0x38
 800413c:	e7be      	b.n	80040bc <_dtoa_r+0x1cc>
 800413e:	2300      	movs	r3, #0
 8004140:	930b      	str	r3, [sp, #44]	; 0x2c
 8004142:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004144:	2b00      	cmp	r3, #0
 8004146:	dc58      	bgt.n	80041fa <_dtoa_r+0x30a>
 8004148:	f04f 0901 	mov.w	r9, #1
 800414c:	464b      	mov	r3, r9
 800414e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004152:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004156:	2200      	movs	r2, #0
 8004158:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800415a:	6042      	str	r2, [r0, #4]
 800415c:	2204      	movs	r2, #4
 800415e:	f102 0614 	add.w	r6, r2, #20
 8004162:	429e      	cmp	r6, r3
 8004164:	6841      	ldr	r1, [r0, #4]
 8004166:	d94e      	bls.n	8004206 <_dtoa_r+0x316>
 8004168:	4628      	mov	r0, r5
 800416a:	f000 fcd7 	bl	8004b1c <_Balloc>
 800416e:	9003      	str	r0, [sp, #12]
 8004170:	2800      	cmp	r0, #0
 8004172:	d14c      	bne.n	800420e <_dtoa_r+0x31e>
 8004174:	4602      	mov	r2, r0
 8004176:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800417a:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <_dtoa_r+0x2e8>)
 800417c:	e6cc      	b.n	8003f18 <_dtoa_r+0x28>
 800417e:	2301      	movs	r3, #1
 8004180:	e7de      	b.n	8004140 <_dtoa_r+0x250>
 8004182:	2300      	movs	r3, #0
 8004184:	930b      	str	r3, [sp, #44]	; 0x2c
 8004186:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004188:	eb0a 0903 	add.w	r9, sl, r3
 800418c:	f109 0301 	add.w	r3, r9, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	9308      	str	r3, [sp, #32]
 8004194:	bfb8      	it	lt
 8004196:	2301      	movlt	r3, #1
 8004198:	e7dd      	b.n	8004156 <_dtoa_r+0x266>
 800419a:	2301      	movs	r3, #1
 800419c:	e7f2      	b.n	8004184 <_dtoa_r+0x294>
 800419e:	bf00      	nop
 80041a0:	636f4361 	.word	0x636f4361
 80041a4:	3fd287a7 	.word	0x3fd287a7
 80041a8:	8b60c8b3 	.word	0x8b60c8b3
 80041ac:	3fc68a28 	.word	0x3fc68a28
 80041b0:	509f79fb 	.word	0x509f79fb
 80041b4:	3fd34413 	.word	0x3fd34413
 80041b8:	08006375 	.word	0x08006375
 80041bc:	0800638c 	.word	0x0800638c
 80041c0:	7ff00000 	.word	0x7ff00000
 80041c4:	08006371 	.word	0x08006371
 80041c8:	08006368 	.word	0x08006368
 80041cc:	08006345 	.word	0x08006345
 80041d0:	3ff80000 	.word	0x3ff80000
 80041d4:	08006480 	.word	0x08006480
 80041d8:	080063e7 	.word	0x080063e7
 80041dc:	2401      	movs	r4, #1
 80041de:	2300      	movs	r3, #0
 80041e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80041e2:	9322      	str	r3, [sp, #136]	; 0x88
 80041e4:	f04f 39ff 	mov.w	r9, #4294967295
 80041e8:	2200      	movs	r2, #0
 80041ea:	2312      	movs	r3, #18
 80041ec:	f8cd 9020 	str.w	r9, [sp, #32]
 80041f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80041f2:	e7b0      	b.n	8004156 <_dtoa_r+0x266>
 80041f4:	2301      	movs	r3, #1
 80041f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80041f8:	e7f4      	b.n	80041e4 <_dtoa_r+0x2f4>
 80041fa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80041fe:	464b      	mov	r3, r9
 8004200:	f8cd 9020 	str.w	r9, [sp, #32]
 8004204:	e7a7      	b.n	8004156 <_dtoa_r+0x266>
 8004206:	3101      	adds	r1, #1
 8004208:	6041      	str	r1, [r0, #4]
 800420a:	0052      	lsls	r2, r2, #1
 800420c:	e7a7      	b.n	800415e <_dtoa_r+0x26e>
 800420e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004210:	9a03      	ldr	r2, [sp, #12]
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	9b08      	ldr	r3, [sp, #32]
 8004216:	2b0e      	cmp	r3, #14
 8004218:	f200 80a8 	bhi.w	800436c <_dtoa_r+0x47c>
 800421c:	2c00      	cmp	r4, #0
 800421e:	f000 80a5 	beq.w	800436c <_dtoa_r+0x47c>
 8004222:	f1ba 0f00 	cmp.w	sl, #0
 8004226:	dd34      	ble.n	8004292 <_dtoa_r+0x3a2>
 8004228:	4a9a      	ldr	r2, [pc, #616]	; (8004494 <_dtoa_r+0x5a4>)
 800422a:	f00a 030f 	and.w	r3, sl, #15
 800422e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004232:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004236:	e9d3 3400 	ldrd	r3, r4, [r3]
 800423a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800423e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004242:	d016      	beq.n	8004272 <_dtoa_r+0x382>
 8004244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004248:	4b93      	ldr	r3, [pc, #588]	; (8004498 <_dtoa_r+0x5a8>)
 800424a:	2703      	movs	r7, #3
 800424c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004250:	f7fc fa6c 	bl	800072c <__aeabi_ddiv>
 8004254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004258:	f004 040f 	and.w	r4, r4, #15
 800425c:	4e8e      	ldr	r6, [pc, #568]	; (8004498 <_dtoa_r+0x5a8>)
 800425e:	b954      	cbnz	r4, 8004276 <_dtoa_r+0x386>
 8004260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004268:	f7fc fa60 	bl	800072c <__aeabi_ddiv>
 800426c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004270:	e029      	b.n	80042c6 <_dtoa_r+0x3d6>
 8004272:	2702      	movs	r7, #2
 8004274:	e7f2      	b.n	800425c <_dtoa_r+0x36c>
 8004276:	07e1      	lsls	r1, r4, #31
 8004278:	d508      	bpl.n	800428c <_dtoa_r+0x39c>
 800427a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800427e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004282:	f7fc f929 	bl	80004d8 <__aeabi_dmul>
 8004286:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800428a:	3701      	adds	r7, #1
 800428c:	1064      	asrs	r4, r4, #1
 800428e:	3608      	adds	r6, #8
 8004290:	e7e5      	b.n	800425e <_dtoa_r+0x36e>
 8004292:	f000 80a5 	beq.w	80043e0 <_dtoa_r+0x4f0>
 8004296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800429a:	f1ca 0400 	rsb	r4, sl, #0
 800429e:	4b7d      	ldr	r3, [pc, #500]	; (8004494 <_dtoa_r+0x5a4>)
 80042a0:	f004 020f 	and.w	r2, r4, #15
 80042a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f7fc f914 	bl	80004d8 <__aeabi_dmul>
 80042b0:	2702      	movs	r7, #2
 80042b2:	2300      	movs	r3, #0
 80042b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042b8:	4e77      	ldr	r6, [pc, #476]	; (8004498 <_dtoa_r+0x5a8>)
 80042ba:	1124      	asrs	r4, r4, #4
 80042bc:	2c00      	cmp	r4, #0
 80042be:	f040 8084 	bne.w	80043ca <_dtoa_r+0x4da>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1d2      	bne.n	800426c <_dtoa_r+0x37c>
 80042c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 808b 	beq.w	80043e4 <_dtoa_r+0x4f4>
 80042ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80042d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80042d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042da:	2200      	movs	r2, #0
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <_dtoa_r+0x5ac>)
 80042de:	f7fc fb6d 	bl	80009bc <__aeabi_dcmplt>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d07e      	beq.n	80043e4 <_dtoa_r+0x4f4>
 80042e6:	9b08      	ldr	r3, [sp, #32]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d07b      	beq.n	80043e4 <_dtoa_r+0x4f4>
 80042ec:	f1b9 0f00 	cmp.w	r9, #0
 80042f0:	dd38      	ble.n	8004364 <_dtoa_r+0x474>
 80042f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042f6:	2200      	movs	r2, #0
 80042f8:	4b69      	ldr	r3, [pc, #420]	; (80044a0 <_dtoa_r+0x5b0>)
 80042fa:	f7fc f8ed 	bl	80004d8 <__aeabi_dmul>
 80042fe:	464c      	mov	r4, r9
 8004300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004304:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004308:	3701      	adds	r7, #1
 800430a:	4638      	mov	r0, r7
 800430c:	f7fc f87a 	bl	8000404 <__aeabi_i2d>
 8004310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004314:	f7fc f8e0 	bl	80004d8 <__aeabi_dmul>
 8004318:	2200      	movs	r2, #0
 800431a:	4b62      	ldr	r3, [pc, #392]	; (80044a4 <_dtoa_r+0x5b4>)
 800431c:	f7fb ff26 	bl	800016c <__adddf3>
 8004320:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004324:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004328:	9611      	str	r6, [sp, #68]	; 0x44
 800432a:	2c00      	cmp	r4, #0
 800432c:	d15d      	bne.n	80043ea <_dtoa_r+0x4fa>
 800432e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004332:	2200      	movs	r2, #0
 8004334:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <_dtoa_r+0x5b8>)
 8004336:	f7fb ff17 	bl	8000168 <__aeabi_dsub>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004342:	4633      	mov	r3, r6
 8004344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004346:	f7fc fb57 	bl	80009f8 <__aeabi_dcmpgt>
 800434a:	2800      	cmp	r0, #0
 800434c:	f040 829c 	bne.w	8004888 <_dtoa_r+0x998>
 8004350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004356:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800435a:	f7fc fb2f 	bl	80009bc <__aeabi_dcmplt>
 800435e:	2800      	cmp	r0, #0
 8004360:	f040 8290 	bne.w	8004884 <_dtoa_r+0x994>
 8004364:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004368:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800436c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800436e:	2b00      	cmp	r3, #0
 8004370:	f2c0 8152 	blt.w	8004618 <_dtoa_r+0x728>
 8004374:	f1ba 0f0e 	cmp.w	sl, #14
 8004378:	f300 814e 	bgt.w	8004618 <_dtoa_r+0x728>
 800437c:	4b45      	ldr	r3, [pc, #276]	; (8004494 <_dtoa_r+0x5a4>)
 800437e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004382:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004386:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800438a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800438c:	2b00      	cmp	r3, #0
 800438e:	f280 80db 	bge.w	8004548 <_dtoa_r+0x658>
 8004392:	9b08      	ldr	r3, [sp, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f300 80d7 	bgt.w	8004548 <_dtoa_r+0x658>
 800439a:	f040 8272 	bne.w	8004882 <_dtoa_r+0x992>
 800439e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043a2:	2200      	movs	r2, #0
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <_dtoa_r+0x5b8>)
 80043a6:	f7fc f897 	bl	80004d8 <__aeabi_dmul>
 80043aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043ae:	f7fc fb19 	bl	80009e4 <__aeabi_dcmpge>
 80043b2:	9c08      	ldr	r4, [sp, #32]
 80043b4:	4626      	mov	r6, r4
 80043b6:	2800      	cmp	r0, #0
 80043b8:	f040 8248 	bne.w	800484c <_dtoa_r+0x95c>
 80043bc:	2331      	movs	r3, #49	; 0x31
 80043be:	9f03      	ldr	r7, [sp, #12]
 80043c0:	f10a 0a01 	add.w	sl, sl, #1
 80043c4:	f807 3b01 	strb.w	r3, [r7], #1
 80043c8:	e244      	b.n	8004854 <_dtoa_r+0x964>
 80043ca:	07e2      	lsls	r2, r4, #31
 80043cc:	d505      	bpl.n	80043da <_dtoa_r+0x4ea>
 80043ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80043d2:	f7fc f881 	bl	80004d8 <__aeabi_dmul>
 80043d6:	2301      	movs	r3, #1
 80043d8:	3701      	adds	r7, #1
 80043da:	1064      	asrs	r4, r4, #1
 80043dc:	3608      	adds	r6, #8
 80043de:	e76d      	b.n	80042bc <_dtoa_r+0x3cc>
 80043e0:	2702      	movs	r7, #2
 80043e2:	e770      	b.n	80042c6 <_dtoa_r+0x3d6>
 80043e4:	46d0      	mov	r8, sl
 80043e6:	9c08      	ldr	r4, [sp, #32]
 80043e8:	e78f      	b.n	800430a <_dtoa_r+0x41a>
 80043ea:	9903      	ldr	r1, [sp, #12]
 80043ec:	4b29      	ldr	r3, [pc, #164]	; (8004494 <_dtoa_r+0x5a4>)
 80043ee:	4421      	add	r1, r4
 80043f0:	9112      	str	r1, [sp, #72]	; 0x48
 80043f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80043fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004400:	2900      	cmp	r1, #0
 8004402:	d055      	beq.n	80044b0 <_dtoa_r+0x5c0>
 8004404:	2000      	movs	r0, #0
 8004406:	4929      	ldr	r1, [pc, #164]	; (80044ac <_dtoa_r+0x5bc>)
 8004408:	f7fc f990 	bl	800072c <__aeabi_ddiv>
 800440c:	463b      	mov	r3, r7
 800440e:	4632      	mov	r2, r6
 8004410:	f7fb feaa 	bl	8000168 <__aeabi_dsub>
 8004414:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004418:	9f03      	ldr	r7, [sp, #12]
 800441a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800441e:	f7fc fb0b 	bl	8000a38 <__aeabi_d2iz>
 8004422:	4604      	mov	r4, r0
 8004424:	f7fb ffee 	bl	8000404 <__aeabi_i2d>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004430:	f7fb fe9a 	bl	8000168 <__aeabi_dsub>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	3430      	adds	r4, #48	; 0x30
 800443a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800443e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004442:	f807 4b01 	strb.w	r4, [r7], #1
 8004446:	f7fc fab9 	bl	80009bc <__aeabi_dcmplt>
 800444a:	2800      	cmp	r0, #0
 800444c:	d174      	bne.n	8004538 <_dtoa_r+0x648>
 800444e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004452:	2000      	movs	r0, #0
 8004454:	4911      	ldr	r1, [pc, #68]	; (800449c <_dtoa_r+0x5ac>)
 8004456:	f7fb fe87 	bl	8000168 <__aeabi_dsub>
 800445a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800445e:	f7fc faad 	bl	80009bc <__aeabi_dcmplt>
 8004462:	2800      	cmp	r0, #0
 8004464:	f040 80b7 	bne.w	80045d6 <_dtoa_r+0x6e6>
 8004468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800446a:	429f      	cmp	r7, r3
 800446c:	f43f af7a 	beq.w	8004364 <_dtoa_r+0x474>
 8004470:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004474:	2200      	movs	r2, #0
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <_dtoa_r+0x5b0>)
 8004478:	f7fc f82e 	bl	80004d8 <__aeabi_dmul>
 800447c:	2200      	movs	r2, #0
 800447e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <_dtoa_r+0x5b0>)
 8004488:	f7fc f826 	bl	80004d8 <__aeabi_dmul>
 800448c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004490:	e7c3      	b.n	800441a <_dtoa_r+0x52a>
 8004492:	bf00      	nop
 8004494:	08006480 	.word	0x08006480
 8004498:	08006458 	.word	0x08006458
 800449c:	3ff00000 	.word	0x3ff00000
 80044a0:	40240000 	.word	0x40240000
 80044a4:	401c0000 	.word	0x401c0000
 80044a8:	40140000 	.word	0x40140000
 80044ac:	3fe00000 	.word	0x3fe00000
 80044b0:	4630      	mov	r0, r6
 80044b2:	4639      	mov	r1, r7
 80044b4:	f7fc f810 	bl	80004d8 <__aeabi_dmul>
 80044b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044be:	9c03      	ldr	r4, [sp, #12]
 80044c0:	9314      	str	r3, [sp, #80]	; 0x50
 80044c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044c6:	f7fc fab7 	bl	8000a38 <__aeabi_d2iz>
 80044ca:	9015      	str	r0, [sp, #84]	; 0x54
 80044cc:	f7fb ff9a 	bl	8000404 <__aeabi_i2d>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044d8:	f7fb fe46 	bl	8000168 <__aeabi_dsub>
 80044dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044de:	4606      	mov	r6, r0
 80044e0:	3330      	adds	r3, #48	; 0x30
 80044e2:	f804 3b01 	strb.w	r3, [r4], #1
 80044e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044e8:	460f      	mov	r7, r1
 80044ea:	429c      	cmp	r4, r3
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	d124      	bne.n	800453c <_dtoa_r+0x64c>
 80044f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80044f6:	4bb0      	ldr	r3, [pc, #704]	; (80047b8 <_dtoa_r+0x8c8>)
 80044f8:	f7fb fe38 	bl	800016c <__adddf3>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4630      	mov	r0, r6
 8004502:	4639      	mov	r1, r7
 8004504:	f7fc fa78 	bl	80009f8 <__aeabi_dcmpgt>
 8004508:	2800      	cmp	r0, #0
 800450a:	d163      	bne.n	80045d4 <_dtoa_r+0x6e4>
 800450c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004510:	2000      	movs	r0, #0
 8004512:	49a9      	ldr	r1, [pc, #676]	; (80047b8 <_dtoa_r+0x8c8>)
 8004514:	f7fb fe28 	bl	8000168 <__aeabi_dsub>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4630      	mov	r0, r6
 800451e:	4639      	mov	r1, r7
 8004520:	f7fc fa4c 	bl	80009bc <__aeabi_dcmplt>
 8004524:	2800      	cmp	r0, #0
 8004526:	f43f af1d 	beq.w	8004364 <_dtoa_r+0x474>
 800452a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800452c:	1e7b      	subs	r3, r7, #1
 800452e:	9314      	str	r3, [sp, #80]	; 0x50
 8004530:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004534:	2b30      	cmp	r3, #48	; 0x30
 8004536:	d0f8      	beq.n	800452a <_dtoa_r+0x63a>
 8004538:	46c2      	mov	sl, r8
 800453a:	e03b      	b.n	80045b4 <_dtoa_r+0x6c4>
 800453c:	4b9f      	ldr	r3, [pc, #636]	; (80047bc <_dtoa_r+0x8cc>)
 800453e:	f7fb ffcb 	bl	80004d8 <__aeabi_dmul>
 8004542:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004546:	e7bc      	b.n	80044c2 <_dtoa_r+0x5d2>
 8004548:	9f03      	ldr	r7, [sp, #12]
 800454a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800454e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004552:	4640      	mov	r0, r8
 8004554:	4649      	mov	r1, r9
 8004556:	f7fc f8e9 	bl	800072c <__aeabi_ddiv>
 800455a:	f7fc fa6d 	bl	8000a38 <__aeabi_d2iz>
 800455e:	4604      	mov	r4, r0
 8004560:	f7fb ff50 	bl	8000404 <__aeabi_i2d>
 8004564:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004568:	f7fb ffb6 	bl	80004d8 <__aeabi_dmul>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4640      	mov	r0, r8
 8004572:	4649      	mov	r1, r9
 8004574:	f7fb fdf8 	bl	8000168 <__aeabi_dsub>
 8004578:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800457c:	f807 6b01 	strb.w	r6, [r7], #1
 8004580:	9e03      	ldr	r6, [sp, #12]
 8004582:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004586:	1bbe      	subs	r6, r7, r6
 8004588:	45b4      	cmp	ip, r6
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	d136      	bne.n	80045fe <_dtoa_r+0x70e>
 8004590:	f7fb fdec 	bl	800016c <__adddf3>
 8004594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004598:	4680      	mov	r8, r0
 800459a:	4689      	mov	r9, r1
 800459c:	f7fc fa2c 	bl	80009f8 <__aeabi_dcmpgt>
 80045a0:	bb58      	cbnz	r0, 80045fa <_dtoa_r+0x70a>
 80045a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045a6:	4640      	mov	r0, r8
 80045a8:	4649      	mov	r1, r9
 80045aa:	f7fc f9fd 	bl	80009a8 <__aeabi_dcmpeq>
 80045ae:	b108      	cbz	r0, 80045b4 <_dtoa_r+0x6c4>
 80045b0:	07e1      	lsls	r1, r4, #31
 80045b2:	d422      	bmi.n	80045fa <_dtoa_r+0x70a>
 80045b4:	4628      	mov	r0, r5
 80045b6:	4659      	mov	r1, fp
 80045b8:	f000 faf0 	bl	8004b9c <_Bfree>
 80045bc:	2300      	movs	r3, #0
 80045be:	703b      	strb	r3, [r7, #0]
 80045c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80045c2:	f10a 0001 	add.w	r0, sl, #1
 80045c6:	6018      	str	r0, [r3, #0]
 80045c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f43f acde 	beq.w	8003f8c <_dtoa_r+0x9c>
 80045d0:	601f      	str	r7, [r3, #0]
 80045d2:	e4db      	b.n	8003f8c <_dtoa_r+0x9c>
 80045d4:	4627      	mov	r7, r4
 80045d6:	463b      	mov	r3, r7
 80045d8:	461f      	mov	r7, r3
 80045da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045de:	2a39      	cmp	r2, #57	; 0x39
 80045e0:	d107      	bne.n	80045f2 <_dtoa_r+0x702>
 80045e2:	9a03      	ldr	r2, [sp, #12]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d1f7      	bne.n	80045d8 <_dtoa_r+0x6e8>
 80045e8:	2230      	movs	r2, #48	; 0x30
 80045ea:	9903      	ldr	r1, [sp, #12]
 80045ec:	f108 0801 	add.w	r8, r8, #1
 80045f0:	700a      	strb	r2, [r1, #0]
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	3201      	adds	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e79e      	b.n	8004538 <_dtoa_r+0x648>
 80045fa:	46d0      	mov	r8, sl
 80045fc:	e7eb      	b.n	80045d6 <_dtoa_r+0x6e6>
 80045fe:	2200      	movs	r2, #0
 8004600:	4b6e      	ldr	r3, [pc, #440]	; (80047bc <_dtoa_r+0x8cc>)
 8004602:	f7fb ff69 	bl	80004d8 <__aeabi_dmul>
 8004606:	2200      	movs	r2, #0
 8004608:	2300      	movs	r3, #0
 800460a:	4680      	mov	r8, r0
 800460c:	4689      	mov	r9, r1
 800460e:	f7fc f9cb 	bl	80009a8 <__aeabi_dcmpeq>
 8004612:	2800      	cmp	r0, #0
 8004614:	d09b      	beq.n	800454e <_dtoa_r+0x65e>
 8004616:	e7cd      	b.n	80045b4 <_dtoa_r+0x6c4>
 8004618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800461a:	2a00      	cmp	r2, #0
 800461c:	f000 80d0 	beq.w	80047c0 <_dtoa_r+0x8d0>
 8004620:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004622:	2a01      	cmp	r2, #1
 8004624:	f300 80ae 	bgt.w	8004784 <_dtoa_r+0x894>
 8004628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800462a:	2a00      	cmp	r2, #0
 800462c:	f000 80a6 	beq.w	800477c <_dtoa_r+0x88c>
 8004630:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004634:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004636:	9f06      	ldr	r7, [sp, #24]
 8004638:	9a06      	ldr	r2, [sp, #24]
 800463a:	2101      	movs	r1, #1
 800463c:	441a      	add	r2, r3
 800463e:	9206      	str	r2, [sp, #24]
 8004640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004642:	4628      	mov	r0, r5
 8004644:	441a      	add	r2, r3
 8004646:	9209      	str	r2, [sp, #36]	; 0x24
 8004648:	f000 fb5e 	bl	8004d08 <__i2b>
 800464c:	4606      	mov	r6, r0
 800464e:	2f00      	cmp	r7, #0
 8004650:	dd0c      	ble.n	800466c <_dtoa_r+0x77c>
 8004652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	dd09      	ble.n	800466c <_dtoa_r+0x77c>
 8004658:	42bb      	cmp	r3, r7
 800465a:	bfa8      	it	ge
 800465c:	463b      	movge	r3, r7
 800465e:	9a06      	ldr	r2, [sp, #24]
 8004660:	1aff      	subs	r7, r7, r3
 8004662:	1ad2      	subs	r2, r2, r3
 8004664:	9206      	str	r2, [sp, #24]
 8004666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	9309      	str	r3, [sp, #36]	; 0x24
 800466c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800466e:	b1f3      	cbz	r3, 80046ae <_dtoa_r+0x7be>
 8004670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80a8 	beq.w	80047c8 <_dtoa_r+0x8d8>
 8004678:	2c00      	cmp	r4, #0
 800467a:	dd10      	ble.n	800469e <_dtoa_r+0x7ae>
 800467c:	4631      	mov	r1, r6
 800467e:	4622      	mov	r2, r4
 8004680:	4628      	mov	r0, r5
 8004682:	f000 fbff 	bl	8004e84 <__pow5mult>
 8004686:	465a      	mov	r2, fp
 8004688:	4601      	mov	r1, r0
 800468a:	4606      	mov	r6, r0
 800468c:	4628      	mov	r0, r5
 800468e:	f000 fb51 	bl	8004d34 <__multiply>
 8004692:	4680      	mov	r8, r0
 8004694:	4659      	mov	r1, fp
 8004696:	4628      	mov	r0, r5
 8004698:	f000 fa80 	bl	8004b9c <_Bfree>
 800469c:	46c3      	mov	fp, r8
 800469e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a0:	1b1a      	subs	r2, r3, r4
 80046a2:	d004      	beq.n	80046ae <_dtoa_r+0x7be>
 80046a4:	4659      	mov	r1, fp
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 fbec 	bl	8004e84 <__pow5mult>
 80046ac:	4683      	mov	fp, r0
 80046ae:	2101      	movs	r1, #1
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 fb29 	bl	8004d08 <__i2b>
 80046b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046b8:	4604      	mov	r4, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f340 8086 	ble.w	80047cc <_dtoa_r+0x8dc>
 80046c0:	461a      	mov	r2, r3
 80046c2:	4601      	mov	r1, r0
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 fbdd 	bl	8004e84 <__pow5mult>
 80046ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046cc:	4604      	mov	r4, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	dd7f      	ble.n	80047d2 <_dtoa_r+0x8e2>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80046dc:	6918      	ldr	r0, [r3, #16]
 80046de:	f000 fac5 	bl	8004c6c <__hi0bits>
 80046e2:	f1c0 0020 	rsb	r0, r0, #32
 80046e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e8:	4418      	add	r0, r3
 80046ea:	f010 001f 	ands.w	r0, r0, #31
 80046ee:	f000 8092 	beq.w	8004816 <_dtoa_r+0x926>
 80046f2:	f1c0 0320 	rsb	r3, r0, #32
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	f340 808a 	ble.w	8004810 <_dtoa_r+0x920>
 80046fc:	f1c0 001c 	rsb	r0, r0, #28
 8004700:	9b06      	ldr	r3, [sp, #24]
 8004702:	4407      	add	r7, r0
 8004704:	4403      	add	r3, r0
 8004706:	9306      	str	r3, [sp, #24]
 8004708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470a:	4403      	add	r3, r0
 800470c:	9309      	str	r3, [sp, #36]	; 0x24
 800470e:	9b06      	ldr	r3, [sp, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	dd05      	ble.n	8004720 <_dtoa_r+0x830>
 8004714:	4659      	mov	r1, fp
 8004716:	461a      	mov	r2, r3
 8004718:	4628      	mov	r0, r5
 800471a:	f000 fc0d 	bl	8004f38 <__lshift>
 800471e:	4683      	mov	fp, r0
 8004720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	dd05      	ble.n	8004732 <_dtoa_r+0x842>
 8004726:	4621      	mov	r1, r4
 8004728:	461a      	mov	r2, r3
 800472a:	4628      	mov	r0, r5
 800472c:	f000 fc04 	bl	8004f38 <__lshift>
 8004730:	4604      	mov	r4, r0
 8004732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d070      	beq.n	800481a <_dtoa_r+0x92a>
 8004738:	4621      	mov	r1, r4
 800473a:	4658      	mov	r0, fp
 800473c:	f000 fc6c 	bl	8005018 <__mcmp>
 8004740:	2800      	cmp	r0, #0
 8004742:	da6a      	bge.n	800481a <_dtoa_r+0x92a>
 8004744:	2300      	movs	r3, #0
 8004746:	4659      	mov	r1, fp
 8004748:	220a      	movs	r2, #10
 800474a:	4628      	mov	r0, r5
 800474c:	f000 fa48 	bl	8004be0 <__multadd>
 8004750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004752:	4683      	mov	fp, r0
 8004754:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8194 	beq.w	8004a86 <_dtoa_r+0xb96>
 800475e:	4631      	mov	r1, r6
 8004760:	2300      	movs	r3, #0
 8004762:	220a      	movs	r2, #10
 8004764:	4628      	mov	r0, r5
 8004766:	f000 fa3b 	bl	8004be0 <__multadd>
 800476a:	f1b9 0f00 	cmp.w	r9, #0
 800476e:	4606      	mov	r6, r0
 8004770:	f300 8093 	bgt.w	800489a <_dtoa_r+0x9aa>
 8004774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004776:	2b02      	cmp	r3, #2
 8004778:	dc57      	bgt.n	800482a <_dtoa_r+0x93a>
 800477a:	e08e      	b.n	800489a <_dtoa_r+0x9aa>
 800477c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800477e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004782:	e757      	b.n	8004634 <_dtoa_r+0x744>
 8004784:	9b08      	ldr	r3, [sp, #32]
 8004786:	1e5c      	subs	r4, r3, #1
 8004788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800478a:	42a3      	cmp	r3, r4
 800478c:	bfb7      	itett	lt
 800478e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004790:	1b1c      	subge	r4, r3, r4
 8004792:	1ae2      	sublt	r2, r4, r3
 8004794:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004796:	bfbe      	ittt	lt
 8004798:	940a      	strlt	r4, [sp, #40]	; 0x28
 800479a:	189b      	addlt	r3, r3, r2
 800479c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800479e:	9b08      	ldr	r3, [sp, #32]
 80047a0:	bfb8      	it	lt
 80047a2:	2400      	movlt	r4, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bfbb      	ittet	lt
 80047a8:	9b06      	ldrlt	r3, [sp, #24]
 80047aa:	9a08      	ldrlt	r2, [sp, #32]
 80047ac:	9f06      	ldrge	r7, [sp, #24]
 80047ae:	1a9f      	sublt	r7, r3, r2
 80047b0:	bfac      	ite	ge
 80047b2:	9b08      	ldrge	r3, [sp, #32]
 80047b4:	2300      	movlt	r3, #0
 80047b6:	e73f      	b.n	8004638 <_dtoa_r+0x748>
 80047b8:	3fe00000 	.word	0x3fe00000
 80047bc:	40240000 	.word	0x40240000
 80047c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80047c2:	9f06      	ldr	r7, [sp, #24]
 80047c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80047c6:	e742      	b.n	800464e <_dtoa_r+0x75e>
 80047c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047ca:	e76b      	b.n	80046a4 <_dtoa_r+0x7b4>
 80047cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	dc19      	bgt.n	8004806 <_dtoa_r+0x916>
 80047d2:	9b04      	ldr	r3, [sp, #16]
 80047d4:	b9bb      	cbnz	r3, 8004806 <_dtoa_r+0x916>
 80047d6:	9b05      	ldr	r3, [sp, #20]
 80047d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047dc:	b99b      	cbnz	r3, 8004806 <_dtoa_r+0x916>
 80047de:	9b05      	ldr	r3, [sp, #20]
 80047e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047e4:	0d1b      	lsrs	r3, r3, #20
 80047e6:	051b      	lsls	r3, r3, #20
 80047e8:	b183      	cbz	r3, 800480c <_dtoa_r+0x91c>
 80047ea:	f04f 0801 	mov.w	r8, #1
 80047ee:	9b06      	ldr	r3, [sp, #24]
 80047f0:	3301      	adds	r3, #1
 80047f2:	9306      	str	r3, [sp, #24]
 80047f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f6:	3301      	adds	r3, #1
 80047f8:	9309      	str	r3, [sp, #36]	; 0x24
 80047fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f af6a 	bne.w	80046d6 <_dtoa_r+0x7e6>
 8004802:	2001      	movs	r0, #1
 8004804:	e76f      	b.n	80046e6 <_dtoa_r+0x7f6>
 8004806:	f04f 0800 	mov.w	r8, #0
 800480a:	e7f6      	b.n	80047fa <_dtoa_r+0x90a>
 800480c:	4698      	mov	r8, r3
 800480e:	e7f4      	b.n	80047fa <_dtoa_r+0x90a>
 8004810:	f43f af7d 	beq.w	800470e <_dtoa_r+0x81e>
 8004814:	4618      	mov	r0, r3
 8004816:	301c      	adds	r0, #28
 8004818:	e772      	b.n	8004700 <_dtoa_r+0x810>
 800481a:	9b08      	ldr	r3, [sp, #32]
 800481c:	2b00      	cmp	r3, #0
 800481e:	dc36      	bgt.n	800488e <_dtoa_r+0x99e>
 8004820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004822:	2b02      	cmp	r3, #2
 8004824:	dd33      	ble.n	800488e <_dtoa_r+0x99e>
 8004826:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800482a:	f1b9 0f00 	cmp.w	r9, #0
 800482e:	d10d      	bne.n	800484c <_dtoa_r+0x95c>
 8004830:	4621      	mov	r1, r4
 8004832:	464b      	mov	r3, r9
 8004834:	2205      	movs	r2, #5
 8004836:	4628      	mov	r0, r5
 8004838:	f000 f9d2 	bl	8004be0 <__multadd>
 800483c:	4601      	mov	r1, r0
 800483e:	4604      	mov	r4, r0
 8004840:	4658      	mov	r0, fp
 8004842:	f000 fbe9 	bl	8005018 <__mcmp>
 8004846:	2800      	cmp	r0, #0
 8004848:	f73f adb8 	bgt.w	80043bc <_dtoa_r+0x4cc>
 800484c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800484e:	9f03      	ldr	r7, [sp, #12]
 8004850:	ea6f 0a03 	mvn.w	sl, r3
 8004854:	f04f 0800 	mov.w	r8, #0
 8004858:	4621      	mov	r1, r4
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f99e 	bl	8004b9c <_Bfree>
 8004860:	2e00      	cmp	r6, #0
 8004862:	f43f aea7 	beq.w	80045b4 <_dtoa_r+0x6c4>
 8004866:	f1b8 0f00 	cmp.w	r8, #0
 800486a:	d005      	beq.n	8004878 <_dtoa_r+0x988>
 800486c:	45b0      	cmp	r8, r6
 800486e:	d003      	beq.n	8004878 <_dtoa_r+0x988>
 8004870:	4641      	mov	r1, r8
 8004872:	4628      	mov	r0, r5
 8004874:	f000 f992 	bl	8004b9c <_Bfree>
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	f000 f98e 	bl	8004b9c <_Bfree>
 8004880:	e698      	b.n	80045b4 <_dtoa_r+0x6c4>
 8004882:	2400      	movs	r4, #0
 8004884:	4626      	mov	r6, r4
 8004886:	e7e1      	b.n	800484c <_dtoa_r+0x95c>
 8004888:	46c2      	mov	sl, r8
 800488a:	4626      	mov	r6, r4
 800488c:	e596      	b.n	80043bc <_dtoa_r+0x4cc>
 800488e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80fd 	beq.w	8004a94 <_dtoa_r+0xba4>
 800489a:	2f00      	cmp	r7, #0
 800489c:	dd05      	ble.n	80048aa <_dtoa_r+0x9ba>
 800489e:	4631      	mov	r1, r6
 80048a0:	463a      	mov	r2, r7
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 fb48 	bl	8004f38 <__lshift>
 80048a8:	4606      	mov	r6, r0
 80048aa:	f1b8 0f00 	cmp.w	r8, #0
 80048ae:	d05c      	beq.n	800496a <_dtoa_r+0xa7a>
 80048b0:	4628      	mov	r0, r5
 80048b2:	6871      	ldr	r1, [r6, #4]
 80048b4:	f000 f932 	bl	8004b1c <_Balloc>
 80048b8:	4607      	mov	r7, r0
 80048ba:	b928      	cbnz	r0, 80048c8 <_dtoa_r+0x9d8>
 80048bc:	4602      	mov	r2, r0
 80048be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80048c2:	4b7f      	ldr	r3, [pc, #508]	; (8004ac0 <_dtoa_r+0xbd0>)
 80048c4:	f7ff bb28 	b.w	8003f18 <_dtoa_r+0x28>
 80048c8:	6932      	ldr	r2, [r6, #16]
 80048ca:	f106 010c 	add.w	r1, r6, #12
 80048ce:	3202      	adds	r2, #2
 80048d0:	0092      	lsls	r2, r2, #2
 80048d2:	300c      	adds	r0, #12
 80048d4:	f000 f914 	bl	8004b00 <memcpy>
 80048d8:	2201      	movs	r2, #1
 80048da:	4639      	mov	r1, r7
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 fb2b 	bl	8004f38 <__lshift>
 80048e2:	46b0      	mov	r8, r6
 80048e4:	4606      	mov	r6, r0
 80048e6:	9b03      	ldr	r3, [sp, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	9308      	str	r3, [sp, #32]
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	444b      	add	r3, r9
 80048f0:	930a      	str	r3, [sp, #40]	; 0x28
 80048f2:	9b04      	ldr	r3, [sp, #16]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	9309      	str	r3, [sp, #36]	; 0x24
 80048fa:	9b08      	ldr	r3, [sp, #32]
 80048fc:	4621      	mov	r1, r4
 80048fe:	3b01      	subs	r3, #1
 8004900:	4658      	mov	r0, fp
 8004902:	9304      	str	r3, [sp, #16]
 8004904:	f7ff fa66 	bl	8003dd4 <quorem>
 8004908:	4603      	mov	r3, r0
 800490a:	4641      	mov	r1, r8
 800490c:	3330      	adds	r3, #48	; 0x30
 800490e:	9006      	str	r0, [sp, #24]
 8004910:	4658      	mov	r0, fp
 8004912:	930b      	str	r3, [sp, #44]	; 0x2c
 8004914:	f000 fb80 	bl	8005018 <__mcmp>
 8004918:	4632      	mov	r2, r6
 800491a:	4681      	mov	r9, r0
 800491c:	4621      	mov	r1, r4
 800491e:	4628      	mov	r0, r5
 8004920:	f000 fb96 	bl	8005050 <__mdiff>
 8004924:	68c2      	ldr	r2, [r0, #12]
 8004926:	4607      	mov	r7, r0
 8004928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800492a:	bb02      	cbnz	r2, 800496e <_dtoa_r+0xa7e>
 800492c:	4601      	mov	r1, r0
 800492e:	4658      	mov	r0, fp
 8004930:	f000 fb72 	bl	8005018 <__mcmp>
 8004934:	4602      	mov	r2, r0
 8004936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004938:	4639      	mov	r1, r7
 800493a:	4628      	mov	r0, r5
 800493c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004940:	f000 f92c 	bl	8004b9c <_Bfree>
 8004944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004948:	9f08      	ldr	r7, [sp, #32]
 800494a:	ea43 0102 	orr.w	r1, r3, r2
 800494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004950:	430b      	orrs	r3, r1
 8004952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004954:	d10d      	bne.n	8004972 <_dtoa_r+0xa82>
 8004956:	2b39      	cmp	r3, #57	; 0x39
 8004958:	d029      	beq.n	80049ae <_dtoa_r+0xabe>
 800495a:	f1b9 0f00 	cmp.w	r9, #0
 800495e:	dd01      	ble.n	8004964 <_dtoa_r+0xa74>
 8004960:	9b06      	ldr	r3, [sp, #24]
 8004962:	3331      	adds	r3, #49	; 0x31
 8004964:	9a04      	ldr	r2, [sp, #16]
 8004966:	7013      	strb	r3, [r2, #0]
 8004968:	e776      	b.n	8004858 <_dtoa_r+0x968>
 800496a:	4630      	mov	r0, r6
 800496c:	e7b9      	b.n	80048e2 <_dtoa_r+0x9f2>
 800496e:	2201      	movs	r2, #1
 8004970:	e7e2      	b.n	8004938 <_dtoa_r+0xa48>
 8004972:	f1b9 0f00 	cmp.w	r9, #0
 8004976:	db06      	blt.n	8004986 <_dtoa_r+0xa96>
 8004978:	9922      	ldr	r1, [sp, #136]	; 0x88
 800497a:	ea41 0909 	orr.w	r9, r1, r9
 800497e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004980:	ea59 0101 	orrs.w	r1, r9, r1
 8004984:	d120      	bne.n	80049c8 <_dtoa_r+0xad8>
 8004986:	2a00      	cmp	r2, #0
 8004988:	ddec      	ble.n	8004964 <_dtoa_r+0xa74>
 800498a:	4659      	mov	r1, fp
 800498c:	2201      	movs	r2, #1
 800498e:	4628      	mov	r0, r5
 8004990:	9308      	str	r3, [sp, #32]
 8004992:	f000 fad1 	bl	8004f38 <__lshift>
 8004996:	4621      	mov	r1, r4
 8004998:	4683      	mov	fp, r0
 800499a:	f000 fb3d 	bl	8005018 <__mcmp>
 800499e:	2800      	cmp	r0, #0
 80049a0:	9b08      	ldr	r3, [sp, #32]
 80049a2:	dc02      	bgt.n	80049aa <_dtoa_r+0xaba>
 80049a4:	d1de      	bne.n	8004964 <_dtoa_r+0xa74>
 80049a6:	07da      	lsls	r2, r3, #31
 80049a8:	d5dc      	bpl.n	8004964 <_dtoa_r+0xa74>
 80049aa:	2b39      	cmp	r3, #57	; 0x39
 80049ac:	d1d8      	bne.n	8004960 <_dtoa_r+0xa70>
 80049ae:	2339      	movs	r3, #57	; 0x39
 80049b0:	9a04      	ldr	r2, [sp, #16]
 80049b2:	7013      	strb	r3, [r2, #0]
 80049b4:	463b      	mov	r3, r7
 80049b6:	461f      	mov	r7, r3
 80049b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80049bc:	3b01      	subs	r3, #1
 80049be:	2a39      	cmp	r2, #57	; 0x39
 80049c0:	d050      	beq.n	8004a64 <_dtoa_r+0xb74>
 80049c2:	3201      	adds	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e747      	b.n	8004858 <_dtoa_r+0x968>
 80049c8:	2a00      	cmp	r2, #0
 80049ca:	dd03      	ble.n	80049d4 <_dtoa_r+0xae4>
 80049cc:	2b39      	cmp	r3, #57	; 0x39
 80049ce:	d0ee      	beq.n	80049ae <_dtoa_r+0xabe>
 80049d0:	3301      	adds	r3, #1
 80049d2:	e7c7      	b.n	8004964 <_dtoa_r+0xa74>
 80049d4:	9a08      	ldr	r2, [sp, #32]
 80049d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80049d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80049dc:	428a      	cmp	r2, r1
 80049de:	d02a      	beq.n	8004a36 <_dtoa_r+0xb46>
 80049e0:	4659      	mov	r1, fp
 80049e2:	2300      	movs	r3, #0
 80049e4:	220a      	movs	r2, #10
 80049e6:	4628      	mov	r0, r5
 80049e8:	f000 f8fa 	bl	8004be0 <__multadd>
 80049ec:	45b0      	cmp	r8, r6
 80049ee:	4683      	mov	fp, r0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	f04f 020a 	mov.w	r2, #10
 80049f8:	4641      	mov	r1, r8
 80049fa:	4628      	mov	r0, r5
 80049fc:	d107      	bne.n	8004a0e <_dtoa_r+0xb1e>
 80049fe:	f000 f8ef 	bl	8004be0 <__multadd>
 8004a02:	4680      	mov	r8, r0
 8004a04:	4606      	mov	r6, r0
 8004a06:	9b08      	ldr	r3, [sp, #32]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	9308      	str	r3, [sp, #32]
 8004a0c:	e775      	b.n	80048fa <_dtoa_r+0xa0a>
 8004a0e:	f000 f8e7 	bl	8004be0 <__multadd>
 8004a12:	4631      	mov	r1, r6
 8004a14:	4680      	mov	r8, r0
 8004a16:	2300      	movs	r3, #0
 8004a18:	220a      	movs	r2, #10
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 f8e0 	bl	8004be0 <__multadd>
 8004a20:	4606      	mov	r6, r0
 8004a22:	e7f0      	b.n	8004a06 <_dtoa_r+0xb16>
 8004a24:	f1b9 0f00 	cmp.w	r9, #0
 8004a28:	bfcc      	ite	gt
 8004a2a:	464f      	movgt	r7, r9
 8004a2c:	2701      	movle	r7, #1
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	9a03      	ldr	r2, [sp, #12]
 8004a34:	4417      	add	r7, r2
 8004a36:	4659      	mov	r1, fp
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	9308      	str	r3, [sp, #32]
 8004a3e:	f000 fa7b 	bl	8004f38 <__lshift>
 8004a42:	4621      	mov	r1, r4
 8004a44:	4683      	mov	fp, r0
 8004a46:	f000 fae7 	bl	8005018 <__mcmp>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	dcb2      	bgt.n	80049b4 <_dtoa_r+0xac4>
 8004a4e:	d102      	bne.n	8004a56 <_dtoa_r+0xb66>
 8004a50:	9b08      	ldr	r3, [sp, #32]
 8004a52:	07db      	lsls	r3, r3, #31
 8004a54:	d4ae      	bmi.n	80049b4 <_dtoa_r+0xac4>
 8004a56:	463b      	mov	r3, r7
 8004a58:	461f      	mov	r7, r3
 8004a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a5e:	2a30      	cmp	r2, #48	; 0x30
 8004a60:	d0fa      	beq.n	8004a58 <_dtoa_r+0xb68>
 8004a62:	e6f9      	b.n	8004858 <_dtoa_r+0x968>
 8004a64:	9a03      	ldr	r2, [sp, #12]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d1a5      	bne.n	80049b6 <_dtoa_r+0xac6>
 8004a6a:	2331      	movs	r3, #49	; 0x31
 8004a6c:	f10a 0a01 	add.w	sl, sl, #1
 8004a70:	e779      	b.n	8004966 <_dtoa_r+0xa76>
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <_dtoa_r+0xbd4>)
 8004a74:	f7ff baa8 	b.w	8003fc8 <_dtoa_r+0xd8>
 8004a78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f47f aa81 	bne.w	8003f82 <_dtoa_r+0x92>
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <_dtoa_r+0xbd8>)
 8004a82:	f7ff baa1 	b.w	8003fc8 <_dtoa_r+0xd8>
 8004a86:	f1b9 0f00 	cmp.w	r9, #0
 8004a8a:	dc03      	bgt.n	8004a94 <_dtoa_r+0xba4>
 8004a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	f73f aecb 	bgt.w	800482a <_dtoa_r+0x93a>
 8004a94:	9f03      	ldr	r7, [sp, #12]
 8004a96:	4621      	mov	r1, r4
 8004a98:	4658      	mov	r0, fp
 8004a9a:	f7ff f99b 	bl	8003dd4 <quorem>
 8004a9e:	9a03      	ldr	r2, [sp, #12]
 8004aa0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004aa4:	f807 3b01 	strb.w	r3, [r7], #1
 8004aa8:	1aba      	subs	r2, r7, r2
 8004aaa:	4591      	cmp	r9, r2
 8004aac:	ddba      	ble.n	8004a24 <_dtoa_r+0xb34>
 8004aae:	4659      	mov	r1, fp
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	220a      	movs	r2, #10
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f893 	bl	8004be0 <__multadd>
 8004aba:	4683      	mov	fp, r0
 8004abc:	e7eb      	b.n	8004a96 <_dtoa_r+0xba6>
 8004abe:	bf00      	nop
 8004ac0:	080063e7 	.word	0x080063e7
 8004ac4:	08006344 	.word	0x08006344
 8004ac8:	08006368 	.word	0x08006368

08004acc <_localeconv_r>:
 8004acc:	4800      	ldr	r0, [pc, #0]	; (8004ad0 <_localeconv_r+0x4>)
 8004ace:	4770      	bx	lr
 8004ad0:	20000160 	.word	0x20000160

08004ad4 <malloc>:
 8004ad4:	4b02      	ldr	r3, [pc, #8]	; (8004ae0 <malloc+0xc>)
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f000 bc1d 	b.w	8005318 <_malloc_r>
 8004ade:	bf00      	nop
 8004ae0:	2000000c 	.word	0x2000000c

08004ae4 <memchr>:
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	b510      	push	{r4, lr}
 8004ae8:	b2c9      	uxtb	r1, r1
 8004aea:	4402      	add	r2, r0
 8004aec:	4293      	cmp	r3, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	d101      	bne.n	8004af6 <memchr+0x12>
 8004af2:	2000      	movs	r0, #0
 8004af4:	e003      	b.n	8004afe <memchr+0x1a>
 8004af6:	7804      	ldrb	r4, [r0, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	428c      	cmp	r4, r1
 8004afc:	d1f6      	bne.n	8004aec <memchr+0x8>
 8004afe:	bd10      	pop	{r4, pc}

08004b00 <memcpy>:
 8004b00:	440a      	add	r2, r1
 8004b02:	4291      	cmp	r1, r2
 8004b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b08:	d100      	bne.n	8004b0c <memcpy+0xc>
 8004b0a:	4770      	bx	lr
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b12:	4291      	cmp	r1, r2
 8004b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b18:	d1f9      	bne.n	8004b0e <memcpy+0xe>
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <_Balloc>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004b20:	4604      	mov	r4, r0
 8004b22:	460d      	mov	r5, r1
 8004b24:	b976      	cbnz	r6, 8004b44 <_Balloc+0x28>
 8004b26:	2010      	movs	r0, #16
 8004b28:	f7ff ffd4 	bl	8004ad4 <malloc>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8004b30:	b920      	cbnz	r0, 8004b3c <_Balloc+0x20>
 8004b32:	2166      	movs	r1, #102	; 0x66
 8004b34:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <_Balloc+0x78>)
 8004b36:	4818      	ldr	r0, [pc, #96]	; (8004b98 <_Balloc+0x7c>)
 8004b38:	f000 fdce 	bl	80056d8 <__assert_func>
 8004b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b40:	6006      	str	r6, [r0, #0]
 8004b42:	60c6      	str	r6, [r0, #12]
 8004b44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004b46:	68f3      	ldr	r3, [r6, #12]
 8004b48:	b183      	cbz	r3, 8004b6c <_Balloc+0x50>
 8004b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b52:	b9b8      	cbnz	r0, 8004b84 <_Balloc+0x68>
 8004b54:	2101      	movs	r1, #1
 8004b56:	fa01 f605 	lsl.w	r6, r1, r5
 8004b5a:	1d72      	adds	r2, r6, #5
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	0092      	lsls	r2, r2, #2
 8004b60:	f000 fb5e 	bl	8005220 <_calloc_r>
 8004b64:	b160      	cbz	r0, 8004b80 <_Balloc+0x64>
 8004b66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b6a:	e00e      	b.n	8004b8a <_Balloc+0x6e>
 8004b6c:	2221      	movs	r2, #33	; 0x21
 8004b6e:	2104      	movs	r1, #4
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 fb55 	bl	8005220 <_calloc_r>
 8004b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b78:	60f0      	str	r0, [r6, #12]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e4      	bne.n	8004b4a <_Balloc+0x2e>
 8004b80:	2000      	movs	r0, #0
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	6802      	ldr	r2, [r0, #0]
 8004b86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b90:	e7f7      	b.n	8004b82 <_Balloc+0x66>
 8004b92:	bf00      	nop
 8004b94:	08006375 	.word	0x08006375
 8004b98:	080063f8 	.word	0x080063f8

08004b9c <_Bfree>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	b976      	cbnz	r6, 8004bc4 <_Bfree+0x28>
 8004ba6:	2010      	movs	r0, #16
 8004ba8:	f7ff ff94 	bl	8004ad4 <malloc>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6268      	str	r0, [r5, #36]	; 0x24
 8004bb0:	b920      	cbnz	r0, 8004bbc <_Bfree+0x20>
 8004bb2:	218a      	movs	r1, #138	; 0x8a
 8004bb4:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <_Bfree+0x3c>)
 8004bb6:	4809      	ldr	r0, [pc, #36]	; (8004bdc <_Bfree+0x40>)
 8004bb8:	f000 fd8e 	bl	80056d8 <__assert_func>
 8004bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bc0:	6006      	str	r6, [r0, #0]
 8004bc2:	60c6      	str	r6, [r0, #12]
 8004bc4:	b13c      	cbz	r4, 8004bd6 <_Bfree+0x3a>
 8004bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004bc8:	6862      	ldr	r2, [r4, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bd0:	6021      	str	r1, [r4, #0]
 8004bd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	08006375 	.word	0x08006375
 8004bdc:	080063f8 	.word	0x080063f8

08004be0 <__multadd>:
 8004be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be4:	4607      	mov	r7, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	461e      	mov	r6, r3
 8004bea:	2000      	movs	r0, #0
 8004bec:	690d      	ldr	r5, [r1, #16]
 8004bee:	f101 0c14 	add.w	ip, r1, #20
 8004bf2:	f8dc 3000 	ldr.w	r3, [ip]
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	b299      	uxth	r1, r3
 8004bfa:	fb02 6101 	mla	r1, r2, r1, r6
 8004bfe:	0c1e      	lsrs	r6, r3, #16
 8004c00:	0c0b      	lsrs	r3, r1, #16
 8004c02:	fb02 3306 	mla	r3, r2, r6, r3
 8004c06:	b289      	uxth	r1, r1
 8004c08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c0c:	4285      	cmp	r5, r0
 8004c0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004c12:	f84c 1b04 	str.w	r1, [ip], #4
 8004c16:	dcec      	bgt.n	8004bf2 <__multadd+0x12>
 8004c18:	b30e      	cbz	r6, 8004c5e <__multadd+0x7e>
 8004c1a:	68a3      	ldr	r3, [r4, #8]
 8004c1c:	42ab      	cmp	r3, r5
 8004c1e:	dc19      	bgt.n	8004c54 <__multadd+0x74>
 8004c20:	6861      	ldr	r1, [r4, #4]
 8004c22:	4638      	mov	r0, r7
 8004c24:	3101      	adds	r1, #1
 8004c26:	f7ff ff79 	bl	8004b1c <_Balloc>
 8004c2a:	4680      	mov	r8, r0
 8004c2c:	b928      	cbnz	r0, 8004c3a <__multadd+0x5a>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	21b5      	movs	r1, #181	; 0xb5
 8004c32:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <__multadd+0x84>)
 8004c34:	480c      	ldr	r0, [pc, #48]	; (8004c68 <__multadd+0x88>)
 8004c36:	f000 fd4f 	bl	80056d8 <__assert_func>
 8004c3a:	6922      	ldr	r2, [r4, #16]
 8004c3c:	f104 010c 	add.w	r1, r4, #12
 8004c40:	3202      	adds	r2, #2
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	300c      	adds	r0, #12
 8004c46:	f7ff ff5b 	bl	8004b00 <memcpy>
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f7ff ffa5 	bl	8004b9c <_Bfree>
 8004c52:	4644      	mov	r4, r8
 8004c54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c58:	3501      	adds	r5, #1
 8004c5a:	615e      	str	r6, [r3, #20]
 8004c5c:	6125      	str	r5, [r4, #16]
 8004c5e:	4620      	mov	r0, r4
 8004c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c64:	080063e7 	.word	0x080063e7
 8004c68:	080063f8 	.word	0x080063f8

08004c6c <__hi0bits>:
 8004c6c:	0c02      	lsrs	r2, r0, #16
 8004c6e:	0412      	lsls	r2, r2, #16
 8004c70:	4603      	mov	r3, r0
 8004c72:	b9ca      	cbnz	r2, 8004ca8 <__hi0bits+0x3c>
 8004c74:	0403      	lsls	r3, r0, #16
 8004c76:	2010      	movs	r0, #16
 8004c78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004c7c:	bf04      	itt	eq
 8004c7e:	021b      	lsleq	r3, r3, #8
 8004c80:	3008      	addeq	r0, #8
 8004c82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004c86:	bf04      	itt	eq
 8004c88:	011b      	lsleq	r3, r3, #4
 8004c8a:	3004      	addeq	r0, #4
 8004c8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004c90:	bf04      	itt	eq
 8004c92:	009b      	lsleq	r3, r3, #2
 8004c94:	3002      	addeq	r0, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	db05      	blt.n	8004ca6 <__hi0bits+0x3a>
 8004c9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004c9e:	f100 0001 	add.w	r0, r0, #1
 8004ca2:	bf08      	it	eq
 8004ca4:	2020      	moveq	r0, #32
 8004ca6:	4770      	bx	lr
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e7e5      	b.n	8004c78 <__hi0bits+0xc>

08004cac <__lo0bits>:
 8004cac:	6803      	ldr	r3, [r0, #0]
 8004cae:	4602      	mov	r2, r0
 8004cb0:	f013 0007 	ands.w	r0, r3, #7
 8004cb4:	d00b      	beq.n	8004cce <__lo0bits+0x22>
 8004cb6:	07d9      	lsls	r1, r3, #31
 8004cb8:	d421      	bmi.n	8004cfe <__lo0bits+0x52>
 8004cba:	0798      	lsls	r0, r3, #30
 8004cbc:	bf49      	itett	mi
 8004cbe:	085b      	lsrmi	r3, r3, #1
 8004cc0:	089b      	lsrpl	r3, r3, #2
 8004cc2:	2001      	movmi	r0, #1
 8004cc4:	6013      	strmi	r3, [r2, #0]
 8004cc6:	bf5c      	itt	pl
 8004cc8:	2002      	movpl	r0, #2
 8004cca:	6013      	strpl	r3, [r2, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	b299      	uxth	r1, r3
 8004cd0:	b909      	cbnz	r1, 8004cd6 <__lo0bits+0x2a>
 8004cd2:	2010      	movs	r0, #16
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	b2d9      	uxtb	r1, r3
 8004cd8:	b909      	cbnz	r1, 8004cde <__lo0bits+0x32>
 8004cda:	3008      	adds	r0, #8
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	0719      	lsls	r1, r3, #28
 8004ce0:	bf04      	itt	eq
 8004ce2:	091b      	lsreq	r3, r3, #4
 8004ce4:	3004      	addeq	r0, #4
 8004ce6:	0799      	lsls	r1, r3, #30
 8004ce8:	bf04      	itt	eq
 8004cea:	089b      	lsreq	r3, r3, #2
 8004cec:	3002      	addeq	r0, #2
 8004cee:	07d9      	lsls	r1, r3, #31
 8004cf0:	d403      	bmi.n	8004cfa <__lo0bits+0x4e>
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	f100 0001 	add.w	r0, r0, #1
 8004cf8:	d003      	beq.n	8004d02 <__lo0bits+0x56>
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4770      	bx	lr
 8004cfe:	2000      	movs	r0, #0
 8004d00:	4770      	bx	lr
 8004d02:	2020      	movs	r0, #32
 8004d04:	4770      	bx	lr
	...

08004d08 <__i2b>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	f7ff ff05 	bl	8004b1c <_Balloc>
 8004d12:	4602      	mov	r2, r0
 8004d14:	b928      	cbnz	r0, 8004d22 <__i2b+0x1a>
 8004d16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004d1a:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <__i2b+0x24>)
 8004d1c:	4804      	ldr	r0, [pc, #16]	; (8004d30 <__i2b+0x28>)
 8004d1e:	f000 fcdb 	bl	80056d8 <__assert_func>
 8004d22:	2301      	movs	r3, #1
 8004d24:	6144      	str	r4, [r0, #20]
 8004d26:	6103      	str	r3, [r0, #16]
 8004d28:	bd10      	pop	{r4, pc}
 8004d2a:	bf00      	nop
 8004d2c:	080063e7 	.word	0x080063e7
 8004d30:	080063f8 	.word	0x080063f8

08004d34 <__multiply>:
 8004d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d38:	4691      	mov	r9, r2
 8004d3a:	690a      	ldr	r2, [r1, #16]
 8004d3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004d40:	460c      	mov	r4, r1
 8004d42:	429a      	cmp	r2, r3
 8004d44:	bfbe      	ittt	lt
 8004d46:	460b      	movlt	r3, r1
 8004d48:	464c      	movlt	r4, r9
 8004d4a:	4699      	movlt	r9, r3
 8004d4c:	6927      	ldr	r7, [r4, #16]
 8004d4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	6861      	ldr	r1, [r4, #4]
 8004d56:	eb07 060a 	add.w	r6, r7, sl
 8004d5a:	42b3      	cmp	r3, r6
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	bfb8      	it	lt
 8004d60:	3101      	addlt	r1, #1
 8004d62:	f7ff fedb 	bl	8004b1c <_Balloc>
 8004d66:	b930      	cbnz	r0, 8004d76 <__multiply+0x42>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	f240 115d 	movw	r1, #349	; 0x15d
 8004d6e:	4b43      	ldr	r3, [pc, #268]	; (8004e7c <__multiply+0x148>)
 8004d70:	4843      	ldr	r0, [pc, #268]	; (8004e80 <__multiply+0x14c>)
 8004d72:	f000 fcb1 	bl	80056d8 <__assert_func>
 8004d76:	f100 0514 	add.w	r5, r0, #20
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d82:	4543      	cmp	r3, r8
 8004d84:	d321      	bcc.n	8004dca <__multiply+0x96>
 8004d86:	f104 0314 	add.w	r3, r4, #20
 8004d8a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004d8e:	f109 0314 	add.w	r3, r9, #20
 8004d92:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004d96:	9202      	str	r2, [sp, #8]
 8004d98:	1b3a      	subs	r2, r7, r4
 8004d9a:	3a15      	subs	r2, #21
 8004d9c:	f022 0203 	bic.w	r2, r2, #3
 8004da0:	3204      	adds	r2, #4
 8004da2:	f104 0115 	add.w	r1, r4, #21
 8004da6:	428f      	cmp	r7, r1
 8004da8:	bf38      	it	cc
 8004daa:	2204      	movcc	r2, #4
 8004dac:	9201      	str	r2, [sp, #4]
 8004dae:	9a02      	ldr	r2, [sp, #8]
 8004db0:	9303      	str	r3, [sp, #12]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d80c      	bhi.n	8004dd0 <__multiply+0x9c>
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	dd03      	ble.n	8004dc2 <__multiply+0x8e>
 8004dba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d059      	beq.n	8004e76 <__multiply+0x142>
 8004dc2:	6106      	str	r6, [r0, #16]
 8004dc4:	b005      	add	sp, #20
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dca:	f843 2b04 	str.w	r2, [r3], #4
 8004dce:	e7d8      	b.n	8004d82 <__multiply+0x4e>
 8004dd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004dd4:	f1ba 0f00 	cmp.w	sl, #0
 8004dd8:	d023      	beq.n	8004e22 <__multiply+0xee>
 8004dda:	46a9      	mov	r9, r5
 8004ddc:	f04f 0c00 	mov.w	ip, #0
 8004de0:	f104 0e14 	add.w	lr, r4, #20
 8004de4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004de8:	f8d9 1000 	ldr.w	r1, [r9]
 8004dec:	fa1f fb82 	uxth.w	fp, r2
 8004df0:	b289      	uxth	r1, r1
 8004df2:	fb0a 110b 	mla	r1, sl, fp, r1
 8004df6:	4461      	add	r1, ip
 8004df8:	f8d9 c000 	ldr.w	ip, [r9]
 8004dfc:	0c12      	lsrs	r2, r2, #16
 8004dfe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004e02:	fb0a c202 	mla	r2, sl, r2, ip
 8004e06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004e0a:	b289      	uxth	r1, r1
 8004e0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e10:	4577      	cmp	r7, lr
 8004e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e16:	f849 1b04 	str.w	r1, [r9], #4
 8004e1a:	d8e3      	bhi.n	8004de4 <__multiply+0xb0>
 8004e1c:	9a01      	ldr	r2, [sp, #4]
 8004e1e:	f845 c002 	str.w	ip, [r5, r2]
 8004e22:	9a03      	ldr	r2, [sp, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004e2a:	f1b9 0f00 	cmp.w	r9, #0
 8004e2e:	d020      	beq.n	8004e72 <__multiply+0x13e>
 8004e30:	46ae      	mov	lr, r5
 8004e32:	f04f 0a00 	mov.w	sl, #0
 8004e36:	6829      	ldr	r1, [r5, #0]
 8004e38:	f104 0c14 	add.w	ip, r4, #20
 8004e3c:	f8bc b000 	ldrh.w	fp, [ip]
 8004e40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004e44:	b289      	uxth	r1, r1
 8004e46:	fb09 220b 	mla	r2, r9, fp, r2
 8004e4a:	4492      	add	sl, r2
 8004e4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004e50:	f84e 1b04 	str.w	r1, [lr], #4
 8004e54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004e58:	f8be 1000 	ldrh.w	r1, [lr]
 8004e5c:	0c12      	lsrs	r2, r2, #16
 8004e5e:	fb09 1102 	mla	r1, r9, r2, r1
 8004e62:	4567      	cmp	r7, ip
 8004e64:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004e68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004e6c:	d8e6      	bhi.n	8004e3c <__multiply+0x108>
 8004e6e:	9a01      	ldr	r2, [sp, #4]
 8004e70:	50a9      	str	r1, [r5, r2]
 8004e72:	3504      	adds	r5, #4
 8004e74:	e79b      	b.n	8004dae <__multiply+0x7a>
 8004e76:	3e01      	subs	r6, #1
 8004e78:	e79d      	b.n	8004db6 <__multiply+0x82>
 8004e7a:	bf00      	nop
 8004e7c:	080063e7 	.word	0x080063e7
 8004e80:	080063f8 	.word	0x080063f8

08004e84 <__pow5mult>:
 8004e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e88:	4615      	mov	r5, r2
 8004e8a:	f012 0203 	ands.w	r2, r2, #3
 8004e8e:	4606      	mov	r6, r0
 8004e90:	460f      	mov	r7, r1
 8004e92:	d007      	beq.n	8004ea4 <__pow5mult+0x20>
 8004e94:	4c25      	ldr	r4, [pc, #148]	; (8004f2c <__pow5mult+0xa8>)
 8004e96:	3a01      	subs	r2, #1
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e9e:	f7ff fe9f 	bl	8004be0 <__multadd>
 8004ea2:	4607      	mov	r7, r0
 8004ea4:	10ad      	asrs	r5, r5, #2
 8004ea6:	d03d      	beq.n	8004f24 <__pow5mult+0xa0>
 8004ea8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004eaa:	b97c      	cbnz	r4, 8004ecc <__pow5mult+0x48>
 8004eac:	2010      	movs	r0, #16
 8004eae:	f7ff fe11 	bl	8004ad4 <malloc>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6270      	str	r0, [r6, #36]	; 0x24
 8004eb6:	b928      	cbnz	r0, 8004ec4 <__pow5mult+0x40>
 8004eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004ebc:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <__pow5mult+0xac>)
 8004ebe:	481d      	ldr	r0, [pc, #116]	; (8004f34 <__pow5mult+0xb0>)
 8004ec0:	f000 fc0a 	bl	80056d8 <__assert_func>
 8004ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ec8:	6004      	str	r4, [r0, #0]
 8004eca:	60c4      	str	r4, [r0, #12]
 8004ecc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ed4:	b94c      	cbnz	r4, 8004eea <__pow5mult+0x66>
 8004ed6:	f240 2171 	movw	r1, #625	; 0x271
 8004eda:	4630      	mov	r0, r6
 8004edc:	f7ff ff14 	bl	8004d08 <__i2b>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ee8:	6003      	str	r3, [r0, #0]
 8004eea:	f04f 0900 	mov.w	r9, #0
 8004eee:	07eb      	lsls	r3, r5, #31
 8004ef0:	d50a      	bpl.n	8004f08 <__pow5mult+0x84>
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff ff1c 	bl	8004d34 <__multiply>
 8004efc:	4680      	mov	r8, r0
 8004efe:	4639      	mov	r1, r7
 8004f00:	4630      	mov	r0, r6
 8004f02:	f7ff fe4b 	bl	8004b9c <_Bfree>
 8004f06:	4647      	mov	r7, r8
 8004f08:	106d      	asrs	r5, r5, #1
 8004f0a:	d00b      	beq.n	8004f24 <__pow5mult+0xa0>
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	b938      	cbnz	r0, 8004f20 <__pow5mult+0x9c>
 8004f10:	4622      	mov	r2, r4
 8004f12:	4621      	mov	r1, r4
 8004f14:	4630      	mov	r0, r6
 8004f16:	f7ff ff0d 	bl	8004d34 <__multiply>
 8004f1a:	6020      	str	r0, [r4, #0]
 8004f1c:	f8c0 9000 	str.w	r9, [r0]
 8004f20:	4604      	mov	r4, r0
 8004f22:	e7e4      	b.n	8004eee <__pow5mult+0x6a>
 8004f24:	4638      	mov	r0, r7
 8004f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2a:	bf00      	nop
 8004f2c:	08006548 	.word	0x08006548
 8004f30:	08006375 	.word	0x08006375
 8004f34:	080063f8 	.word	0x080063f8

08004f38 <__lshift>:
 8004f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	4607      	mov	r7, r0
 8004f40:	4691      	mov	r9, r2
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	6849      	ldr	r1, [r1, #4]
 8004f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004f4a:	68a3      	ldr	r3, [r4, #8]
 8004f4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f50:	f108 0601 	add.w	r6, r8, #1
 8004f54:	42b3      	cmp	r3, r6
 8004f56:	db0b      	blt.n	8004f70 <__lshift+0x38>
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff fddf 	bl	8004b1c <_Balloc>
 8004f5e:	4605      	mov	r5, r0
 8004f60:	b948      	cbnz	r0, 8004f76 <__lshift+0x3e>
 8004f62:	4602      	mov	r2, r0
 8004f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004f68:	4b29      	ldr	r3, [pc, #164]	; (8005010 <__lshift+0xd8>)
 8004f6a:	482a      	ldr	r0, [pc, #168]	; (8005014 <__lshift+0xdc>)
 8004f6c:	f000 fbb4 	bl	80056d8 <__assert_func>
 8004f70:	3101      	adds	r1, #1
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	e7ee      	b.n	8004f54 <__lshift+0x1c>
 8004f76:	2300      	movs	r3, #0
 8004f78:	f100 0114 	add.w	r1, r0, #20
 8004f7c:	f100 0210 	add.w	r2, r0, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	4553      	cmp	r3, sl
 8004f84:	db37      	blt.n	8004ff6 <__lshift+0xbe>
 8004f86:	6920      	ldr	r0, [r4, #16]
 8004f88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f8c:	f104 0314 	add.w	r3, r4, #20
 8004f90:	f019 091f 	ands.w	r9, r9, #31
 8004f94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004f9c:	d02f      	beq.n	8004ffe <__lshift+0xc6>
 8004f9e:	468a      	mov	sl, r1
 8004fa0:	f04f 0c00 	mov.w	ip, #0
 8004fa4:	f1c9 0e20 	rsb	lr, r9, #32
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	fa02 f209 	lsl.w	r2, r2, r9
 8004fae:	ea42 020c 	orr.w	r2, r2, ip
 8004fb2:	f84a 2b04 	str.w	r2, [sl], #4
 8004fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fba:	4298      	cmp	r0, r3
 8004fbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004fc0:	d8f2      	bhi.n	8004fa8 <__lshift+0x70>
 8004fc2:	1b03      	subs	r3, r0, r4
 8004fc4:	3b15      	subs	r3, #21
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	3304      	adds	r3, #4
 8004fcc:	f104 0215 	add.w	r2, r4, #21
 8004fd0:	4290      	cmp	r0, r2
 8004fd2:	bf38      	it	cc
 8004fd4:	2304      	movcc	r3, #4
 8004fd6:	f841 c003 	str.w	ip, [r1, r3]
 8004fda:	f1bc 0f00 	cmp.w	ip, #0
 8004fde:	d001      	beq.n	8004fe4 <__lshift+0xac>
 8004fe0:	f108 0602 	add.w	r6, r8, #2
 8004fe4:	3e01      	subs	r6, #1
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	4621      	mov	r1, r4
 8004fea:	612e      	str	r6, [r5, #16]
 8004fec:	f7ff fdd6 	bl	8004b9c <_Bfree>
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	e7c1      	b.n	8004f82 <__lshift+0x4a>
 8004ffe:	3904      	subs	r1, #4
 8005000:	f853 2b04 	ldr.w	r2, [r3], #4
 8005004:	4298      	cmp	r0, r3
 8005006:	f841 2f04 	str.w	r2, [r1, #4]!
 800500a:	d8f9      	bhi.n	8005000 <__lshift+0xc8>
 800500c:	e7ea      	b.n	8004fe4 <__lshift+0xac>
 800500e:	bf00      	nop
 8005010:	080063e7 	.word	0x080063e7
 8005014:	080063f8 	.word	0x080063f8

08005018 <__mcmp>:
 8005018:	4603      	mov	r3, r0
 800501a:	690a      	ldr	r2, [r1, #16]
 800501c:	6900      	ldr	r0, [r0, #16]
 800501e:	b530      	push	{r4, r5, lr}
 8005020:	1a80      	subs	r0, r0, r2
 8005022:	d10d      	bne.n	8005040 <__mcmp+0x28>
 8005024:	3314      	adds	r3, #20
 8005026:	3114      	adds	r1, #20
 8005028:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800502c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005030:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005034:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005038:	4295      	cmp	r5, r2
 800503a:	d002      	beq.n	8005042 <__mcmp+0x2a>
 800503c:	d304      	bcc.n	8005048 <__mcmp+0x30>
 800503e:	2001      	movs	r0, #1
 8005040:	bd30      	pop	{r4, r5, pc}
 8005042:	42a3      	cmp	r3, r4
 8005044:	d3f4      	bcc.n	8005030 <__mcmp+0x18>
 8005046:	e7fb      	b.n	8005040 <__mcmp+0x28>
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	e7f8      	b.n	8005040 <__mcmp+0x28>
	...

08005050 <__mdiff>:
 8005050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	460d      	mov	r5, r1
 8005056:	4607      	mov	r7, r0
 8005058:	4611      	mov	r1, r2
 800505a:	4628      	mov	r0, r5
 800505c:	4614      	mov	r4, r2
 800505e:	f7ff ffdb 	bl	8005018 <__mcmp>
 8005062:	1e06      	subs	r6, r0, #0
 8005064:	d111      	bne.n	800508a <__mdiff+0x3a>
 8005066:	4631      	mov	r1, r6
 8005068:	4638      	mov	r0, r7
 800506a:	f7ff fd57 	bl	8004b1c <_Balloc>
 800506e:	4602      	mov	r2, r0
 8005070:	b928      	cbnz	r0, 800507e <__mdiff+0x2e>
 8005072:	f240 2132 	movw	r1, #562	; 0x232
 8005076:	4b3a      	ldr	r3, [pc, #232]	; (8005160 <__mdiff+0x110>)
 8005078:	483a      	ldr	r0, [pc, #232]	; (8005164 <__mdiff+0x114>)
 800507a:	f000 fb2d 	bl	80056d8 <__assert_func>
 800507e:	2301      	movs	r3, #1
 8005080:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005084:	4610      	mov	r0, r2
 8005086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508a:	bfa4      	itt	ge
 800508c:	4623      	movge	r3, r4
 800508e:	462c      	movge	r4, r5
 8005090:	4638      	mov	r0, r7
 8005092:	6861      	ldr	r1, [r4, #4]
 8005094:	bfa6      	itte	ge
 8005096:	461d      	movge	r5, r3
 8005098:	2600      	movge	r6, #0
 800509a:	2601      	movlt	r6, #1
 800509c:	f7ff fd3e 	bl	8004b1c <_Balloc>
 80050a0:	4602      	mov	r2, r0
 80050a2:	b918      	cbnz	r0, 80050ac <__mdiff+0x5c>
 80050a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80050a8:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <__mdiff+0x110>)
 80050aa:	e7e5      	b.n	8005078 <__mdiff+0x28>
 80050ac:	f102 0814 	add.w	r8, r2, #20
 80050b0:	46c2      	mov	sl, r8
 80050b2:	f04f 0c00 	mov.w	ip, #0
 80050b6:	6927      	ldr	r7, [r4, #16]
 80050b8:	60c6      	str	r6, [r0, #12]
 80050ba:	692e      	ldr	r6, [r5, #16]
 80050bc:	f104 0014 	add.w	r0, r4, #20
 80050c0:	f105 0914 	add.w	r9, r5, #20
 80050c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80050c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80050cc:	3410      	adds	r4, #16
 80050ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80050d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80050d6:	fa1f f18b 	uxth.w	r1, fp
 80050da:	448c      	add	ip, r1
 80050dc:	b299      	uxth	r1, r3
 80050de:	0c1b      	lsrs	r3, r3, #16
 80050e0:	ebac 0101 	sub.w	r1, ip, r1
 80050e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80050e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80050ec:	b289      	uxth	r1, r1
 80050ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80050f2:	454e      	cmp	r6, r9
 80050f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80050f8:	f84a 3b04 	str.w	r3, [sl], #4
 80050fc:	d8e7      	bhi.n	80050ce <__mdiff+0x7e>
 80050fe:	1b73      	subs	r3, r6, r5
 8005100:	3b15      	subs	r3, #21
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	3515      	adds	r5, #21
 8005108:	3304      	adds	r3, #4
 800510a:	42ae      	cmp	r6, r5
 800510c:	bf38      	it	cc
 800510e:	2304      	movcc	r3, #4
 8005110:	4418      	add	r0, r3
 8005112:	4443      	add	r3, r8
 8005114:	461e      	mov	r6, r3
 8005116:	4605      	mov	r5, r0
 8005118:	4575      	cmp	r5, lr
 800511a:	d30e      	bcc.n	800513a <__mdiff+0xea>
 800511c:	f10e 0103 	add.w	r1, lr, #3
 8005120:	1a09      	subs	r1, r1, r0
 8005122:	f021 0103 	bic.w	r1, r1, #3
 8005126:	3803      	subs	r0, #3
 8005128:	4586      	cmp	lr, r0
 800512a:	bf38      	it	cc
 800512c:	2100      	movcc	r1, #0
 800512e:	4419      	add	r1, r3
 8005130:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005134:	b18b      	cbz	r3, 800515a <__mdiff+0x10a>
 8005136:	6117      	str	r7, [r2, #16]
 8005138:	e7a4      	b.n	8005084 <__mdiff+0x34>
 800513a:	f855 8b04 	ldr.w	r8, [r5], #4
 800513e:	fa1f f188 	uxth.w	r1, r8
 8005142:	4461      	add	r1, ip
 8005144:	140c      	asrs	r4, r1, #16
 8005146:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800514a:	b289      	uxth	r1, r1
 800514c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005150:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005154:	f846 1b04 	str.w	r1, [r6], #4
 8005158:	e7de      	b.n	8005118 <__mdiff+0xc8>
 800515a:	3f01      	subs	r7, #1
 800515c:	e7e8      	b.n	8005130 <__mdiff+0xe0>
 800515e:	bf00      	nop
 8005160:	080063e7 	.word	0x080063e7
 8005164:	080063f8 	.word	0x080063f8

08005168 <__d2b>:
 8005168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800516c:	2101      	movs	r1, #1
 800516e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005172:	4690      	mov	r8, r2
 8005174:	461d      	mov	r5, r3
 8005176:	f7ff fcd1 	bl	8004b1c <_Balloc>
 800517a:	4604      	mov	r4, r0
 800517c:	b930      	cbnz	r0, 800518c <__d2b+0x24>
 800517e:	4602      	mov	r2, r0
 8005180:	f240 310a 	movw	r1, #778	; 0x30a
 8005184:	4b24      	ldr	r3, [pc, #144]	; (8005218 <__d2b+0xb0>)
 8005186:	4825      	ldr	r0, [pc, #148]	; (800521c <__d2b+0xb4>)
 8005188:	f000 faa6 	bl	80056d8 <__assert_func>
 800518c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005190:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005194:	bb2d      	cbnz	r5, 80051e2 <__d2b+0x7a>
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	f1b8 0300 	subs.w	r3, r8, #0
 800519c:	d026      	beq.n	80051ec <__d2b+0x84>
 800519e:	4668      	mov	r0, sp
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	f7ff fd83 	bl	8004cac <__lo0bits>
 80051a6:	9900      	ldr	r1, [sp, #0]
 80051a8:	b1f0      	cbz	r0, 80051e8 <__d2b+0x80>
 80051aa:	9a01      	ldr	r2, [sp, #4]
 80051ac:	f1c0 0320 	rsb	r3, r0, #32
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	430b      	orrs	r3, r1
 80051b6:	40c2      	lsrs	r2, r0
 80051b8:	6163      	str	r3, [r4, #20]
 80051ba:	9201      	str	r2, [sp, #4]
 80051bc:	9b01      	ldr	r3, [sp, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf14      	ite	ne
 80051c2:	2102      	movne	r1, #2
 80051c4:	2101      	moveq	r1, #1
 80051c6:	61a3      	str	r3, [r4, #24]
 80051c8:	6121      	str	r1, [r4, #16]
 80051ca:	b1c5      	cbz	r5, 80051fe <__d2b+0x96>
 80051cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80051d0:	4405      	add	r5, r0
 80051d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80051d6:	603d      	str	r5, [r7, #0]
 80051d8:	6030      	str	r0, [r6, #0]
 80051da:	4620      	mov	r0, r4
 80051dc:	b002      	add	sp, #8
 80051de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e6:	e7d6      	b.n	8005196 <__d2b+0x2e>
 80051e8:	6161      	str	r1, [r4, #20]
 80051ea:	e7e7      	b.n	80051bc <__d2b+0x54>
 80051ec:	a801      	add	r0, sp, #4
 80051ee:	f7ff fd5d 	bl	8004cac <__lo0bits>
 80051f2:	2101      	movs	r1, #1
 80051f4:	9b01      	ldr	r3, [sp, #4]
 80051f6:	6121      	str	r1, [r4, #16]
 80051f8:	6163      	str	r3, [r4, #20]
 80051fa:	3020      	adds	r0, #32
 80051fc:	e7e5      	b.n	80051ca <__d2b+0x62>
 80051fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005202:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005206:	6038      	str	r0, [r7, #0]
 8005208:	6918      	ldr	r0, [r3, #16]
 800520a:	f7ff fd2f 	bl	8004c6c <__hi0bits>
 800520e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005212:	6031      	str	r1, [r6, #0]
 8005214:	e7e1      	b.n	80051da <__d2b+0x72>
 8005216:	bf00      	nop
 8005218:	080063e7 	.word	0x080063e7
 800521c:	080063f8 	.word	0x080063f8

08005220 <_calloc_r>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	fba1 5402 	umull	r5, r4, r1, r2
 8005226:	b934      	cbnz	r4, 8005236 <_calloc_r+0x16>
 8005228:	4629      	mov	r1, r5
 800522a:	f000 f875 	bl	8005318 <_malloc_r>
 800522e:	4606      	mov	r6, r0
 8005230:	b928      	cbnz	r0, 800523e <_calloc_r+0x1e>
 8005232:	4630      	mov	r0, r6
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	220c      	movs	r2, #12
 8005238:	2600      	movs	r6, #0
 800523a:	6002      	str	r2, [r0, #0]
 800523c:	e7f9      	b.n	8005232 <_calloc_r+0x12>
 800523e:	462a      	mov	r2, r5
 8005240:	4621      	mov	r1, r4
 8005242:	f7fe f93f 	bl	80034c4 <memset>
 8005246:	e7f4      	b.n	8005232 <_calloc_r+0x12>

08005248 <_free_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4605      	mov	r5, r0
 800524c:	2900      	cmp	r1, #0
 800524e:	d040      	beq.n	80052d2 <_free_r+0x8a>
 8005250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005254:	1f0c      	subs	r4, r1, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bfb8      	it	lt
 800525a:	18e4      	addlt	r4, r4, r3
 800525c:	f000 fa98 	bl	8005790 <__malloc_lock>
 8005260:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <_free_r+0x8c>)
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	b933      	cbnz	r3, 8005274 <_free_r+0x2c>
 8005266:	6063      	str	r3, [r4, #4]
 8005268:	6014      	str	r4, [r2, #0]
 800526a:	4628      	mov	r0, r5
 800526c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005270:	f000 ba94 	b.w	800579c <__malloc_unlock>
 8005274:	42a3      	cmp	r3, r4
 8005276:	d908      	bls.n	800528a <_free_r+0x42>
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	1821      	adds	r1, r4, r0
 800527c:	428b      	cmp	r3, r1
 800527e:	bf01      	itttt	eq
 8005280:	6819      	ldreq	r1, [r3, #0]
 8005282:	685b      	ldreq	r3, [r3, #4]
 8005284:	1809      	addeq	r1, r1, r0
 8005286:	6021      	streq	r1, [r4, #0]
 8005288:	e7ed      	b.n	8005266 <_free_r+0x1e>
 800528a:	461a      	mov	r2, r3
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	b10b      	cbz	r3, 8005294 <_free_r+0x4c>
 8005290:	42a3      	cmp	r3, r4
 8005292:	d9fa      	bls.n	800528a <_free_r+0x42>
 8005294:	6811      	ldr	r1, [r2, #0]
 8005296:	1850      	adds	r0, r2, r1
 8005298:	42a0      	cmp	r0, r4
 800529a:	d10b      	bne.n	80052b4 <_free_r+0x6c>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	4401      	add	r1, r0
 80052a0:	1850      	adds	r0, r2, r1
 80052a2:	4283      	cmp	r3, r0
 80052a4:	6011      	str	r1, [r2, #0]
 80052a6:	d1e0      	bne.n	800526a <_free_r+0x22>
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4401      	add	r1, r0
 80052ae:	6011      	str	r1, [r2, #0]
 80052b0:	6053      	str	r3, [r2, #4]
 80052b2:	e7da      	b.n	800526a <_free_r+0x22>
 80052b4:	d902      	bls.n	80052bc <_free_r+0x74>
 80052b6:	230c      	movs	r3, #12
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	e7d6      	b.n	800526a <_free_r+0x22>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	1821      	adds	r1, r4, r0
 80052c0:	428b      	cmp	r3, r1
 80052c2:	bf01      	itttt	eq
 80052c4:	6819      	ldreq	r1, [r3, #0]
 80052c6:	685b      	ldreq	r3, [r3, #4]
 80052c8:	1809      	addeq	r1, r1, r0
 80052ca:	6021      	streq	r1, [r4, #0]
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	6054      	str	r4, [r2, #4]
 80052d0:	e7cb      	b.n	800526a <_free_r+0x22>
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	20000274 	.word	0x20000274

080052d8 <sbrk_aligned>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4e0e      	ldr	r6, [pc, #56]	; (8005314 <sbrk_aligned+0x3c>)
 80052dc:	460c      	mov	r4, r1
 80052de:	6831      	ldr	r1, [r6, #0]
 80052e0:	4605      	mov	r5, r0
 80052e2:	b911      	cbnz	r1, 80052ea <sbrk_aligned+0x12>
 80052e4:	f000 f9e8 	bl	80056b8 <_sbrk_r>
 80052e8:	6030      	str	r0, [r6, #0]
 80052ea:	4621      	mov	r1, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f9e3 	bl	80056b8 <_sbrk_r>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	d00a      	beq.n	800530c <sbrk_aligned+0x34>
 80052f6:	1cc4      	adds	r4, r0, #3
 80052f8:	f024 0403 	bic.w	r4, r4, #3
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d007      	beq.n	8005310 <sbrk_aligned+0x38>
 8005300:	1a21      	subs	r1, r4, r0
 8005302:	4628      	mov	r0, r5
 8005304:	f000 f9d8 	bl	80056b8 <_sbrk_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d101      	bne.n	8005310 <sbrk_aligned+0x38>
 800530c:	f04f 34ff 	mov.w	r4, #4294967295
 8005310:	4620      	mov	r0, r4
 8005312:	bd70      	pop	{r4, r5, r6, pc}
 8005314:	20000278 	.word	0x20000278

08005318 <_malloc_r>:
 8005318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531c:	1ccd      	adds	r5, r1, #3
 800531e:	f025 0503 	bic.w	r5, r5, #3
 8005322:	3508      	adds	r5, #8
 8005324:	2d0c      	cmp	r5, #12
 8005326:	bf38      	it	cc
 8005328:	250c      	movcc	r5, #12
 800532a:	2d00      	cmp	r5, #0
 800532c:	4607      	mov	r7, r0
 800532e:	db01      	blt.n	8005334 <_malloc_r+0x1c>
 8005330:	42a9      	cmp	r1, r5
 8005332:	d905      	bls.n	8005340 <_malloc_r+0x28>
 8005334:	230c      	movs	r3, #12
 8005336:	2600      	movs	r6, #0
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4630      	mov	r0, r6
 800533c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005340:	4e2e      	ldr	r6, [pc, #184]	; (80053fc <_malloc_r+0xe4>)
 8005342:	f000 fa25 	bl	8005790 <__malloc_lock>
 8005346:	6833      	ldr	r3, [r6, #0]
 8005348:	461c      	mov	r4, r3
 800534a:	bb34      	cbnz	r4, 800539a <_malloc_r+0x82>
 800534c:	4629      	mov	r1, r5
 800534e:	4638      	mov	r0, r7
 8005350:	f7ff ffc2 	bl	80052d8 <sbrk_aligned>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	4604      	mov	r4, r0
 8005358:	d14d      	bne.n	80053f6 <_malloc_r+0xde>
 800535a:	6834      	ldr	r4, [r6, #0]
 800535c:	4626      	mov	r6, r4
 800535e:	2e00      	cmp	r6, #0
 8005360:	d140      	bne.n	80053e4 <_malloc_r+0xcc>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	4631      	mov	r1, r6
 8005366:	4638      	mov	r0, r7
 8005368:	eb04 0803 	add.w	r8, r4, r3
 800536c:	f000 f9a4 	bl	80056b8 <_sbrk_r>
 8005370:	4580      	cmp	r8, r0
 8005372:	d13a      	bne.n	80053ea <_malloc_r+0xd2>
 8005374:	6821      	ldr	r1, [r4, #0]
 8005376:	3503      	adds	r5, #3
 8005378:	1a6d      	subs	r5, r5, r1
 800537a:	f025 0503 	bic.w	r5, r5, #3
 800537e:	3508      	adds	r5, #8
 8005380:	2d0c      	cmp	r5, #12
 8005382:	bf38      	it	cc
 8005384:	250c      	movcc	r5, #12
 8005386:	4638      	mov	r0, r7
 8005388:	4629      	mov	r1, r5
 800538a:	f7ff ffa5 	bl	80052d8 <sbrk_aligned>
 800538e:	3001      	adds	r0, #1
 8005390:	d02b      	beq.n	80053ea <_malloc_r+0xd2>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	442b      	add	r3, r5
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	e00e      	b.n	80053b8 <_malloc_r+0xa0>
 800539a:	6822      	ldr	r2, [r4, #0]
 800539c:	1b52      	subs	r2, r2, r5
 800539e:	d41e      	bmi.n	80053de <_malloc_r+0xc6>
 80053a0:	2a0b      	cmp	r2, #11
 80053a2:	d916      	bls.n	80053d2 <_malloc_r+0xba>
 80053a4:	1961      	adds	r1, r4, r5
 80053a6:	42a3      	cmp	r3, r4
 80053a8:	6025      	str	r5, [r4, #0]
 80053aa:	bf18      	it	ne
 80053ac:	6059      	strne	r1, [r3, #4]
 80053ae:	6863      	ldr	r3, [r4, #4]
 80053b0:	bf08      	it	eq
 80053b2:	6031      	streq	r1, [r6, #0]
 80053b4:	5162      	str	r2, [r4, r5]
 80053b6:	604b      	str	r3, [r1, #4]
 80053b8:	4638      	mov	r0, r7
 80053ba:	f104 060b 	add.w	r6, r4, #11
 80053be:	f000 f9ed 	bl	800579c <__malloc_unlock>
 80053c2:	f026 0607 	bic.w	r6, r6, #7
 80053c6:	1d23      	adds	r3, r4, #4
 80053c8:	1af2      	subs	r2, r6, r3
 80053ca:	d0b6      	beq.n	800533a <_malloc_r+0x22>
 80053cc:	1b9b      	subs	r3, r3, r6
 80053ce:	50a3      	str	r3, [r4, r2]
 80053d0:	e7b3      	b.n	800533a <_malloc_r+0x22>
 80053d2:	6862      	ldr	r2, [r4, #4]
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	bf0c      	ite	eq
 80053d8:	6032      	streq	r2, [r6, #0]
 80053da:	605a      	strne	r2, [r3, #4]
 80053dc:	e7ec      	b.n	80053b8 <_malloc_r+0xa0>
 80053de:	4623      	mov	r3, r4
 80053e0:	6864      	ldr	r4, [r4, #4]
 80053e2:	e7b2      	b.n	800534a <_malloc_r+0x32>
 80053e4:	4634      	mov	r4, r6
 80053e6:	6876      	ldr	r6, [r6, #4]
 80053e8:	e7b9      	b.n	800535e <_malloc_r+0x46>
 80053ea:	230c      	movs	r3, #12
 80053ec:	4638      	mov	r0, r7
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	f000 f9d4 	bl	800579c <__malloc_unlock>
 80053f4:	e7a1      	b.n	800533a <_malloc_r+0x22>
 80053f6:	6025      	str	r5, [r4, #0]
 80053f8:	e7de      	b.n	80053b8 <_malloc_r+0xa0>
 80053fa:	bf00      	nop
 80053fc:	20000274 	.word	0x20000274

08005400 <__ssputs_r>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	688e      	ldr	r6, [r1, #8]
 8005406:	4682      	mov	sl, r0
 8005408:	429e      	cmp	r6, r3
 800540a:	460c      	mov	r4, r1
 800540c:	4690      	mov	r8, r2
 800540e:	461f      	mov	r7, r3
 8005410:	d838      	bhi.n	8005484 <__ssputs_r+0x84>
 8005412:	898a      	ldrh	r2, [r1, #12]
 8005414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005418:	d032      	beq.n	8005480 <__ssputs_r+0x80>
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	6909      	ldr	r1, [r1, #16]
 800541e:	3301      	adds	r3, #1
 8005420:	eba5 0901 	sub.w	r9, r5, r1
 8005424:	6965      	ldr	r5, [r4, #20]
 8005426:	444b      	add	r3, r9
 8005428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800542c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005430:	106d      	asrs	r5, r5, #1
 8005432:	429d      	cmp	r5, r3
 8005434:	bf38      	it	cc
 8005436:	461d      	movcc	r5, r3
 8005438:	0553      	lsls	r3, r2, #21
 800543a:	d531      	bpl.n	80054a0 <__ssputs_r+0xa0>
 800543c:	4629      	mov	r1, r5
 800543e:	f7ff ff6b 	bl	8005318 <_malloc_r>
 8005442:	4606      	mov	r6, r0
 8005444:	b950      	cbnz	r0, 800545c <__ssputs_r+0x5c>
 8005446:	230c      	movs	r3, #12
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	f8ca 3000 	str.w	r3, [sl]
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545c:	464a      	mov	r2, r9
 800545e:	6921      	ldr	r1, [r4, #16]
 8005460:	f7ff fb4e 	bl	8004b00 <memcpy>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	81a3      	strh	r3, [r4, #12]
 8005470:	6126      	str	r6, [r4, #16]
 8005472:	444e      	add	r6, r9
 8005474:	6026      	str	r6, [r4, #0]
 8005476:	463e      	mov	r6, r7
 8005478:	6165      	str	r5, [r4, #20]
 800547a:	eba5 0509 	sub.w	r5, r5, r9
 800547e:	60a5      	str	r5, [r4, #8]
 8005480:	42be      	cmp	r6, r7
 8005482:	d900      	bls.n	8005486 <__ssputs_r+0x86>
 8005484:	463e      	mov	r6, r7
 8005486:	4632      	mov	r2, r6
 8005488:	4641      	mov	r1, r8
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	f000 f966 	bl	800575c <memmove>
 8005490:	68a3      	ldr	r3, [r4, #8]
 8005492:	2000      	movs	r0, #0
 8005494:	1b9b      	subs	r3, r3, r6
 8005496:	60a3      	str	r3, [r4, #8]
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	4433      	add	r3, r6
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	e7db      	b.n	8005458 <__ssputs_r+0x58>
 80054a0:	462a      	mov	r2, r5
 80054a2:	f000 f981 	bl	80057a8 <_realloc_r>
 80054a6:	4606      	mov	r6, r0
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d1e1      	bne.n	8005470 <__ssputs_r+0x70>
 80054ac:	4650      	mov	r0, sl
 80054ae:	6921      	ldr	r1, [r4, #16]
 80054b0:	f7ff feca 	bl	8005248 <_free_r>
 80054b4:	e7c7      	b.n	8005446 <__ssputs_r+0x46>
	...

080054b8 <_svfiprintf_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	4698      	mov	r8, r3
 80054be:	898b      	ldrh	r3, [r1, #12]
 80054c0:	4607      	mov	r7, r0
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	460d      	mov	r5, r1
 80054c6:	4614      	mov	r4, r2
 80054c8:	b09d      	sub	sp, #116	; 0x74
 80054ca:	d50e      	bpl.n	80054ea <_svfiprintf_r+0x32>
 80054cc:	690b      	ldr	r3, [r1, #16]
 80054ce:	b963      	cbnz	r3, 80054ea <_svfiprintf_r+0x32>
 80054d0:	2140      	movs	r1, #64	; 0x40
 80054d2:	f7ff ff21 	bl	8005318 <_malloc_r>
 80054d6:	6028      	str	r0, [r5, #0]
 80054d8:	6128      	str	r0, [r5, #16]
 80054da:	b920      	cbnz	r0, 80054e6 <_svfiprintf_r+0x2e>
 80054dc:	230c      	movs	r3, #12
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	e0d1      	b.n	800568a <_svfiprintf_r+0x1d2>
 80054e6:	2340      	movs	r3, #64	; 0x40
 80054e8:	616b      	str	r3, [r5, #20]
 80054ea:	2300      	movs	r3, #0
 80054ec:	9309      	str	r3, [sp, #36]	; 0x24
 80054ee:	2320      	movs	r3, #32
 80054f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054f4:	2330      	movs	r3, #48	; 0x30
 80054f6:	f04f 0901 	mov.w	r9, #1
 80054fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80054fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056a4 <_svfiprintf_r+0x1ec>
 8005502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005506:	4623      	mov	r3, r4
 8005508:	469a      	mov	sl, r3
 800550a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800550e:	b10a      	cbz	r2, 8005514 <_svfiprintf_r+0x5c>
 8005510:	2a25      	cmp	r2, #37	; 0x25
 8005512:	d1f9      	bne.n	8005508 <_svfiprintf_r+0x50>
 8005514:	ebba 0b04 	subs.w	fp, sl, r4
 8005518:	d00b      	beq.n	8005532 <_svfiprintf_r+0x7a>
 800551a:	465b      	mov	r3, fp
 800551c:	4622      	mov	r2, r4
 800551e:	4629      	mov	r1, r5
 8005520:	4638      	mov	r0, r7
 8005522:	f7ff ff6d 	bl	8005400 <__ssputs_r>
 8005526:	3001      	adds	r0, #1
 8005528:	f000 80aa 	beq.w	8005680 <_svfiprintf_r+0x1c8>
 800552c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800552e:	445a      	add	r2, fp
 8005530:	9209      	str	r2, [sp, #36]	; 0x24
 8005532:	f89a 3000 	ldrb.w	r3, [sl]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80a2 	beq.w	8005680 <_svfiprintf_r+0x1c8>
 800553c:	2300      	movs	r3, #0
 800553e:	f04f 32ff 	mov.w	r2, #4294967295
 8005542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005546:	f10a 0a01 	add.w	sl, sl, #1
 800554a:	9304      	str	r3, [sp, #16]
 800554c:	9307      	str	r3, [sp, #28]
 800554e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005552:	931a      	str	r3, [sp, #104]	; 0x68
 8005554:	4654      	mov	r4, sl
 8005556:	2205      	movs	r2, #5
 8005558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800555c:	4851      	ldr	r0, [pc, #324]	; (80056a4 <_svfiprintf_r+0x1ec>)
 800555e:	f7ff fac1 	bl	8004ae4 <memchr>
 8005562:	9a04      	ldr	r2, [sp, #16]
 8005564:	b9d8      	cbnz	r0, 800559e <_svfiprintf_r+0xe6>
 8005566:	06d0      	lsls	r0, r2, #27
 8005568:	bf44      	itt	mi
 800556a:	2320      	movmi	r3, #32
 800556c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005570:	0711      	lsls	r1, r2, #28
 8005572:	bf44      	itt	mi
 8005574:	232b      	movmi	r3, #43	; 0x2b
 8005576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800557a:	f89a 3000 	ldrb.w	r3, [sl]
 800557e:	2b2a      	cmp	r3, #42	; 0x2a
 8005580:	d015      	beq.n	80055ae <_svfiprintf_r+0xf6>
 8005582:	4654      	mov	r4, sl
 8005584:	2000      	movs	r0, #0
 8005586:	f04f 0c0a 	mov.w	ip, #10
 800558a:	9a07      	ldr	r2, [sp, #28]
 800558c:	4621      	mov	r1, r4
 800558e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005592:	3b30      	subs	r3, #48	; 0x30
 8005594:	2b09      	cmp	r3, #9
 8005596:	d94e      	bls.n	8005636 <_svfiprintf_r+0x17e>
 8005598:	b1b0      	cbz	r0, 80055c8 <_svfiprintf_r+0x110>
 800559a:	9207      	str	r2, [sp, #28]
 800559c:	e014      	b.n	80055c8 <_svfiprintf_r+0x110>
 800559e:	eba0 0308 	sub.w	r3, r0, r8
 80055a2:	fa09 f303 	lsl.w	r3, r9, r3
 80055a6:	4313      	orrs	r3, r2
 80055a8:	46a2      	mov	sl, r4
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	e7d2      	b.n	8005554 <_svfiprintf_r+0x9c>
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	1d19      	adds	r1, r3, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	9103      	str	r1, [sp, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bfbb      	ittet	lt
 80055ba:	425b      	neglt	r3, r3
 80055bc:	f042 0202 	orrlt.w	r2, r2, #2
 80055c0:	9307      	strge	r3, [sp, #28]
 80055c2:	9307      	strlt	r3, [sp, #28]
 80055c4:	bfb8      	it	lt
 80055c6:	9204      	strlt	r2, [sp, #16]
 80055c8:	7823      	ldrb	r3, [r4, #0]
 80055ca:	2b2e      	cmp	r3, #46	; 0x2e
 80055cc:	d10c      	bne.n	80055e8 <_svfiprintf_r+0x130>
 80055ce:	7863      	ldrb	r3, [r4, #1]
 80055d0:	2b2a      	cmp	r3, #42	; 0x2a
 80055d2:	d135      	bne.n	8005640 <_svfiprintf_r+0x188>
 80055d4:	9b03      	ldr	r3, [sp, #12]
 80055d6:	3402      	adds	r4, #2
 80055d8:	1d1a      	adds	r2, r3, #4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	9203      	str	r2, [sp, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bfb8      	it	lt
 80055e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80055e6:	9305      	str	r3, [sp, #20]
 80055e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80056a8 <_svfiprintf_r+0x1f0>
 80055ec:	2203      	movs	r2, #3
 80055ee:	4650      	mov	r0, sl
 80055f0:	7821      	ldrb	r1, [r4, #0]
 80055f2:	f7ff fa77 	bl	8004ae4 <memchr>
 80055f6:	b140      	cbz	r0, 800560a <_svfiprintf_r+0x152>
 80055f8:	2340      	movs	r3, #64	; 0x40
 80055fa:	eba0 000a 	sub.w	r0, r0, sl
 80055fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005602:	9b04      	ldr	r3, [sp, #16]
 8005604:	3401      	adds	r4, #1
 8005606:	4303      	orrs	r3, r0
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560e:	2206      	movs	r2, #6
 8005610:	4826      	ldr	r0, [pc, #152]	; (80056ac <_svfiprintf_r+0x1f4>)
 8005612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005616:	f7ff fa65 	bl	8004ae4 <memchr>
 800561a:	2800      	cmp	r0, #0
 800561c:	d038      	beq.n	8005690 <_svfiprintf_r+0x1d8>
 800561e:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <_svfiprintf_r+0x1f8>)
 8005620:	bb1b      	cbnz	r3, 800566a <_svfiprintf_r+0x1b2>
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	3307      	adds	r3, #7
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	3308      	adds	r3, #8
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005630:	4433      	add	r3, r6
 8005632:	9309      	str	r3, [sp, #36]	; 0x24
 8005634:	e767      	b.n	8005506 <_svfiprintf_r+0x4e>
 8005636:	460c      	mov	r4, r1
 8005638:	2001      	movs	r0, #1
 800563a:	fb0c 3202 	mla	r2, ip, r2, r3
 800563e:	e7a5      	b.n	800558c <_svfiprintf_r+0xd4>
 8005640:	2300      	movs	r3, #0
 8005642:	f04f 0c0a 	mov.w	ip, #10
 8005646:	4619      	mov	r1, r3
 8005648:	3401      	adds	r4, #1
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	4620      	mov	r0, r4
 800564e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005652:	3a30      	subs	r2, #48	; 0x30
 8005654:	2a09      	cmp	r2, #9
 8005656:	d903      	bls.n	8005660 <_svfiprintf_r+0x1a8>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0c5      	beq.n	80055e8 <_svfiprintf_r+0x130>
 800565c:	9105      	str	r1, [sp, #20]
 800565e:	e7c3      	b.n	80055e8 <_svfiprintf_r+0x130>
 8005660:	4604      	mov	r4, r0
 8005662:	2301      	movs	r3, #1
 8005664:	fb0c 2101 	mla	r1, ip, r1, r2
 8005668:	e7f0      	b.n	800564c <_svfiprintf_r+0x194>
 800566a:	ab03      	add	r3, sp, #12
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	462a      	mov	r2, r5
 8005670:	4638      	mov	r0, r7
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <_svfiprintf_r+0x1fc>)
 8005674:	a904      	add	r1, sp, #16
 8005676:	f7fd ffcb 	bl	8003610 <_printf_float>
 800567a:	1c42      	adds	r2, r0, #1
 800567c:	4606      	mov	r6, r0
 800567e:	d1d6      	bne.n	800562e <_svfiprintf_r+0x176>
 8005680:	89ab      	ldrh	r3, [r5, #12]
 8005682:	065b      	lsls	r3, r3, #25
 8005684:	f53f af2c 	bmi.w	80054e0 <_svfiprintf_r+0x28>
 8005688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800568a:	b01d      	add	sp, #116	; 0x74
 800568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005690:	ab03      	add	r3, sp, #12
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	462a      	mov	r2, r5
 8005696:	4638      	mov	r0, r7
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <_svfiprintf_r+0x1fc>)
 800569a:	a904      	add	r1, sp, #16
 800569c:	f7fe fa54 	bl	8003b48 <_printf_i>
 80056a0:	e7eb      	b.n	800567a <_svfiprintf_r+0x1c2>
 80056a2:	bf00      	nop
 80056a4:	08006554 	.word	0x08006554
 80056a8:	0800655a 	.word	0x0800655a
 80056ac:	0800655e 	.word	0x0800655e
 80056b0:	08003611 	.word	0x08003611
 80056b4:	08005401 	.word	0x08005401

080056b8 <_sbrk_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	2300      	movs	r3, #0
 80056bc:	4d05      	ldr	r5, [pc, #20]	; (80056d4 <_sbrk_r+0x1c>)
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fc f94c 	bl	8001960 <_sbrk>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_sbrk_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_sbrk_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	2000027c 	.word	0x2000027c

080056d8 <__assert_func>:
 80056d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056da:	4614      	mov	r4, r2
 80056dc:	461a      	mov	r2, r3
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <__assert_func+0x2c>)
 80056e0:	4605      	mov	r5, r0
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68d8      	ldr	r0, [r3, #12]
 80056e6:	b14c      	cbz	r4, 80056fc <__assert_func+0x24>
 80056e8:	4b07      	ldr	r3, [pc, #28]	; (8005708 <__assert_func+0x30>)
 80056ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056ee:	9100      	str	r1, [sp, #0]
 80056f0:	462b      	mov	r3, r5
 80056f2:	4906      	ldr	r1, [pc, #24]	; (800570c <__assert_func+0x34>)
 80056f4:	f000 f80e 	bl	8005714 <fiprintf>
 80056f8:	f000 faaa 	bl	8005c50 <abort>
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <__assert_func+0x38>)
 80056fe:	461c      	mov	r4, r3
 8005700:	e7f3      	b.n	80056ea <__assert_func+0x12>
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c
 8005708:	08006565 	.word	0x08006565
 800570c:	08006572 	.word	0x08006572
 8005710:	080065a0 	.word	0x080065a0

08005714 <fiprintf>:
 8005714:	b40e      	push	{r1, r2, r3}
 8005716:	b503      	push	{r0, r1, lr}
 8005718:	4601      	mov	r1, r0
 800571a:	ab03      	add	r3, sp, #12
 800571c:	4805      	ldr	r0, [pc, #20]	; (8005734 <fiprintf+0x20>)
 800571e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005722:	6800      	ldr	r0, [r0, #0]
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	f000 f895 	bl	8005854 <_vfiprintf_r>
 800572a:	b002      	add	sp, #8
 800572c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005730:	b003      	add	sp, #12
 8005732:	4770      	bx	lr
 8005734:	2000000c 	.word	0x2000000c

08005738 <__ascii_mbtowc>:
 8005738:	b082      	sub	sp, #8
 800573a:	b901      	cbnz	r1, 800573e <__ascii_mbtowc+0x6>
 800573c:	a901      	add	r1, sp, #4
 800573e:	b142      	cbz	r2, 8005752 <__ascii_mbtowc+0x1a>
 8005740:	b14b      	cbz	r3, 8005756 <__ascii_mbtowc+0x1e>
 8005742:	7813      	ldrb	r3, [r2, #0]
 8005744:	600b      	str	r3, [r1, #0]
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	1e10      	subs	r0, r2, #0
 800574a:	bf18      	it	ne
 800574c:	2001      	movne	r0, #1
 800574e:	b002      	add	sp, #8
 8005750:	4770      	bx	lr
 8005752:	4610      	mov	r0, r2
 8005754:	e7fb      	b.n	800574e <__ascii_mbtowc+0x16>
 8005756:	f06f 0001 	mvn.w	r0, #1
 800575a:	e7f8      	b.n	800574e <__ascii_mbtowc+0x16>

0800575c <memmove>:
 800575c:	4288      	cmp	r0, r1
 800575e:	b510      	push	{r4, lr}
 8005760:	eb01 0402 	add.w	r4, r1, r2
 8005764:	d902      	bls.n	800576c <memmove+0x10>
 8005766:	4284      	cmp	r4, r0
 8005768:	4623      	mov	r3, r4
 800576a:	d807      	bhi.n	800577c <memmove+0x20>
 800576c:	1e43      	subs	r3, r0, #1
 800576e:	42a1      	cmp	r1, r4
 8005770:	d008      	beq.n	8005784 <memmove+0x28>
 8005772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800577a:	e7f8      	b.n	800576e <memmove+0x12>
 800577c:	4601      	mov	r1, r0
 800577e:	4402      	add	r2, r0
 8005780:	428a      	cmp	r2, r1
 8005782:	d100      	bne.n	8005786 <memmove+0x2a>
 8005784:	bd10      	pop	{r4, pc}
 8005786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800578a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800578e:	e7f7      	b.n	8005780 <memmove+0x24>

08005790 <__malloc_lock>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__malloc_lock+0x8>)
 8005792:	f000 bc19 	b.w	8005fc8 <__retarget_lock_acquire_recursive>
 8005796:	bf00      	nop
 8005798:	20000280 	.word	0x20000280

0800579c <__malloc_unlock>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__malloc_unlock+0x8>)
 800579e:	f000 bc14 	b.w	8005fca <__retarget_lock_release_recursive>
 80057a2:	bf00      	nop
 80057a4:	20000280 	.word	0x20000280

080057a8 <_realloc_r>:
 80057a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ac:	4680      	mov	r8, r0
 80057ae:	4614      	mov	r4, r2
 80057b0:	460e      	mov	r6, r1
 80057b2:	b921      	cbnz	r1, 80057be <_realloc_r+0x16>
 80057b4:	4611      	mov	r1, r2
 80057b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ba:	f7ff bdad 	b.w	8005318 <_malloc_r>
 80057be:	b92a      	cbnz	r2, 80057cc <_realloc_r+0x24>
 80057c0:	f7ff fd42 	bl	8005248 <_free_r>
 80057c4:	4625      	mov	r5, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057cc:	f000 fc64 	bl	8006098 <_malloc_usable_size_r>
 80057d0:	4284      	cmp	r4, r0
 80057d2:	4607      	mov	r7, r0
 80057d4:	d802      	bhi.n	80057dc <_realloc_r+0x34>
 80057d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057da:	d812      	bhi.n	8005802 <_realloc_r+0x5a>
 80057dc:	4621      	mov	r1, r4
 80057de:	4640      	mov	r0, r8
 80057e0:	f7ff fd9a 	bl	8005318 <_malloc_r>
 80057e4:	4605      	mov	r5, r0
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d0ed      	beq.n	80057c6 <_realloc_r+0x1e>
 80057ea:	42bc      	cmp	r4, r7
 80057ec:	4622      	mov	r2, r4
 80057ee:	4631      	mov	r1, r6
 80057f0:	bf28      	it	cs
 80057f2:	463a      	movcs	r2, r7
 80057f4:	f7ff f984 	bl	8004b00 <memcpy>
 80057f8:	4631      	mov	r1, r6
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7ff fd24 	bl	8005248 <_free_r>
 8005800:	e7e1      	b.n	80057c6 <_realloc_r+0x1e>
 8005802:	4635      	mov	r5, r6
 8005804:	e7df      	b.n	80057c6 <_realloc_r+0x1e>

08005806 <__sfputc_r>:
 8005806:	6893      	ldr	r3, [r2, #8]
 8005808:	b410      	push	{r4}
 800580a:	3b01      	subs	r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	6093      	str	r3, [r2, #8]
 8005810:	da07      	bge.n	8005822 <__sfputc_r+0x1c>
 8005812:	6994      	ldr	r4, [r2, #24]
 8005814:	42a3      	cmp	r3, r4
 8005816:	db01      	blt.n	800581c <__sfputc_r+0x16>
 8005818:	290a      	cmp	r1, #10
 800581a:	d102      	bne.n	8005822 <__sfputc_r+0x1c>
 800581c:	bc10      	pop	{r4}
 800581e:	f000 b949 	b.w	8005ab4 <__swbuf_r>
 8005822:	6813      	ldr	r3, [r2, #0]
 8005824:	1c58      	adds	r0, r3, #1
 8005826:	6010      	str	r0, [r2, #0]
 8005828:	7019      	strb	r1, [r3, #0]
 800582a:	4608      	mov	r0, r1
 800582c:	bc10      	pop	{r4}
 800582e:	4770      	bx	lr

08005830 <__sfputs_r>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	4606      	mov	r6, r0
 8005834:	460f      	mov	r7, r1
 8005836:	4614      	mov	r4, r2
 8005838:	18d5      	adds	r5, r2, r3
 800583a:	42ac      	cmp	r4, r5
 800583c:	d101      	bne.n	8005842 <__sfputs_r+0x12>
 800583e:	2000      	movs	r0, #0
 8005840:	e007      	b.n	8005852 <__sfputs_r+0x22>
 8005842:	463a      	mov	r2, r7
 8005844:	4630      	mov	r0, r6
 8005846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584a:	f7ff ffdc 	bl	8005806 <__sfputc_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	d1f3      	bne.n	800583a <__sfputs_r+0xa>
 8005852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005854 <_vfiprintf_r>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	460d      	mov	r5, r1
 800585a:	4614      	mov	r4, r2
 800585c:	4698      	mov	r8, r3
 800585e:	4606      	mov	r6, r0
 8005860:	b09d      	sub	sp, #116	; 0x74
 8005862:	b118      	cbz	r0, 800586c <_vfiprintf_r+0x18>
 8005864:	6983      	ldr	r3, [r0, #24]
 8005866:	b90b      	cbnz	r3, 800586c <_vfiprintf_r+0x18>
 8005868:	f000 fb10 	bl	8005e8c <__sinit>
 800586c:	4b89      	ldr	r3, [pc, #548]	; (8005a94 <_vfiprintf_r+0x240>)
 800586e:	429d      	cmp	r5, r3
 8005870:	d11b      	bne.n	80058aa <_vfiprintf_r+0x56>
 8005872:	6875      	ldr	r5, [r6, #4]
 8005874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005876:	07d9      	lsls	r1, r3, #31
 8005878:	d405      	bmi.n	8005886 <_vfiprintf_r+0x32>
 800587a:	89ab      	ldrh	r3, [r5, #12]
 800587c:	059a      	lsls	r2, r3, #22
 800587e:	d402      	bmi.n	8005886 <_vfiprintf_r+0x32>
 8005880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005882:	f000 fba1 	bl	8005fc8 <__retarget_lock_acquire_recursive>
 8005886:	89ab      	ldrh	r3, [r5, #12]
 8005888:	071b      	lsls	r3, r3, #28
 800588a:	d501      	bpl.n	8005890 <_vfiprintf_r+0x3c>
 800588c:	692b      	ldr	r3, [r5, #16]
 800588e:	b9eb      	cbnz	r3, 80058cc <_vfiprintf_r+0x78>
 8005890:	4629      	mov	r1, r5
 8005892:	4630      	mov	r0, r6
 8005894:	f000 f96e 	bl	8005b74 <__swsetup_r>
 8005898:	b1c0      	cbz	r0, 80058cc <_vfiprintf_r+0x78>
 800589a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800589c:	07dc      	lsls	r4, r3, #31
 800589e:	d50e      	bpl.n	80058be <_vfiprintf_r+0x6a>
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	b01d      	add	sp, #116	; 0x74
 80058a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058aa:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <_vfiprintf_r+0x244>)
 80058ac:	429d      	cmp	r5, r3
 80058ae:	d101      	bne.n	80058b4 <_vfiprintf_r+0x60>
 80058b0:	68b5      	ldr	r5, [r6, #8]
 80058b2:	e7df      	b.n	8005874 <_vfiprintf_r+0x20>
 80058b4:	4b79      	ldr	r3, [pc, #484]	; (8005a9c <_vfiprintf_r+0x248>)
 80058b6:	429d      	cmp	r5, r3
 80058b8:	bf08      	it	eq
 80058ba:	68f5      	ldreq	r5, [r6, #12]
 80058bc:	e7da      	b.n	8005874 <_vfiprintf_r+0x20>
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	0598      	lsls	r0, r3, #22
 80058c2:	d4ed      	bmi.n	80058a0 <_vfiprintf_r+0x4c>
 80058c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c6:	f000 fb80 	bl	8005fca <__retarget_lock_release_recursive>
 80058ca:	e7e9      	b.n	80058a0 <_vfiprintf_r+0x4c>
 80058cc:	2300      	movs	r3, #0
 80058ce:	9309      	str	r3, [sp, #36]	; 0x24
 80058d0:	2320      	movs	r3, #32
 80058d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d6:	2330      	movs	r3, #48	; 0x30
 80058d8:	f04f 0901 	mov.w	r9, #1
 80058dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005aa0 <_vfiprintf_r+0x24c>
 80058e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e8:	4623      	mov	r3, r4
 80058ea:	469a      	mov	sl, r3
 80058ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f0:	b10a      	cbz	r2, 80058f6 <_vfiprintf_r+0xa2>
 80058f2:	2a25      	cmp	r2, #37	; 0x25
 80058f4:	d1f9      	bne.n	80058ea <_vfiprintf_r+0x96>
 80058f6:	ebba 0b04 	subs.w	fp, sl, r4
 80058fa:	d00b      	beq.n	8005914 <_vfiprintf_r+0xc0>
 80058fc:	465b      	mov	r3, fp
 80058fe:	4622      	mov	r2, r4
 8005900:	4629      	mov	r1, r5
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff ff94 	bl	8005830 <__sfputs_r>
 8005908:	3001      	adds	r0, #1
 800590a:	f000 80aa 	beq.w	8005a62 <_vfiprintf_r+0x20e>
 800590e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005910:	445a      	add	r2, fp
 8005912:	9209      	str	r2, [sp, #36]	; 0x24
 8005914:	f89a 3000 	ldrb.w	r3, [sl]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80a2 	beq.w	8005a62 <_vfiprintf_r+0x20e>
 800591e:	2300      	movs	r3, #0
 8005920:	f04f 32ff 	mov.w	r2, #4294967295
 8005924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005928:	f10a 0a01 	add.w	sl, sl, #1
 800592c:	9304      	str	r3, [sp, #16]
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005934:	931a      	str	r3, [sp, #104]	; 0x68
 8005936:	4654      	mov	r4, sl
 8005938:	2205      	movs	r2, #5
 800593a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593e:	4858      	ldr	r0, [pc, #352]	; (8005aa0 <_vfiprintf_r+0x24c>)
 8005940:	f7ff f8d0 	bl	8004ae4 <memchr>
 8005944:	9a04      	ldr	r2, [sp, #16]
 8005946:	b9d8      	cbnz	r0, 8005980 <_vfiprintf_r+0x12c>
 8005948:	06d1      	lsls	r1, r2, #27
 800594a:	bf44      	itt	mi
 800594c:	2320      	movmi	r3, #32
 800594e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005952:	0713      	lsls	r3, r2, #28
 8005954:	bf44      	itt	mi
 8005956:	232b      	movmi	r3, #43	; 0x2b
 8005958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595c:	f89a 3000 	ldrb.w	r3, [sl]
 8005960:	2b2a      	cmp	r3, #42	; 0x2a
 8005962:	d015      	beq.n	8005990 <_vfiprintf_r+0x13c>
 8005964:	4654      	mov	r4, sl
 8005966:	2000      	movs	r0, #0
 8005968:	f04f 0c0a 	mov.w	ip, #10
 800596c:	9a07      	ldr	r2, [sp, #28]
 800596e:	4621      	mov	r1, r4
 8005970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005974:	3b30      	subs	r3, #48	; 0x30
 8005976:	2b09      	cmp	r3, #9
 8005978:	d94e      	bls.n	8005a18 <_vfiprintf_r+0x1c4>
 800597a:	b1b0      	cbz	r0, 80059aa <_vfiprintf_r+0x156>
 800597c:	9207      	str	r2, [sp, #28]
 800597e:	e014      	b.n	80059aa <_vfiprintf_r+0x156>
 8005980:	eba0 0308 	sub.w	r3, r0, r8
 8005984:	fa09 f303 	lsl.w	r3, r9, r3
 8005988:	4313      	orrs	r3, r2
 800598a:	46a2      	mov	sl, r4
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	e7d2      	b.n	8005936 <_vfiprintf_r+0xe2>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	1d19      	adds	r1, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	9103      	str	r1, [sp, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	bfbb      	ittet	lt
 800599c:	425b      	neglt	r3, r3
 800599e:	f042 0202 	orrlt.w	r2, r2, #2
 80059a2:	9307      	strge	r3, [sp, #28]
 80059a4:	9307      	strlt	r3, [sp, #28]
 80059a6:	bfb8      	it	lt
 80059a8:	9204      	strlt	r2, [sp, #16]
 80059aa:	7823      	ldrb	r3, [r4, #0]
 80059ac:	2b2e      	cmp	r3, #46	; 0x2e
 80059ae:	d10c      	bne.n	80059ca <_vfiprintf_r+0x176>
 80059b0:	7863      	ldrb	r3, [r4, #1]
 80059b2:	2b2a      	cmp	r3, #42	; 0x2a
 80059b4:	d135      	bne.n	8005a22 <_vfiprintf_r+0x1ce>
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	3402      	adds	r4, #2
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	9203      	str	r2, [sp, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bfb8      	it	lt
 80059c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c8:	9305      	str	r3, [sp, #20]
 80059ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005aa4 <_vfiprintf_r+0x250>
 80059ce:	2203      	movs	r2, #3
 80059d0:	4650      	mov	r0, sl
 80059d2:	7821      	ldrb	r1, [r4, #0]
 80059d4:	f7ff f886 	bl	8004ae4 <memchr>
 80059d8:	b140      	cbz	r0, 80059ec <_vfiprintf_r+0x198>
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	eba0 000a 	sub.w	r0, r0, sl
 80059e0:	fa03 f000 	lsl.w	r0, r3, r0
 80059e4:	9b04      	ldr	r3, [sp, #16]
 80059e6:	3401      	adds	r4, #1
 80059e8:	4303      	orrs	r3, r0
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	2206      	movs	r2, #6
 80059f2:	482d      	ldr	r0, [pc, #180]	; (8005aa8 <_vfiprintf_r+0x254>)
 80059f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f8:	f7ff f874 	bl	8004ae4 <memchr>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d03f      	beq.n	8005a80 <_vfiprintf_r+0x22c>
 8005a00:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <_vfiprintf_r+0x258>)
 8005a02:	bb1b      	cbnz	r3, 8005a4c <_vfiprintf_r+0x1f8>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	3307      	adds	r3, #7
 8005a08:	f023 0307 	bic.w	r3, r3, #7
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	443b      	add	r3, r7
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	e767      	b.n	80058e8 <_vfiprintf_r+0x94>
 8005a18:	460c      	mov	r4, r1
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a20:	e7a5      	b.n	800596e <_vfiprintf_r+0x11a>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f04f 0c0a 	mov.w	ip, #10
 8005a28:	4619      	mov	r1, r3
 8005a2a:	3401      	adds	r4, #1
 8005a2c:	9305      	str	r3, [sp, #20]
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a34:	3a30      	subs	r2, #48	; 0x30
 8005a36:	2a09      	cmp	r2, #9
 8005a38:	d903      	bls.n	8005a42 <_vfiprintf_r+0x1ee>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0c5      	beq.n	80059ca <_vfiprintf_r+0x176>
 8005a3e:	9105      	str	r1, [sp, #20]
 8005a40:	e7c3      	b.n	80059ca <_vfiprintf_r+0x176>
 8005a42:	4604      	mov	r4, r0
 8005a44:	2301      	movs	r3, #1
 8005a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a4a:	e7f0      	b.n	8005a2e <_vfiprintf_r+0x1da>
 8005a4c:	ab03      	add	r3, sp, #12
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	462a      	mov	r2, r5
 8005a52:	4630      	mov	r0, r6
 8005a54:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <_vfiprintf_r+0x25c>)
 8005a56:	a904      	add	r1, sp, #16
 8005a58:	f7fd fdda 	bl	8003610 <_printf_float>
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	1c78      	adds	r0, r7, #1
 8005a60:	d1d6      	bne.n	8005a10 <_vfiprintf_r+0x1bc>
 8005a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a64:	07d9      	lsls	r1, r3, #31
 8005a66:	d405      	bmi.n	8005a74 <_vfiprintf_r+0x220>
 8005a68:	89ab      	ldrh	r3, [r5, #12]
 8005a6a:	059a      	lsls	r2, r3, #22
 8005a6c:	d402      	bmi.n	8005a74 <_vfiprintf_r+0x220>
 8005a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a70:	f000 faab 	bl	8005fca <__retarget_lock_release_recursive>
 8005a74:	89ab      	ldrh	r3, [r5, #12]
 8005a76:	065b      	lsls	r3, r3, #25
 8005a78:	f53f af12 	bmi.w	80058a0 <_vfiprintf_r+0x4c>
 8005a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a7e:	e711      	b.n	80058a4 <_vfiprintf_r+0x50>
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	462a      	mov	r2, r5
 8005a86:	4630      	mov	r0, r6
 8005a88:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <_vfiprintf_r+0x25c>)
 8005a8a:	a904      	add	r1, sp, #16
 8005a8c:	f7fe f85c 	bl	8003b48 <_printf_i>
 8005a90:	e7e4      	b.n	8005a5c <_vfiprintf_r+0x208>
 8005a92:	bf00      	nop
 8005a94:	080066cc 	.word	0x080066cc
 8005a98:	080066ec 	.word	0x080066ec
 8005a9c:	080066ac 	.word	0x080066ac
 8005aa0:	08006554 	.word	0x08006554
 8005aa4:	0800655a 	.word	0x0800655a
 8005aa8:	0800655e 	.word	0x0800655e
 8005aac:	08003611 	.word	0x08003611
 8005ab0:	08005831 	.word	0x08005831

08005ab4 <__swbuf_r>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	460e      	mov	r6, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	4605      	mov	r5, r0
 8005abc:	b118      	cbz	r0, 8005ac6 <__swbuf_r+0x12>
 8005abe:	6983      	ldr	r3, [r0, #24]
 8005ac0:	b90b      	cbnz	r3, 8005ac6 <__swbuf_r+0x12>
 8005ac2:	f000 f9e3 	bl	8005e8c <__sinit>
 8005ac6:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <__swbuf_r+0x98>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	d12b      	bne.n	8005b24 <__swbuf_r+0x70>
 8005acc:	686c      	ldr	r4, [r5, #4]
 8005ace:	69a3      	ldr	r3, [r4, #24]
 8005ad0:	60a3      	str	r3, [r4, #8]
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	071a      	lsls	r2, r3, #28
 8005ad6:	d52f      	bpl.n	8005b38 <__swbuf_r+0x84>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	b36b      	cbz	r3, 8005b38 <__swbuf_r+0x84>
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	b2f6      	uxtb	r6, r6
 8005ae2:	1ac0      	subs	r0, r0, r3
 8005ae4:	6963      	ldr	r3, [r4, #20]
 8005ae6:	4637      	mov	r7, r6
 8005ae8:	4283      	cmp	r3, r0
 8005aea:	dc04      	bgt.n	8005af6 <__swbuf_r+0x42>
 8005aec:	4621      	mov	r1, r4
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 f938 	bl	8005d64 <_fflush_r>
 8005af4:	bb30      	cbnz	r0, 8005b44 <__swbuf_r+0x90>
 8005af6:	68a3      	ldr	r3, [r4, #8]
 8005af8:	3001      	adds	r0, #1
 8005afa:	3b01      	subs	r3, #1
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	6022      	str	r2, [r4, #0]
 8005b04:	701e      	strb	r6, [r3, #0]
 8005b06:	6963      	ldr	r3, [r4, #20]
 8005b08:	4283      	cmp	r3, r0
 8005b0a:	d004      	beq.n	8005b16 <__swbuf_r+0x62>
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	07db      	lsls	r3, r3, #31
 8005b10:	d506      	bpl.n	8005b20 <__swbuf_r+0x6c>
 8005b12:	2e0a      	cmp	r6, #10
 8005b14:	d104      	bne.n	8005b20 <__swbuf_r+0x6c>
 8005b16:	4621      	mov	r1, r4
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 f923 	bl	8005d64 <_fflush_r>
 8005b1e:	b988      	cbnz	r0, 8005b44 <__swbuf_r+0x90>
 8005b20:	4638      	mov	r0, r7
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <__swbuf_r+0x9c>)
 8005b26:	429c      	cmp	r4, r3
 8005b28:	d101      	bne.n	8005b2e <__swbuf_r+0x7a>
 8005b2a:	68ac      	ldr	r4, [r5, #8]
 8005b2c:	e7cf      	b.n	8005ace <__swbuf_r+0x1a>
 8005b2e:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <__swbuf_r+0xa0>)
 8005b30:	429c      	cmp	r4, r3
 8005b32:	bf08      	it	eq
 8005b34:	68ec      	ldreq	r4, [r5, #12]
 8005b36:	e7ca      	b.n	8005ace <__swbuf_r+0x1a>
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 f81a 	bl	8005b74 <__swsetup_r>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d0cb      	beq.n	8005adc <__swbuf_r+0x28>
 8005b44:	f04f 37ff 	mov.w	r7, #4294967295
 8005b48:	e7ea      	b.n	8005b20 <__swbuf_r+0x6c>
 8005b4a:	bf00      	nop
 8005b4c:	080066cc 	.word	0x080066cc
 8005b50:	080066ec 	.word	0x080066ec
 8005b54:	080066ac 	.word	0x080066ac

08005b58 <__ascii_wctomb>:
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4608      	mov	r0, r1
 8005b5c:	b141      	cbz	r1, 8005b70 <__ascii_wctomb+0x18>
 8005b5e:	2aff      	cmp	r2, #255	; 0xff
 8005b60:	d904      	bls.n	8005b6c <__ascii_wctomb+0x14>
 8005b62:	228a      	movs	r2, #138	; 0x8a
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	4770      	bx	lr
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	700a      	strb	r2, [r1, #0]
 8005b70:	4770      	bx	lr
	...

08005b74 <__swsetup_r>:
 8005b74:	4b32      	ldr	r3, [pc, #200]	; (8005c40 <__swsetup_r+0xcc>)
 8005b76:	b570      	push	{r4, r5, r6, lr}
 8005b78:	681d      	ldr	r5, [r3, #0]
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	b125      	cbz	r5, 8005b8a <__swsetup_r+0x16>
 8005b80:	69ab      	ldr	r3, [r5, #24]
 8005b82:	b913      	cbnz	r3, 8005b8a <__swsetup_r+0x16>
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 f981 	bl	8005e8c <__sinit>
 8005b8a:	4b2e      	ldr	r3, [pc, #184]	; (8005c44 <__swsetup_r+0xd0>)
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	d10f      	bne.n	8005bb0 <__swsetup_r+0x3c>
 8005b90:	686c      	ldr	r4, [r5, #4]
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b98:	0719      	lsls	r1, r3, #28
 8005b9a:	d42c      	bmi.n	8005bf6 <__swsetup_r+0x82>
 8005b9c:	06dd      	lsls	r5, r3, #27
 8005b9e:	d411      	bmi.n	8005bc4 <__swsetup_r+0x50>
 8005ba0:	2309      	movs	r3, #9
 8005ba2:	6033      	str	r3, [r6, #0]
 8005ba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	e03e      	b.n	8005c2e <__swsetup_r+0xba>
 8005bb0:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <__swsetup_r+0xd4>)
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	d101      	bne.n	8005bba <__swsetup_r+0x46>
 8005bb6:	68ac      	ldr	r4, [r5, #8]
 8005bb8:	e7eb      	b.n	8005b92 <__swsetup_r+0x1e>
 8005bba:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <__swsetup_r+0xd8>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	bf08      	it	eq
 8005bc0:	68ec      	ldreq	r4, [r5, #12]
 8005bc2:	e7e6      	b.n	8005b92 <__swsetup_r+0x1e>
 8005bc4:	0758      	lsls	r0, r3, #29
 8005bc6:	d512      	bpl.n	8005bee <__swsetup_r+0x7a>
 8005bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bca:	b141      	cbz	r1, 8005bde <__swsetup_r+0x6a>
 8005bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	d002      	beq.n	8005bda <__swsetup_r+0x66>
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff fb37 	bl	8005248 <_free_r>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	2300      	movs	r3, #0
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f043 0308 	orr.w	r3, r3, #8
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	b94b      	cbnz	r3, 8005c0e <__swsetup_r+0x9a>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c04:	d003      	beq.n	8005c0e <__swsetup_r+0x9a>
 8005c06:	4621      	mov	r1, r4
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f000 fa05 	bl	8006018 <__smakebuf_r>
 8005c0e:	89a0      	ldrh	r0, [r4, #12]
 8005c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c14:	f010 0301 	ands.w	r3, r0, #1
 8005c18:	d00a      	beq.n	8005c30 <__swsetup_r+0xbc>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60a3      	str	r3, [r4, #8]
 8005c1e:	6963      	ldr	r3, [r4, #20]
 8005c20:	425b      	negs	r3, r3
 8005c22:	61a3      	str	r3, [r4, #24]
 8005c24:	6923      	ldr	r3, [r4, #16]
 8005c26:	b943      	cbnz	r3, 8005c3a <__swsetup_r+0xc6>
 8005c28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c2c:	d1ba      	bne.n	8005ba4 <__swsetup_r+0x30>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	0781      	lsls	r1, r0, #30
 8005c32:	bf58      	it	pl
 8005c34:	6963      	ldrpl	r3, [r4, #20]
 8005c36:	60a3      	str	r3, [r4, #8]
 8005c38:	e7f4      	b.n	8005c24 <__swsetup_r+0xb0>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e7f7      	b.n	8005c2e <__swsetup_r+0xba>
 8005c3e:	bf00      	nop
 8005c40:	2000000c 	.word	0x2000000c
 8005c44:	080066cc 	.word	0x080066cc
 8005c48:	080066ec 	.word	0x080066ec
 8005c4c:	080066ac 	.word	0x080066ac

08005c50 <abort>:
 8005c50:	2006      	movs	r0, #6
 8005c52:	b508      	push	{r3, lr}
 8005c54:	f000 fa50 	bl	80060f8 <raise>
 8005c58:	2001      	movs	r0, #1
 8005c5a:	f7fb fe0d 	bl	8001878 <_exit>
	...

08005c60 <__sflush_r>:
 8005c60:	898a      	ldrh	r2, [r1, #12]
 8005c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c64:	4605      	mov	r5, r0
 8005c66:	0710      	lsls	r0, r2, #28
 8005c68:	460c      	mov	r4, r1
 8005c6a:	d457      	bmi.n	8005d1c <__sflush_r+0xbc>
 8005c6c:	684b      	ldr	r3, [r1, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	dc04      	bgt.n	8005c7c <__sflush_r+0x1c>
 8005c72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dc01      	bgt.n	8005c7c <__sflush_r+0x1c>
 8005c78:	2000      	movs	r0, #0
 8005c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	d0fa      	beq.n	8005c78 <__sflush_r+0x18>
 8005c82:	2300      	movs	r3, #0
 8005c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c88:	682f      	ldr	r7, [r5, #0]
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	d032      	beq.n	8005cf4 <__sflush_r+0x94>
 8005c8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	075a      	lsls	r2, r3, #29
 8005c94:	d505      	bpl.n	8005ca2 <__sflush_r+0x42>
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	1ac0      	subs	r0, r0, r3
 8005c9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c9c:	b10b      	cbz	r3, 8005ca2 <__sflush_r+0x42>
 8005c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ca0:	1ac0      	subs	r0, r0, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ca8:	4628      	mov	r0, r5
 8005caa:	6a21      	ldr	r1, [r4, #32]
 8005cac:	47b0      	blx	r6
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	d106      	bne.n	8005cc2 <__sflush_r+0x62>
 8005cb4:	6829      	ldr	r1, [r5, #0]
 8005cb6:	291d      	cmp	r1, #29
 8005cb8:	d82c      	bhi.n	8005d14 <__sflush_r+0xb4>
 8005cba:	4a29      	ldr	r2, [pc, #164]	; (8005d60 <__sflush_r+0x100>)
 8005cbc:	40ca      	lsrs	r2, r1
 8005cbe:	07d6      	lsls	r6, r2, #31
 8005cc0:	d528      	bpl.n	8005d14 <__sflush_r+0xb4>
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	6062      	str	r2, [r4, #4]
 8005cc6:	6922      	ldr	r2, [r4, #16]
 8005cc8:	04d9      	lsls	r1, r3, #19
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	d504      	bpl.n	8005cd8 <__sflush_r+0x78>
 8005cce:	1c42      	adds	r2, r0, #1
 8005cd0:	d101      	bne.n	8005cd6 <__sflush_r+0x76>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	b903      	cbnz	r3, 8005cd8 <__sflush_r+0x78>
 8005cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8005cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cda:	602f      	str	r7, [r5, #0]
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	d0cb      	beq.n	8005c78 <__sflush_r+0x18>
 8005ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce4:	4299      	cmp	r1, r3
 8005ce6:	d002      	beq.n	8005cee <__sflush_r+0x8e>
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7ff faad 	bl	8005248 <_free_r>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	6360      	str	r0, [r4, #52]	; 0x34
 8005cf2:	e7c2      	b.n	8005c7a <__sflush_r+0x1a>
 8005cf4:	6a21      	ldr	r1, [r4, #32]
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b0      	blx	r6
 8005cfc:	1c41      	adds	r1, r0, #1
 8005cfe:	d1c7      	bne.n	8005c90 <__sflush_r+0x30>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0c4      	beq.n	8005c90 <__sflush_r+0x30>
 8005d06:	2b1d      	cmp	r3, #29
 8005d08:	d001      	beq.n	8005d0e <__sflush_r+0xae>
 8005d0a:	2b16      	cmp	r3, #22
 8005d0c:	d101      	bne.n	8005d12 <__sflush_r+0xb2>
 8005d0e:	602f      	str	r7, [r5, #0]
 8005d10:	e7b2      	b.n	8005c78 <__sflush_r+0x18>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	e7ae      	b.n	8005c7a <__sflush_r+0x1a>
 8005d1c:	690f      	ldr	r7, [r1, #16]
 8005d1e:	2f00      	cmp	r7, #0
 8005d20:	d0aa      	beq.n	8005c78 <__sflush_r+0x18>
 8005d22:	0793      	lsls	r3, r2, #30
 8005d24:	bf18      	it	ne
 8005d26:	2300      	movne	r3, #0
 8005d28:	680e      	ldr	r6, [r1, #0]
 8005d2a:	bf08      	it	eq
 8005d2c:	694b      	ldreq	r3, [r1, #20]
 8005d2e:	1bf6      	subs	r6, r6, r7
 8005d30:	600f      	str	r7, [r1, #0]
 8005d32:	608b      	str	r3, [r1, #8]
 8005d34:	2e00      	cmp	r6, #0
 8005d36:	dd9f      	ble.n	8005c78 <__sflush_r+0x18>
 8005d38:	4633      	mov	r3, r6
 8005d3a:	463a      	mov	r2, r7
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	6a21      	ldr	r1, [r4, #32]
 8005d40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005d44:	47e0      	blx	ip
 8005d46:	2800      	cmp	r0, #0
 8005d48:	dc06      	bgt.n	8005d58 <__sflush_r+0xf8>
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	e790      	b.n	8005c7a <__sflush_r+0x1a>
 8005d58:	4407      	add	r7, r0
 8005d5a:	1a36      	subs	r6, r6, r0
 8005d5c:	e7ea      	b.n	8005d34 <__sflush_r+0xd4>
 8005d5e:	bf00      	nop
 8005d60:	20400001 	.word	0x20400001

08005d64 <_fflush_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	690b      	ldr	r3, [r1, #16]
 8005d68:	4605      	mov	r5, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	b913      	cbnz	r3, 8005d74 <_fflush_r+0x10>
 8005d6e:	2500      	movs	r5, #0
 8005d70:	4628      	mov	r0, r5
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	b118      	cbz	r0, 8005d7e <_fflush_r+0x1a>
 8005d76:	6983      	ldr	r3, [r0, #24]
 8005d78:	b90b      	cbnz	r3, 8005d7e <_fflush_r+0x1a>
 8005d7a:	f000 f887 	bl	8005e8c <__sinit>
 8005d7e:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <_fflush_r+0x6c>)
 8005d80:	429c      	cmp	r4, r3
 8005d82:	d11b      	bne.n	8005dbc <_fflush_r+0x58>
 8005d84:	686c      	ldr	r4, [r5, #4]
 8005d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ef      	beq.n	8005d6e <_fflush_r+0xa>
 8005d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d90:	07d0      	lsls	r0, r2, #31
 8005d92:	d404      	bmi.n	8005d9e <_fflush_r+0x3a>
 8005d94:	0599      	lsls	r1, r3, #22
 8005d96:	d402      	bmi.n	8005d9e <_fflush_r+0x3a>
 8005d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9a:	f000 f915 	bl	8005fc8 <__retarget_lock_acquire_recursive>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	4621      	mov	r1, r4
 8005da2:	f7ff ff5d 	bl	8005c60 <__sflush_r>
 8005da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005da8:	4605      	mov	r5, r0
 8005daa:	07da      	lsls	r2, r3, #31
 8005dac:	d4e0      	bmi.n	8005d70 <_fflush_r+0xc>
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	059b      	lsls	r3, r3, #22
 8005db2:	d4dd      	bmi.n	8005d70 <_fflush_r+0xc>
 8005db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db6:	f000 f908 	bl	8005fca <__retarget_lock_release_recursive>
 8005dba:	e7d9      	b.n	8005d70 <_fflush_r+0xc>
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <_fflush_r+0x70>)
 8005dbe:	429c      	cmp	r4, r3
 8005dc0:	d101      	bne.n	8005dc6 <_fflush_r+0x62>
 8005dc2:	68ac      	ldr	r4, [r5, #8]
 8005dc4:	e7df      	b.n	8005d86 <_fflush_r+0x22>
 8005dc6:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <_fflush_r+0x74>)
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	bf08      	it	eq
 8005dcc:	68ec      	ldreq	r4, [r5, #12]
 8005dce:	e7da      	b.n	8005d86 <_fflush_r+0x22>
 8005dd0:	080066cc 	.word	0x080066cc
 8005dd4:	080066ec 	.word	0x080066ec
 8005dd8:	080066ac 	.word	0x080066ac

08005ddc <std>:
 8005ddc:	2300      	movs	r3, #0
 8005dde:	b510      	push	{r4, lr}
 8005de0:	4604      	mov	r4, r0
 8005de2:	e9c0 3300 	strd	r3, r3, [r0]
 8005de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dea:	6083      	str	r3, [r0, #8]
 8005dec:	8181      	strh	r1, [r0, #12]
 8005dee:	6643      	str	r3, [r0, #100]	; 0x64
 8005df0:	81c2      	strh	r2, [r0, #14]
 8005df2:	6183      	str	r3, [r0, #24]
 8005df4:	4619      	mov	r1, r3
 8005df6:	2208      	movs	r2, #8
 8005df8:	305c      	adds	r0, #92	; 0x5c
 8005dfa:	f7fd fb63 	bl	80034c4 <memset>
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <std+0x38>)
 8005e00:	6224      	str	r4, [r4, #32]
 8005e02:	6263      	str	r3, [r4, #36]	; 0x24
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <std+0x3c>)
 8005e06:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e08:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <std+0x40>)
 8005e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e0c:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <std+0x44>)
 8005e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	bf00      	nop
 8005e14:	08006131 	.word	0x08006131
 8005e18:	08006153 	.word	0x08006153
 8005e1c:	0800618b 	.word	0x0800618b
 8005e20:	080061af 	.word	0x080061af

08005e24 <_cleanup_r>:
 8005e24:	4901      	ldr	r1, [pc, #4]	; (8005e2c <_cleanup_r+0x8>)
 8005e26:	f000 b8af 	b.w	8005f88 <_fwalk_reent>
 8005e2a:	bf00      	nop
 8005e2c:	08005d65 	.word	0x08005d65

08005e30 <__sfmoreglue>:
 8005e30:	2268      	movs	r2, #104	; 0x68
 8005e32:	b570      	push	{r4, r5, r6, lr}
 8005e34:	1e4d      	subs	r5, r1, #1
 8005e36:	4355      	muls	r5, r2
 8005e38:	460e      	mov	r6, r1
 8005e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e3e:	f7ff fa6b 	bl	8005318 <_malloc_r>
 8005e42:	4604      	mov	r4, r0
 8005e44:	b140      	cbz	r0, 8005e58 <__sfmoreglue+0x28>
 8005e46:	2100      	movs	r1, #0
 8005e48:	e9c0 1600 	strd	r1, r6, [r0]
 8005e4c:	300c      	adds	r0, #12
 8005e4e:	60a0      	str	r0, [r4, #8]
 8005e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e54:	f7fd fb36 	bl	80034c4 <memset>
 8005e58:	4620      	mov	r0, r4
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}

08005e5c <__sfp_lock_acquire>:
 8005e5c:	4801      	ldr	r0, [pc, #4]	; (8005e64 <__sfp_lock_acquire+0x8>)
 8005e5e:	f000 b8b3 	b.w	8005fc8 <__retarget_lock_acquire_recursive>
 8005e62:	bf00      	nop
 8005e64:	20000281 	.word	0x20000281

08005e68 <__sfp_lock_release>:
 8005e68:	4801      	ldr	r0, [pc, #4]	; (8005e70 <__sfp_lock_release+0x8>)
 8005e6a:	f000 b8ae 	b.w	8005fca <__retarget_lock_release_recursive>
 8005e6e:	bf00      	nop
 8005e70:	20000281 	.word	0x20000281

08005e74 <__sinit_lock_acquire>:
 8005e74:	4801      	ldr	r0, [pc, #4]	; (8005e7c <__sinit_lock_acquire+0x8>)
 8005e76:	f000 b8a7 	b.w	8005fc8 <__retarget_lock_acquire_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	20000282 	.word	0x20000282

08005e80 <__sinit_lock_release>:
 8005e80:	4801      	ldr	r0, [pc, #4]	; (8005e88 <__sinit_lock_release+0x8>)
 8005e82:	f000 b8a2 	b.w	8005fca <__retarget_lock_release_recursive>
 8005e86:	bf00      	nop
 8005e88:	20000282 	.word	0x20000282

08005e8c <__sinit>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	f7ff fff0 	bl	8005e74 <__sinit_lock_acquire>
 8005e94:	69a3      	ldr	r3, [r4, #24]
 8005e96:	b11b      	cbz	r3, 8005ea0 <__sinit+0x14>
 8005e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9c:	f7ff bff0 	b.w	8005e80 <__sinit_lock_release>
 8005ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8005ea6:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <__sinit+0x68>)
 8005ea8:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <__sinit+0x6c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8005eae:	42a3      	cmp	r3, r4
 8005eb0:	bf08      	it	eq
 8005eb2:	2301      	moveq	r3, #1
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	bf08      	it	eq
 8005eb8:	61a3      	streq	r3, [r4, #24]
 8005eba:	f000 f81f 	bl	8005efc <__sfp>
 8005ebe:	6060      	str	r0, [r4, #4]
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 f81b 	bl	8005efc <__sfp>
 8005ec6:	60a0      	str	r0, [r4, #8]
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 f817 	bl	8005efc <__sfp>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2104      	movs	r1, #4
 8005ed2:	60e0      	str	r0, [r4, #12]
 8005ed4:	6860      	ldr	r0, [r4, #4]
 8005ed6:	f7ff ff81 	bl	8005ddc <std>
 8005eda:	2201      	movs	r2, #1
 8005edc:	2109      	movs	r1, #9
 8005ede:	68a0      	ldr	r0, [r4, #8]
 8005ee0:	f7ff ff7c 	bl	8005ddc <std>
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	2112      	movs	r1, #18
 8005ee8:	68e0      	ldr	r0, [r4, #12]
 8005eea:	f7ff ff77 	bl	8005ddc <std>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61a3      	str	r3, [r4, #24]
 8005ef2:	e7d1      	b.n	8005e98 <__sinit+0xc>
 8005ef4:	08006330 	.word	0x08006330
 8005ef8:	08005e25 	.word	0x08005e25

08005efc <__sfp>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	4607      	mov	r7, r0
 8005f00:	f7ff ffac 	bl	8005e5c <__sfp_lock_acquire>
 8005f04:	4b1e      	ldr	r3, [pc, #120]	; (8005f80 <__sfp+0x84>)
 8005f06:	681e      	ldr	r6, [r3, #0]
 8005f08:	69b3      	ldr	r3, [r6, #24]
 8005f0a:	b913      	cbnz	r3, 8005f12 <__sfp+0x16>
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff ffbd 	bl	8005e8c <__sinit>
 8005f12:	3648      	adds	r6, #72	; 0x48
 8005f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	d503      	bpl.n	8005f24 <__sfp+0x28>
 8005f1c:	6833      	ldr	r3, [r6, #0]
 8005f1e:	b30b      	cbz	r3, 8005f64 <__sfp+0x68>
 8005f20:	6836      	ldr	r6, [r6, #0]
 8005f22:	e7f7      	b.n	8005f14 <__sfp+0x18>
 8005f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f28:	b9d5      	cbnz	r5, 8005f60 <__sfp+0x64>
 8005f2a:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <__sfp+0x88>)
 8005f2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f30:	60e3      	str	r3, [r4, #12]
 8005f32:	6665      	str	r5, [r4, #100]	; 0x64
 8005f34:	f000 f847 	bl	8005fc6 <__retarget_lock_init_recursive>
 8005f38:	f7ff ff96 	bl	8005e68 <__sfp_lock_release>
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	4629      	mov	r1, r5
 8005f40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f48:	6025      	str	r5, [r4, #0]
 8005f4a:	61a5      	str	r5, [r4, #24]
 8005f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f50:	f7fd fab8 	bl	80034c4 <memset>
 8005f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f60:	3468      	adds	r4, #104	; 0x68
 8005f62:	e7d9      	b.n	8005f18 <__sfp+0x1c>
 8005f64:	2104      	movs	r1, #4
 8005f66:	4638      	mov	r0, r7
 8005f68:	f7ff ff62 	bl	8005e30 <__sfmoreglue>
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	6030      	str	r0, [r6, #0]
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d1d5      	bne.n	8005f20 <__sfp+0x24>
 8005f74:	f7ff ff78 	bl	8005e68 <__sfp_lock_release>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	e7ee      	b.n	8005f5c <__sfp+0x60>
 8005f7e:	bf00      	nop
 8005f80:	08006330 	.word	0x08006330
 8005f84:	ffff0001 	.word	0xffff0001

08005f88 <_fwalk_reent>:
 8005f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	4688      	mov	r8, r1
 8005f90:	2700      	movs	r7, #0
 8005f92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8005f9e:	d505      	bpl.n	8005fac <_fwalk_reent+0x24>
 8005fa0:	6824      	ldr	r4, [r4, #0]
 8005fa2:	2c00      	cmp	r4, #0
 8005fa4:	d1f7      	bne.n	8005f96 <_fwalk_reent+0xe>
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fac:	89ab      	ldrh	r3, [r5, #12]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d907      	bls.n	8005fc2 <_fwalk_reent+0x3a>
 8005fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	d003      	beq.n	8005fc2 <_fwalk_reent+0x3a>
 8005fba:	4629      	mov	r1, r5
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	47c0      	blx	r8
 8005fc0:	4307      	orrs	r7, r0
 8005fc2:	3568      	adds	r5, #104	; 0x68
 8005fc4:	e7e9      	b.n	8005f9a <_fwalk_reent+0x12>

08005fc6 <__retarget_lock_init_recursive>:
 8005fc6:	4770      	bx	lr

08005fc8 <__retarget_lock_acquire_recursive>:
 8005fc8:	4770      	bx	lr

08005fca <__retarget_lock_release_recursive>:
 8005fca:	4770      	bx	lr

08005fcc <__swhatbuf_r>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	460e      	mov	r6, r1
 8005fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	2900      	cmp	r1, #0
 8005fd8:	461d      	mov	r5, r3
 8005fda:	b096      	sub	sp, #88	; 0x58
 8005fdc:	da08      	bge.n	8005ff0 <__swhatbuf_r+0x24>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005fe4:	602a      	str	r2, [r5, #0]
 8005fe6:	061a      	lsls	r2, r3, #24
 8005fe8:	d410      	bmi.n	800600c <__swhatbuf_r+0x40>
 8005fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fee:	e00e      	b.n	800600e <__swhatbuf_r+0x42>
 8005ff0:	466a      	mov	r2, sp
 8005ff2:	f000 f903 	bl	80061fc <_fstat_r>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	dbf1      	blt.n	8005fde <__swhatbuf_r+0x12>
 8005ffa:	9a01      	ldr	r2, [sp, #4]
 8005ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006004:	425a      	negs	r2, r3
 8006006:	415a      	adcs	r2, r3
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	e7ee      	b.n	8005fea <__swhatbuf_r+0x1e>
 800600c:	2340      	movs	r3, #64	; 0x40
 800600e:	2000      	movs	r0, #0
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	b016      	add	sp, #88	; 0x58
 8006014:	bd70      	pop	{r4, r5, r6, pc}
	...

08006018 <__smakebuf_r>:
 8006018:	898b      	ldrh	r3, [r1, #12]
 800601a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800601c:	079d      	lsls	r5, r3, #30
 800601e:	4606      	mov	r6, r0
 8006020:	460c      	mov	r4, r1
 8006022:	d507      	bpl.n	8006034 <__smakebuf_r+0x1c>
 8006024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	6123      	str	r3, [r4, #16]
 800602c:	2301      	movs	r3, #1
 800602e:	6163      	str	r3, [r4, #20]
 8006030:	b002      	add	sp, #8
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	466a      	mov	r2, sp
 8006036:	ab01      	add	r3, sp, #4
 8006038:	f7ff ffc8 	bl	8005fcc <__swhatbuf_r>
 800603c:	9900      	ldr	r1, [sp, #0]
 800603e:	4605      	mov	r5, r0
 8006040:	4630      	mov	r0, r6
 8006042:	f7ff f969 	bl	8005318 <_malloc_r>
 8006046:	b948      	cbnz	r0, 800605c <__smakebuf_r+0x44>
 8006048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604c:	059a      	lsls	r2, r3, #22
 800604e:	d4ef      	bmi.n	8006030 <__smakebuf_r+0x18>
 8006050:	f023 0303 	bic.w	r3, r3, #3
 8006054:	f043 0302 	orr.w	r3, r3, #2
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	e7e3      	b.n	8006024 <__smakebuf_r+0xc>
 800605c:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <__smakebuf_r+0x7c>)
 800605e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	6020      	str	r0, [r4, #0]
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	6120      	str	r0, [r4, #16]
 800606e:	6163      	str	r3, [r4, #20]
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	b15b      	cbz	r3, 800608c <__smakebuf_r+0x74>
 8006074:	4630      	mov	r0, r6
 8006076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607a:	f000 f8d1 	bl	8006220 <_isatty_r>
 800607e:	b128      	cbz	r0, 800608c <__smakebuf_r+0x74>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	89a0      	ldrh	r0, [r4, #12]
 800608e:	4305      	orrs	r5, r0
 8006090:	81a5      	strh	r5, [r4, #12]
 8006092:	e7cd      	b.n	8006030 <__smakebuf_r+0x18>
 8006094:	08005e25 	.word	0x08005e25

08006098 <_malloc_usable_size_r>:
 8006098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800609c:	1f18      	subs	r0, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfbc      	itt	lt
 80060a2:	580b      	ldrlt	r3, [r1, r0]
 80060a4:	18c0      	addlt	r0, r0, r3
 80060a6:	4770      	bx	lr

080060a8 <_raise_r>:
 80060a8:	291f      	cmp	r1, #31
 80060aa:	b538      	push	{r3, r4, r5, lr}
 80060ac:	4604      	mov	r4, r0
 80060ae:	460d      	mov	r5, r1
 80060b0:	d904      	bls.n	80060bc <_raise_r+0x14>
 80060b2:	2316      	movs	r3, #22
 80060b4:	6003      	str	r3, [r0, #0]
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060be:	b112      	cbz	r2, 80060c6 <_raise_r+0x1e>
 80060c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060c4:	b94b      	cbnz	r3, 80060da <_raise_r+0x32>
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f830 	bl	800612c <_getpid_r>
 80060cc:	462a      	mov	r2, r5
 80060ce:	4601      	mov	r1, r0
 80060d0:	4620      	mov	r0, r4
 80060d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060d6:	f000 b817 	b.w	8006108 <_kill_r>
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d00a      	beq.n	80060f4 <_raise_r+0x4c>
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	d103      	bne.n	80060ea <_raise_r+0x42>
 80060e2:	2316      	movs	r3, #22
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	2001      	movs	r0, #1
 80060e8:	e7e7      	b.n	80060ba <_raise_r+0x12>
 80060ea:	2400      	movs	r4, #0
 80060ec:	4628      	mov	r0, r5
 80060ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060f2:	4798      	blx	r3
 80060f4:	2000      	movs	r0, #0
 80060f6:	e7e0      	b.n	80060ba <_raise_r+0x12>

080060f8 <raise>:
 80060f8:	4b02      	ldr	r3, [pc, #8]	; (8006104 <raise+0xc>)
 80060fa:	4601      	mov	r1, r0
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	f7ff bfd3 	b.w	80060a8 <_raise_r>
 8006102:	bf00      	nop
 8006104:	2000000c 	.word	0x2000000c

08006108 <_kill_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	2300      	movs	r3, #0
 800610c:	4d06      	ldr	r5, [pc, #24]	; (8006128 <_kill_r+0x20>)
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	4611      	mov	r1, r2
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	f7fb fb9f 	bl	8001858 <_kill>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	d102      	bne.n	8006124 <_kill_r+0x1c>
 800611e:	682b      	ldr	r3, [r5, #0]
 8006120:	b103      	cbz	r3, 8006124 <_kill_r+0x1c>
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	bd38      	pop	{r3, r4, r5, pc}
 8006126:	bf00      	nop
 8006128:	2000027c 	.word	0x2000027c

0800612c <_getpid_r>:
 800612c:	f7fb bb8d 	b.w	800184a <_getpid>

08006130 <__sread>:
 8006130:	b510      	push	{r4, lr}
 8006132:	460c      	mov	r4, r1
 8006134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006138:	f000 f894 	bl	8006264 <_read_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	bfab      	itete	ge
 8006140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006142:	89a3      	ldrhlt	r3, [r4, #12]
 8006144:	181b      	addge	r3, r3, r0
 8006146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800614a:	bfac      	ite	ge
 800614c:	6563      	strge	r3, [r4, #84]	; 0x54
 800614e:	81a3      	strhlt	r3, [r4, #12]
 8006150:	bd10      	pop	{r4, pc}

08006152 <__swrite>:
 8006152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006156:	461f      	mov	r7, r3
 8006158:	898b      	ldrh	r3, [r1, #12]
 800615a:	4605      	mov	r5, r0
 800615c:	05db      	lsls	r3, r3, #23
 800615e:	460c      	mov	r4, r1
 8006160:	4616      	mov	r6, r2
 8006162:	d505      	bpl.n	8006170 <__swrite+0x1e>
 8006164:	2302      	movs	r3, #2
 8006166:	2200      	movs	r2, #0
 8006168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616c:	f000 f868 	bl	8006240 <_lseek_r>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	4632      	mov	r2, r6
 8006174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	4628      	mov	r0, r5
 800617c:	463b      	mov	r3, r7
 800617e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	f000 b817 	b.w	80061b8 <_write_r>

0800618a <__sseek>:
 800618a:	b510      	push	{r4, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006192:	f000 f855 	bl	8006240 <_lseek_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	bf15      	itete	ne
 800619c:	6560      	strne	r0, [r4, #84]	; 0x54
 800619e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061a6:	81a3      	strheq	r3, [r4, #12]
 80061a8:	bf18      	it	ne
 80061aa:	81a3      	strhne	r3, [r4, #12]
 80061ac:	bd10      	pop	{r4, pc}

080061ae <__sclose>:
 80061ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b2:	f000 b813 	b.w	80061dc <_close_r>
	...

080061b8 <_write_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	2200      	movs	r2, #0
 80061c2:	4d05      	ldr	r5, [pc, #20]	; (80061d8 <_write_r+0x20>)
 80061c4:	602a      	str	r2, [r5, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f7fb fb7d 	bl	80018c6 <_write>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_write_r+0x1e>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_write_r+0x1e>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	2000027c 	.word	0x2000027c

080061dc <_close_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	2300      	movs	r3, #0
 80061e0:	4d05      	ldr	r5, [pc, #20]	; (80061f8 <_close_r+0x1c>)
 80061e2:	4604      	mov	r4, r0
 80061e4:	4608      	mov	r0, r1
 80061e6:	602b      	str	r3, [r5, #0]
 80061e8:	f7fb fb89 	bl	80018fe <_close>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_close_r+0x1a>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_close_r+0x1a>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	2000027c 	.word	0x2000027c

080061fc <_fstat_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	2300      	movs	r3, #0
 8006200:	4d06      	ldr	r5, [pc, #24]	; (800621c <_fstat_r+0x20>)
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	f7fb fb83 	bl	8001914 <_fstat>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d102      	bne.n	8006218 <_fstat_r+0x1c>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b103      	cbz	r3, 8006218 <_fstat_r+0x1c>
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	2000027c 	.word	0x2000027c

08006220 <_isatty_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	2300      	movs	r3, #0
 8006224:	4d05      	ldr	r5, [pc, #20]	; (800623c <_isatty_r+0x1c>)
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fb fb81 	bl	8001932 <_isatty>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_isatty_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_isatty_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	2000027c 	.word	0x2000027c

08006240 <_lseek_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4604      	mov	r4, r0
 8006244:	4608      	mov	r0, r1
 8006246:	4611      	mov	r1, r2
 8006248:	2200      	movs	r2, #0
 800624a:	4d05      	ldr	r5, [pc, #20]	; (8006260 <_lseek_r+0x20>)
 800624c:	602a      	str	r2, [r5, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	f7fb fb79 	bl	8001946 <_lseek>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_lseek_r+0x1e>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_lseek_r+0x1e>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	2000027c 	.word	0x2000027c

08006264 <_read_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4604      	mov	r4, r0
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	2200      	movs	r2, #0
 800626e:	4d05      	ldr	r5, [pc, #20]	; (8006284 <_read_r+0x20>)
 8006270:	602a      	str	r2, [r5, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	f7fb fb0a 	bl	800188c <_read>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d102      	bne.n	8006282 <_read_r+0x1e>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	b103      	cbz	r3, 8006282 <_read_r+0x1e>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	2000027c 	.word	0x2000027c

08006288 <_init>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	bf00      	nop
 800628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628e:	bc08      	pop	{r3}
 8006290:	469e      	mov	lr, r3
 8006292:	4770      	bx	lr

08006294 <_fini>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr
